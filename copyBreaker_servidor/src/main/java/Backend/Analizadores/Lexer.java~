// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexer.jflex

//Configuraci√≥n
package Backend.Analizadores;
import java_cup.runtime.*;
import Backend.Objetos.Token;
import static Backend.Analizadores.ParserSym.*;
//import Objetos.ReporteError;//yo supongo que si se debe importar para usar el eqq de ctes static, aunque sea kotlin... solo era para probar que si jala cosas de kotlin en Java xD


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int SSTRING = 2;
  public static final int ERROR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\0\1\7\1\0\1\5\1\10\2\11"+
    "\1\12\1\11\1\13\1\11\1\14\1\15\12\16\2\13"+
    "\3\5\2\0\16\17\1\20\3\17\1\21\7\17\1\0"+
    "\1\22\2\0\1\23\1\0\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\17\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\3\17\1\13\1\5\1\13\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\6\1\10\2\5\1\1\15\5\1\11\1\12"+
    "\1\13\2\14\2\0\1\15\1\0\15\5\1\16\12\5"+
    "\1\17\1\20\1\21\1\22\1\23\2\0\2\15\1\10"+
    "\14\5\1\24\1\5\1\25\1\26\10\5\1\0\1\27"+
    "\4\5\1\30\1\31\3\5\1\32\7\5\1\33\1\34"+
    "\1\5\1\27\3\5\1\35\1\36\2\5\1\37\6\5"+
    "\1\40\1\41\1\42\2\5\1\43\1\44\2\5\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\2\5\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\176\0\250\0\176\0\176"+
    "\0\322\0\374\0\176\0\176\0\u0126\0\u0150\0\u017a\0\u01a4"+
    "\0\322\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca"+
    "\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6\0\u03f0\0\176"+
    "\0\u041a\0\176\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516"+
    "\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\u06e4\0\u070e\0\322\0\u0738\0\u0762\0\u078c"+
    "\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\176"+
    "\0\176\0\176\0\176\0\176\0\u08dc\0\u0906\0\176\0\u0930"+
    "\0\u04ec\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56"+
    "\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\322\0\u0b52\0\322"+
    "\0\322\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78"+
    "\0\u0ca2\0\u0ccc\0\u08dc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\322"+
    "\0\322\0\u0d9e\0\u0dc8\0\u0df2\0\322\0\u0e1c\0\u0e46\0\u0e70"+
    "\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\322\0\322\0\u0f42\0\176"+
    "\0\u0f6c\0\u0f96\0\u0fc0\0\322\0\322\0\u0fea\0\u1014\0\322"+
    "\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\322\0\322"+
    "\0\322\0\u113a\0\u1164\0\322\0\322\0\u118e\0\u11b8\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\u11e2\0\u120c\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\7\1\10\1\11\1\12"+
    "\2\13\2\14\1\15\1\16\1\11\1\17\1\20\1\4"+
    "\1\21\1\11\1\22\1\23\1\24\1\25\1\26\2\11"+
    "\1\27\4\11\1\30\1\11\1\31\1\32\1\33\1\34"+
    "\1\11\1\35\1\36\2\37\2\4\2\37\1\40\13\37"+
    "\1\41\27\37\1\4\2\42\1\43\1\42\6\4\2\14"+
    "\35\4\54\0\1\5\56\0\1\11\6\0\4\11\1\0"+
    "\27\11\4\0\1\44\12\0\3\44\2\0\26\44\12\0"+
    "\1\45\2\0\1\46\50\0\1\47\1\0\1\16\42\0"+
    "\1\11\6\0\4\11\1\0\2\11\1\50\24\11\7\0"+
    "\1\11\6\0\4\11\1\0\23\11\1\51\3\11\7\0"+
    "\1\11\6\0\4\11\1\0\17\11\1\52\1\11\1\53"+
    "\5\11\7\0\1\11\6\0\4\11\1\0\1\11\1\54"+
    "\6\11\1\55\3\11\1\56\12\11\7\0\1\11\6\0"+
    "\4\11\1\0\5\11\1\57\11\11\1\60\7\11\7\0"+
    "\1\11\6\0\4\11\1\0\14\11\1\61\12\11\7\0"+
    "\1\11\6\0\4\11\1\0\1\11\1\62\7\11\1\63"+
    "\5\11\1\64\7\11\7\0\1\11\6\0\4\11\1\0"+
    "\6\11\1\65\6\11\1\66\1\67\10\11\7\0\1\11"+
    "\6\0\4\11\1\0\5\11\1\70\21\11\7\0\1\11"+
    "\6\0\4\11\1\0\21\11\1\71\2\11\1\72\2\11"+
    "\7\0\1\11\6\0\4\11\1\0\5\11\1\73\21\11"+
    "\7\0\1\11\6\0\4\11\1\0\26\11\1\74\7\0"+
    "\1\11\6\0\4\11\1\0\21\11\1\75\5\11\7\0"+
    "\1\11\6\0\4\11\1\0\17\11\1\76\7\11\7\0"+
    "\1\11\6\0\4\11\1\0\10\11\1\77\16\11\2\37"+
    "\2\0\2\37\1\0\13\37\1\0\27\37\6\0\1\100"+
    "\32\0\1\101\2\0\1\102\1\0\1\103\5\0\1\42"+
    "\57\0\1\104\41\0\12\105\1\106\37\105\2\46\1\107"+
    "\1\110\46\46\16\0\1\111\42\0\1\11\6\0\4\11"+
    "\1\0\12\11\1\112\14\11\7\0\1\11\6\0\4\11"+
    "\1\0\21\11\1\113\5\11\7\0\1\11\6\0\4\11"+
    "\1\0\17\11\1\114\7\11\7\0\1\11\6\0\4\11"+
    "\1\0\5\11\1\115\21\11\7\0\1\11\6\0\4\11"+
    "\1\0\22\11\1\116\4\11\7\0\1\11\6\0\4\11"+
    "\1\0\1\11\1\117\25\11\7\0\1\11\6\0\4\11"+
    "\1\0\1\11\1\120\25\11\7\0\1\11\6\0\4\11"+
    "\1\0\6\11\1\121\20\11\7\0\1\11\6\0\4\11"+
    "\1\0\24\11\1\122\2\11\7\0\1\11\6\0\4\11"+
    "\1\0\22\11\1\123\4\11\7\0\1\11\6\0\4\11"+
    "\1\0\14\11\1\124\12\11\7\0\1\11\6\0\4\11"+
    "\1\0\16\11\1\125\10\11\7\0\1\11\6\0\4\11"+
    "\1\0\21\11\1\126\5\11\7\0\1\11\6\0\4\11"+
    "\1\0\20\11\1\127\6\11\7\0\1\11\6\0\4\11"+
    "\1\0\23\11\1\130\3\11\7\0\1\11\6\0\4\11"+
    "\1\0\26\11\1\131\7\0\1\11\6\0\4\11\1\0"+
    "\11\11\1\132\5\11\1\133\7\11\7\0\1\11\6\0"+
    "\4\11\1\0\2\11\1\134\24\11\7\0\1\11\6\0"+
    "\4\11\1\0\23\11\1\135\3\11\7\0\1\11\6\0"+
    "\4\11\1\0\11\11\1\136\15\11\7\0\1\11\6\0"+
    "\4\11\1\0\24\11\1\137\2\11\7\0\1\11\6\0"+
    "\4\11\1\0\11\11\1\140\15\11\7\0\1\11\6\0"+
    "\4\11\1\0\11\11\1\141\15\11\12\105\1\142\51\105"+
    "\1\142\2\105\1\143\34\105\2\0\1\107\56\0\1\11"+
    "\6\0\4\11\1\0\5\11\1\144\21\11\7\0\1\11"+
    "\6\0\4\11\1\0\11\11\1\145\15\11\7\0\1\11"+
    "\6\0\4\11\1\0\14\11\1\146\12\11\7\0\1\11"+
    "\6\0\4\11\1\0\1\11\1\147\25\11\7\0\1\11"+
    "\6\0\4\11\1\0\5\11\1\150\21\11\7\0\1\11"+
    "\6\0\4\11\1\0\21\11\1\151\5\11\7\0\1\11"+
    "\6\0\4\11\1\0\22\11\1\152\4\11\7\0\1\11"+
    "\6\0\4\11\1\0\1\11\1\153\25\11\7\0\1\11"+
    "\6\0\4\11\1\0\2\11\1\154\24\11\7\0\1\11"+
    "\6\0\4\11\1\0\5\11\1\155\21\11\7\0\1\11"+
    "\6\0\4\11\1\0\22\11\1\137\4\11\7\0\1\11"+
    "\6\0\4\11\1\0\1\11\1\156\25\11\7\0\1\11"+
    "\6\0\4\11\1\0\17\11\1\157\7\11\7\0\1\11"+
    "\6\0\4\11\1\0\25\11\1\160\1\11\7\0\1\11"+
    "\6\0\4\11\1\0\23\11\1\161\3\11\7\0\1\11"+
    "\6\0\4\11\1\0\14\11\1\162\12\11\7\0\1\11"+
    "\6\0\4\11\1\0\24\11\1\163\2\11\7\0\1\11"+
    "\6\0\4\11\1\0\23\11\1\164\3\11\7\0\1\11"+
    "\6\0\4\11\1\0\5\11\1\165\21\11\7\0\1\11"+
    "\6\0\4\11\1\0\4\11\1\166\22\11\7\0\1\11"+
    "\6\0\4\11\1\0\14\11\1\167\12\11\12\105\1\142"+
    "\2\105\1\170\34\105\7\0\1\11\6\0\4\11\1\0"+
    "\3\11\1\171\23\11\7\0\1\11\6\0\4\11\1\0"+
    "\16\11\1\172\10\11\7\0\1\11\6\0\4\11\1\0"+
    "\5\11\1\173\21\11\7\0\1\11\6\0\4\11\1\0"+
    "\13\11\1\174\13\11\7\0\1\11\6\0\4\11\1\0"+
    "\22\11\1\175\4\11\7\0\1\11\6\0\4\11\1\0"+
    "\24\11\1\176\2\11\7\0\1\11\6\0\4\11\1\0"+
    "\14\11\1\177\12\11\7\0\1\11\6\0\4\11\1\0"+
    "\14\11\1\200\12\11\7\0\1\11\6\0\4\11\1\0"+
    "\21\11\1\201\5\11\7\0\1\11\6\0\4\11\1\0"+
    "\1\11\1\202\25\11\7\0\1\11\6\0\4\11\1\0"+
    "\5\11\1\203\21\11\7\0\1\11\6\0\4\11\1\0"+
    "\11\11\1\204\15\11\7\0\1\11\6\0\4\11\1\0"+
    "\21\11\1\205\5\11\7\0\1\11\6\0\4\11\1\0"+
    "\3\11\1\206\23\11\7\0\1\11\6\0\4\11\1\0"+
    "\5\11\1\207\21\11\7\0\1\11\6\0\4\11\1\0"+
    "\23\11\1\210\3\11\7\0\1\11\6\0\4\11\1\0"+
    "\7\11\1\211\17\11\7\0\1\11\6\0\4\11\1\0"+
    "\1\11\1\212\25\11\7\0\1\11\6\0\4\11\1\0"+
    "\14\11\1\213\12\11\7\0\1\11\6\0\4\11\1\0"+
    "\5\11\1\214\21\11\7\0\1\11\6\0\4\11\1\0"+
    "\23\11\1\215\3\11\7\0\1\11\6\0\4\11\1\0"+
    "\23\11\1\216\3\11\7\0\1\11\6\0\4\11\1\0"+
    "\3\11\1\217\23\11\7\0\1\11\6\0\4\11\1\0"+
    "\3\11\1\220\23\11\7\0\1\11\6\0\4\11\1\0"+
    "\16\11\1\221\10\11\7\0\1\11\6\0\4\11\1\0"+
    "\10\11\1\222\16\11\7\0\1\11\6\0\4\11\1\0"+
    "\16\11\1\223\10\11\7\0\1\11\6\0\4\11\1\0"+
    "\23\11\1\224\3\11\7\0\1\11\6\0\4\11\1\0"+
    "\5\11\1\225\21\11\7\0\1\11\6\0\4\11\1\0"+
    "\23\11\1\226\3\11\7\0\1\11\6\0\4\11\1\0"+
    "\5\11\1\227\21\11\7\0\1\11\6\0\4\11\1\0"+
    "\4\11\1\230\22\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4662];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\2\11\2\1\2\11\23\1\1\11"+
    "\1\1\1\11\1\1\2\0\1\1\1\0\30\1\5\11"+
    "\2\0\1\11\32\1\1\0\25\1\1\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    String[] nombreClases = {"clasePrueba"};//quiz√° se reeemplzace con una lista... ah√≠ te acuerdas de poner el seter...

    boolean requeriaCompania = false;
    Token tokenAnterior = null;

    String operadorAnterior = null;
    Symbol endOperator = null;
    String[] operadoresCondicionales = {"&&", "||", "==", ">=", "<=", "!="};//solo los que est√©n formados por dos operadores, sino pues queda en single xD
    String[] operadoresCondicionalesSimples = {"&", "|", ">", "<", "=", "!"};
    StringBuffer contenido = new StringBuffer();
  
    private Symbol symbol(int tipo, String valor, boolean conCompania){//Dej√© el valor como string, como no requiero que alguno de los lexemas sea diferente...
        Token tokenActual = new Token (yyline+1, yycolumn+1, valor, (conCompania)?tokenAnterior:null);        

        if(tokenAnterior != null && requeriaCompania){
            tokenAnterior.setSiguiente(tokenActual);
        }

        tokenAnterior = tokenActual;
        requeriaCompania = conCompania;
        return new Symbol(tipo, yyline+1, yycolumn+1, tokenActual);
    }

    private Symbol acccionReservada(int tipo){//por el momneot es void xD    
        System.out.println("[L] reservada: "+ yytext());        

        return symbol(tipo, yytext(), false);    
    }    

    private Symbol accionSimbolosAceptados(){        
        if(yystate() == ERROR){
            accionParadaParaError();
        }

        System.out.println("[L] s√≠mbolo "+ yytext() +" T: " +((yytext().equals(":"))?"DOS_PUNTOS":((yytext().equals(","))?"COMA":((yytext().equals("{"))?"LLAVE_A":((yytext().equals("}"))?"LLAVE_C":((yytext().equals(";"))?"PUNTO_COMA":"PUNTO"))))));        
        return symbol(((yytext().equals(":"))?DOS_PUNTOS:((yytext().equals(","))?COMA:((yytext().equals("{"))?LLAVE_A:((yytext().equals("}"))?LLAVE_C:((yytext().equals(";"))?PUNTO_COMA:PUNTO))))), yytext(), false);    
    }//por si acaso miras que si te es posible add SA a ERROR sin generar problemas al formar los tokens aqu√≠ y analizar las RP en el parser

    private Symbol groupConditionalOperators(){        
        for(int indice = 0; indice < operadoresCondicionales.length; indice ++){
            if((operadorAnterior+yytext()).equals(operadoresCondicionales[indice])){
                System.out.println("[L] operador: "+ ((indice < 2)?"logico":"relacional") +"compuesto: "+ operadorAnterior+yytext());
                Symbol simbolo = symbol(((indice < 2)?OPERADOR_LOGICO:OPERADOR_RELACIONAL), (operadorAnterior+yytext()), false);//se setea el operador compuesto de dos operadores condicionales                    
                operadorAnterior = null;
                return simbolo;//se retorna el objeto
            }
        }
        return sendSingleOperator();        
    }//debo add un enof val por si en dado caso un s√≠mbolo de estos se quedara solo al final, puesto que de ser as√≠ nunca ser√≠a enviado al parser...

    private Symbol sendSingleOperator(){        
        yypushback(yylength());//para que vuelva a leer ese caracter condicional que no permit√≠a formar paraeja alguna de ese tipo de operadores

        return sendOperatorConditionalSymbol();        
    }

    private Symbol sendOperatorConditionalSymbol(){
        Symbol simbolo = null;

        for(int indice = 0; indice < operadoresCondicionalesSimples.length; indice ++){
            if((operadorAnterior).equals(operadoresCondicionalesSimples[indice])){
                System.out.println("[L] operador: " + ((indice <= 3)?((indice<2)?"logico: ":"relacional: "):((indice==4)?"igual: ":"no: ")) + operadorAnterior);
                //((indice <= 3)?("operador"+ ((indice < 2)?"logico":((indice < 4)"relacional")) +"simple: "):((indice == 4)?"igual: ":"no: "))
                simbolo = symbol(((indice <= 3)?((indice < 2)?OPERADOR_LOGICO:OPERADOR_RELACIONAL):((indice == 4)?IGUAL:NO)), operadorAnterior, false);//se setea el objeto para el operador simple, seg√∫n lo que contenga la var...
                //((indice <= 3)?((indice < 2)?OPERADOR_LOGICO:((indice < 4)OPERADOR_RELACIONAL)):((indice == 4)?IGUAL:NO))
                operadorAnterior = null;
                break;//lo add para ya no seguir buscando pues no tiene chiste xD
            }
        }
        return simbolo;//nunca retornar√° null, puesto que siempre se invocar√° cuando tenga algo que devolver...
    }

    private Symbol accionIdentificador(){
        for(int claseActual = 0; claseActual < nombreClases.length; claseActual++){
            if(yytext().equals(nombreClases[claseActual])){
                System.out.println("[L] OBJETO: "+ yytext());
                return symbol(OBJETO, yytext(), false);
            }
        }
        System.out.println("[L] identificador: "+ yytext());
        return symbol(NOMBRE, yytext(), false);
    }

    private void accionProcesarError(){
        if(yystate() != ERROR){//no coloco tb a CADENA, porque se supone que no deber√≠a hacer match con el [^] cuando est√© dentro de ese estado l√©xico...
            //estadoAnteriorError = yystate();//esta es la alternativa a la que me refiero en axnParadaError, para dar msje cuando un string tiene error...
            contenido.setLength(0);//no provoca problemas el usar la variable string que tb usa SSTRING para concatenar, puesto que al estar en ese estado no se entrar√° aqu√≠ puesto que esta expre reg tiene la menor precedencia y las reglas de all√° impiden que este caso suceda... puesto que se absorben todos los caracteres posibles hasta llegar a la otra "
            yypushback(yylength());//iba a colocar 1, en lugar de yylength pero no se si la unidad de medida var√≠e porque podr√≠a se que cada caracter tenga un tama√±o diferente dependiendo de la cdad de bits que requiera para ser plasmado p.ej
            yybegin(ERROR);
        }else if(yystate() == ERROR){
            contenido.append(yytext());
        }
    }

    private void accionParadaParaError(){//aqu√≠ es donde se imprime todo lo concatenado que se clasific√≥ como error...          
        System.out.println("[L] error: "+ contenido.toString() + ((contenido.length() != 0)?" INVALID WORD":"Las cadenas solo pueden ocupar una l√≠nea")/*ReporteError.LEXER_INVALID_WORD*/ +"\n");
        yybegin(YYINITIAL);//ese operador ternario lo puse para que se justifique el hecho de que despu√©s de error no se muestre el contenido errado, puesto que contenido va a tener length = 0 si el error surgi√≥ en STRING [puesto que se llegar√° a error cuando haya salto de l√≠nea o retorno de carro no expl√≠cito] entonces puedo utilizar eso para personalizar el msje [cabe reslatar que si el error surge en el YYINI, siempre tendr√° ma≈õ de algo contenido, puesto que desde ese estado se puede llegar a error si se encuentra con algo que no es aceptado y ah√≠ el \n y \r son ignorados, es decir t√©cnicamente aceptados xD]
    }//si la justificaci√≥n por la cual uso el operador ternario no funciona, entonces guarda el stado y si ese es == SSTRING entonces pones ese msje xD, ah√≠ si el msje estar√≠a correcto siempre xD

    public void setListaClases(String[] listaClases){
        nombreClases = listaClases;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    if(operadorAnterior!=null){
        System.out.println("[L] end-operator: "+operadorAnterior);
        endOperator = sendSingleOperator();//no se va a exe el return depu√©s de hacer este != null, quiere decir que no se va a enviar al parser el operador... bueno eso sucedio en el lexer standalone, de todos modos en una clase bien hecha jam√°s tendr√≠a por qu√© exe esta axn, entonces no importa xD
    }//creo que va a dar error... porque desde aqu√≠ no se puede retornar algo, entonces mira yo creo que no provoca una incongruencia si haces el pushBack aqu√≠...    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(ParserSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if(operadorAnterior != null){return sendSingleOperator();}else{accionProcesarError();}
            }
            // fall through
          case 44: break;
          case 2:
            { /*se ignora*/
            }
            // fall through
          case 45: break;
          case 3:
            { if(operadorAnterior == null){if(endOperator==null){operadorAnterior = yytext();}else{System.out.println("endOperador retornado");return endOperator;}}else{return groupConditionalOperators();}
            }
            // fall through
          case 46: break;
          case 4:
            { if(operadorAnterior != null){return sendSingleOperator();}else{contenido.setLength(0); yybegin(SSTRING);}
            }
            // fall through
          case 47: break;
          case 5:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return accionIdentificador();}
            }
            // fall through
          case 48: break;
          case 6:
            { if(operadorAnterior != null){return sendSingleOperator();}else{System.out.println("[L] simbolo: "+ yytext());
                                         return symbol(((yytext().equals("+"))?MAS:((yytext().equals("-"))?RESTA:((yytext().equals("*"))?ASTERISCO:((yytext().equals("/"))?DIV:((yytext().equals("("))?PARENTESIS_A:PARENTESIS_C))))), yytext(), true);}
            }
            // fall through
          case 49: break;
          case 7:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return accionSimbolosAceptados();}
            }
            // fall through
          case 50: break;
          case 8:
            { if(operadorAnterior != null){return sendSingleOperator();}else{System.out.println("[L] numero: "+ yytext());return symbol(NUMERO, yytext(), false);}
            }
            // fall through
          case 51: break;
          case 9:
            { contenido.append( yytext());
            }
            // fall through
          case 52: break;
          case 10:
            { yybegin(YYINITIAL);System.out.println("[L] cadena: "+ contenido.toString() + " T: "+CADENA);return symbol(CADENA, new String(contenido), false);
            }
            // fall through
          case 53: break;
          case 11:
            { contenido.append('\\');
            }
            // fall through
          case 54: break;
          case 12:
            { accionParadaParaError();
            }
            // fall through
          case 55: break;
          case 13:
            { if(operadorAnterior != null){return sendSingleOperator();}else{System.out.println("[L] comentario-l√≠nea: "+ yytext().substring(2).trim());}/*se add a la lista de comments*/
            }
            // fall through
          case 56: break;
          case 14:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(IF);}
            }
            // fall through
          case 57: break;
          case 15:
            { contenido.append('\"');
            }
            // fall through
          case 58: break;
          case 16:
            { contenido.append('\n');
            }
            // fall through
          case 59: break;
          case 17:
            { contenido.append('\r');
            }
            // fall through
          case 60: break;
          case 18:
            { contenido.append('\t');
            }
            // fall through
          case 61: break;
          case 19:
            { if(operadorAnterior != null){return sendSingleOperator();}else{System.out.println("[L] caracter: "+ yytext().substring(1,2));return symbol(CARACTER, yytext().substring(1,2), false);}
            }
            // fall through
          case 62: break;
          case 20:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(FOR);}
            }
            // fall through
          case 63: break;
          case 21:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(INT);}
            }
            // fall through
          case 64: break;
          case 22:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(NEW);}
            }
            // fall through
          case 65: break;
          case 23:
            { if(operadorAnterior != null){return sendSingleOperator();}else{System.out.println("[L] comentario-multiLinea: "+ yytext().substring(2, yytext().length()-2).trim());}/*se add a la lista de comments*/
            }
            // fall through
          case 66: break;
          case 24:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(CASE);}
            }
            // fall through
          case 67: break;
          case 25:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(CHAR);}
            }
            // fall through
          case 68: break;
          case 26:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(ELSE);}
            }
            // fall through
          case 69: break;
          case 27:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(BOOLEANO);}
            }
            // fall through
          case 70: break;
          case 28:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(VOID);}
            }
            // fall through
          case 71: break;
          case 29:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(BREAK);}
            }
            // fall through
          case 72: break;
          case 30:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(CLASS);}
            }
            // fall through
          case 73: break;
          case 31:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(FINAL);}
            }
            // fall through
          case 74: break;
          case 32:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(WHILE);}
            }
            // fall through
          case 75: break;
          case 33:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(OBJECT);}
            }
            // fall through
          case 76: break;
          case 34:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(STRING);}
            }
            // fall through
          case 77: break;
          case 35:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(DOUBLE);}
            }
            // fall through
          case 78: break;
          case 36:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(IIMPORT);}
            }
            // fall through
          case 79: break;
          case 37:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(PUBLIC);}
            }
            // fall through
          case 80: break;
          case 38:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(RETURN);}
            }
            // fall through
          case 81: break;
          case 39:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(SWITCH);}
            }
            // fall through
          case 82: break;
          case 40:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(BOOLEAN);}
            }
            // fall through
          case 83: break;
          case 41:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(DEFAULT);}
            }
            // fall through
          case 84: break;
          case 42:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(PRIVATE);}
            }
            // fall through
          case 85: break;
          case 43:
            { if(operadorAnterior != null){return sendSingleOperator();}else{return acccionReservada(PROTECTED);}
            }
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
