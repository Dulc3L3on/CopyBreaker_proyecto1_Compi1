
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import Backend.Analizadores.ParserSym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\005\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\007\004\000\002\007\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\010" +
    "\007\000\002\010\006\000\002\011\004\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\005\000" +
    "\002\013\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\015\005\000\002\015\003" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\017\005\000\002\017\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\021\005\000\002\021" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\003\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\003\000" +
    "\002\031\004\000\002\031\003\000\002\032\007\000\002" +
    "\032\003\000\002\032\005\000\002\033\005\000\002\033" +
    "\004\000\002\034\010\000\002\034\010\000\002\034\010" +
    "\000\002\034\010\000\002\034\010\000\002\034\010\000" +
    "\002\034\010\000\002\035\006\000\002\035\005\000\002" +
    "\035\006\000\002\035\005\000\002\036\006\000\002\036" +
    "\005\000\002\036\006\000\002\036\005\000\002\037\006" +
    "\000\002\037\005\000\002\037\006\000\002\037\005\000" +
    "\002\040\006\000\002\040\005\000\002\040\006\000\002" +
    "\040\005\000\002\041\006\000\002\041\005\000\002\041" +
    "\006\000\002\041\005\000\002\041\006\000\002\041\005" +
    "\000\002\041\006\000\002\041\005\000\002\042\006\000" +
    "\002\042\005\000\002\042\006\000\002\042\005\000\002" +
    "\043\012\000\002\043\010\000\002\043\011\000\002\043" +
    "\007\000\002\044\005\000\002\044\003\000\002\044\002" +
    "\000\002\045\004\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\047\004\000\002\047" +
    "\003\000\002\047\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\004\000\002\051\006\000\002\051\010\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\005" +
    "\000\002\052\003\000\002\052\005\000\002\053\005\000" +
    "\002\053\003\000\002\054\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\004\000\002\054" +
    "\005\000\002\054\003\000\002\054\003\000\002\055\005" +
    "\000\002\055\003\000\002\056\005\000\002\056\005\000" +
    "\002\056\003\000\002\057\004\000\002\057\003\000\002" +
    "\060\004\000\002\060\004\000\002\060\004\000\002\060" +
    "\004\000\002\061\005\000\002\061\003\000\002\062\005" +
    "\000\002\062\003\000\002\064\005\000\002\064\006\000" +
    "\002\065\005\000\002\065\007\000\002\066\003\000\002" +
    "\066\003\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\067\005\000\002\070\004\000\002\071\003" +
    "\000\002\071\005\000\002\071\005\000\002\071\005\000" +
    "\002\072\005\000\002\072\005\000\002\073\003\000\002" +
    "\073\007\000\002\073\007\000\002\073\011\000\002\073" +
    "\011\000\002\074\011\000\002\075\003\000\002\075\003" +
    "\000\002\075\003\000\002\076\007\000\002\076\007\000" +
    "\002\076\007\000\002\076\007\000\002\076\007\000\002" +
    "\076\007\000\002\076\007\000\002\076\007\000\002\076" +
    "\007\000\002\076\007\000\002\076\007\000\002\076\007" +
    "\000\002\077\004\000\002\077\004\000\002\077\003\000" +
    "\002\100\003\000\002\100\002\000\002\101\004\000\002" +
    "\101\006\000\002\102\005\000\002\102\010\000\002\102" +
    "\003\000\002\103\005\000\002\103\010\000\002\103\006" +
    "\000\002\104\003\000\002\104\002\000\002\105\005\000" +
    "\002\105\003\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\107\003\000\002\107\005\000\002\107\003" +
    "\000\002\110\007\000\002\110\007\000\002\063\006\000" +
    "\002\063\005\000\002\063\005\000\002\063\003\000\002" +
    "\117\005\000\002\117\005\000\002\117\003\000\002\120" +
    "\003\000\002\120\003\000\002\122\003\000\002\122\003" +
    "\000\002\122\003\000\002\122\003\000\002\122\003\000" +
    "\002\121\005\000\002\121\004\000\002\121\004\000\002" +
    "\121\003\000\002\123\004\000\002\123\003\000\002\111" +
    "\011\000\002\112\004\000\002\112\003\000\002\113\004" +
    "\000\002\113\003\000\002\114\006\000\002\114\005\000" +
    "\002\115\005\000\002\115\004\000\002\115\002\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\124" +
    "\005\000\002\124\004\000\002\125\004\000\002\125\003" +
    "\000\002\125\003\000\002\126\003\000\002\126\004\000" +
    "\002\127\003\000\002\127\003\000\002\127\003\000\002" +
    "\127\003\000\002\127\003\000\002\127\003\000\002\130" +
    "\005\000\002\131\005\000\002\132\005\000\002\133\005" +
    "\000\002\134\005\000\002\135\005\000\002\136\005\000" +
    "\002\137\003\000\002\137\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u025c\000\016\004\010\005\016\012\005\013\007\014" +
    "\013\015\015\001\002\000\016\004\u025b\005\016\012\005" +
    "\013\007\014\013\015\015\001\002\000\024\005\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\026\ufff6\001\002\000\004\002\u025a\001\002\000\024\005" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\026\ufff5\001\002\000\004\025\u0253\001\002\000" +
    "\004\005\016\001\002\000\004\002\ufff7\001\002\000\024" +
    "\005\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\026\ufff4\001\002\000\004\002\uffff\001\002" +
    "\000\024\005\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\026\ufff3\001\002\000\004\024\017" +
    "\001\002\000\004\036\020\001\002\000\034\012\005\013" +
    "\007\014\013\015\015\016\023\017\041\020\032\021\024" +
    "\022\031\023\030\024\027\026\040\037\035\001\002\000" +
    "\004\033\u024f\001\002\000\034\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\026\uffc3\037\uffc3\001\002\000\004\025\u024a" +
    "\001\002\000\004\025\u023a\001\002\000\034\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\026\uffee\037\uffee\001\002\000" +
    "\034\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\026\uffef\037" +
    "\uffef\001\002\000\006\025\u0222\047\u0221\001\002\000\004" +
    "\025\u0209\001\002\000\004\025\u01f9\001\002\000\004\025" +
    "\u01e7\001\002\000\034\012\005\013\007\014\013\015\015" +
    "\016\023\017\041\020\032\021\024\022\031\023\030\024" +
    "\027\026\040\037\u01e6\001\002\000\022\016\023\017\041" +
    "\020\032\021\024\022\031\023\030\024\027\026\040\001" +
    "\002\000\004\002\ufff1\001\002\000\034\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\026\uffed\037\uffed\001\002\000\034" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1\037\uffc1" +
    "\001\002\000\004\025\u01d5\001\002\000\004\025\044\001" +
    "\002\000\006\033\uffe2\041\uffe2\001\002\000\006\033\uffe9" +
    "\041\u01c2\001\002\000\012\033\uffdf\041\uffdf\046\045\047" +
    "\046\001\002\000\014\025\171\030\173\032\167\043\202" +
    "\047\u0120\001\002\000\024\016\047\017\054\020\053\021" +
    "\060\022\051\023\050\024\055\041\uff94\050\uff94\001\002" +
    "\000\004\025\uff92\001\002\000\004\025\uff8d\001\002\000" +
    "\004\025\uff8e\001\002\000\006\041\uff95\050\uff95\001\002" +
    "\000\004\025\uff90\001\002\000\004\025\uff91\001\002\000" +
    "\004\025\uff8c\001\002\000\006\041\062\050\063\001\002" +
    "\000\004\025\061\001\002\000\004\025\uff8f\001\002\000" +
    "\006\041\uff93\050\uff93\001\002\000\020\016\047\017\054" +
    "\020\053\021\060\022\051\023\050\024\055\001\002\000" +
    "\004\036\065\001\002\000\034\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\026\uffbc\037\uffbc\001\002\000\056\003\114" +
    "\006\110\010\113\012\005\013\007\014\013\015\015\016" +
    "\075\017\073\020\124\021\067\022\112\023\103\024\125" +
    "\025\070\042\131\043\074\051\076\052\117\053\130\054" +
    "\107\056\115\001\002\000\004\046\u01cf\001\002\000\004" +
    "\025\u01c9\001\002\000\020\034\u012d\035\u0191\042\u0193\043" +
    "\u0190\045\u0195\046\uff2f\047\u012e\001\002\000\004\037\u01c6" +
    "\001\002\000\064\006\uff86\010\uff86\011\uff86\012\uff86\013" +
    "\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86" +
    "\022\uff86\023\uff86\024\uff86\025\uff86\037\uff86\042\uff86\043" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\056\uff86\057\uff86" +
    "\060\uff86\001\002\000\004\025\u01c1\001\002\000\004\043" +
    "\u01c4\001\002\000\004\025\u01c1\001\002\000\004\047\u0167" +
    "\001\002\000\020\016\075\017\073\020\124\021\067\022" +
    "\112\023\103\024\125\001\002\000\054\006\110\010\113" +
    "\012\005\013\007\014\013\015\015\016\075\017\073\020" +
    "\124\021\067\022\112\023\103\024\125\025\070\042\131" +
    "\043\074\051\076\052\117\053\130\054\107\056\115\001" +
    "\002\000\004\033\u0160\001\002\000\066\006\uff21\010\uff21" +
    "\011\uff21\012\uff21\013\uff21\014\uff21\015\uff21\016\uff21\017" +
    "\uff21\020\uff21\021\uff21\022\uff21\023\uff21\024\uff21\025\uff21" +
    "\037\uff21\042\uff21\043\uff21\051\uff21\052\uff21\053\uff21\054" +
    "\uff21\055\u015e\056\uff21\057\uff21\060\uff21\001\002\000\004" +
    "\025\u0155\001\002\000\064\006\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\037\uff88\042" +
    "\uff88\043\uff88\051\uff88\052\uff88\053\uff88\054\uff88\056\uff88" +
    "\057\uff88\060\uff88\001\002\000\006\033\uff59\050\uff59\001" +
    "\002\000\064\006\uff1f\010\uff1f\011\uff1f\012\uff1f\013\uff1f" +
    "\014\uff1f\015\uff1f\016\uff1f\017\uff1f\020\uff1f\021\uff1f\022" +
    "\uff1f\023\uff1f\024\uff1f\025\uff1f\037\uff1f\042\uff1f\043\uff1f" +
    "\051\uff1f\052\uff1f\053\uff1f\054\uff1f\056\uff1f\057\uff1f\060" +
    "\uff1f\001\002\000\004\047\u014c\001\002\000\004\034\u0129" +
    "\001\002\000\064\006\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\024\uff8a\025\uff8a\037\uff8a\042\uff8a\043" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\001\002\000\004\025\u0123\001\002\000\014\025" +
    "\171\030\173\032\167\043\202\047\u0120\001\002\000\064" +
    "\006\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\025\uff89\037\uff89\042\uff89\043\uff89\051\uff89\052" +
    "\uff89\053\uff89\054\uff89\056\uff89\057\uff89\060\uff89\001\002" +
    "\000\004\047\u0109\001\002\000\006\033\uff5a\050\uff5a\001" +
    "\002\000\004\047\u0102\001\002\000\064\006\uff4d\010\uff4d" +
    "\011\uff4d\012\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017" +
    "\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d" +
    "\037\uff4d\042\uff4d\043\uff4d\051\uff4d\052\uff4d\053\uff4d\054" +
    "\uff4d\056\uff4d\057\uff4d\060\uff4d\001\002\000\004\033\u0101" +
    "\001\002\000\004\037\u0100\001\002\000\064\006\uff85\010" +
    "\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85" +
    "\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025" +
    "\uff85\037\uff85\042\uff85\043\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\056\uff85\057\uff85\060\uff85\001\002\000\004\025" +
    "\372\001\002\000\004\025\357\001\002\000\064\006\uff87" +
    "\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016" +
    "\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\025\uff87\037\uff87\042\uff87\043\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\056\uff87\057\uff87\060\uff87\001\002\000\064" +
    "\006\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015" +
    "\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84" +
    "\024\uff84\025\uff84\037\uff84\042\uff84\043\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\056\uff84\057\uff84\060\uff84\001\002" +
    "\000\004\036\135\001\002\000\004\042\132\001\002\000" +
    "\004\025\133\001\002\000\006\033\uff56\050\uff56\001\002" +
    "\000\004\052\345\001\002\000\062\003\114\006\110\010" +
    "\144\011\145\012\005\013\007\014\013\015\015\016\075" +
    "\017\073\020\124\021\067\022\112\023\103\024\125\025" +
    "\070\037\141\042\131\043\074\051\076\052\117\053\130" +
    "\054\107\056\115\001\002\000\010\037\ufef2\057\ufef2\060" +
    "\ufef2\001\002\000\010\037\ufef0\057\ufef0\060\ufef0\001\002" +
    "\000\004\033\344\001\002\000\066\006\ufefa\010\ufefa\011" +
    "\ufefa\012\ufefa\013\ufefa\014\ufefa\015\ufefa\016\ufefa\017\ufefa" +
    "\020\ufefa\021\ufefa\022\ufefa\023\ufefa\024\ufefa\025\ufefa\037" +
    "\ufefa\042\ufefa\043\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa" +
    "\055\ufefa\056\ufefa\057\ufefa\060\ufefa\001\002\000\010\037" +
    "\ufef6\057\ufef6\060\ufef6\001\002\000\064\006\110\010\144" +
    "\011\145\012\005\013\007\014\013\015\015\016\075\017" +
    "\073\020\124\021\067\022\112\023\103\024\125\025\070" +
    "\037\ufef8\042\131\043\074\051\076\052\117\053\130\054" +
    "\107\056\115\057\ufef8\060\ufef8\001\002\000\026\007\176" +
    "\025\171\027\155\030\173\031\166\032\167\033\ufee7\043" +
    "\202\047\175\063\200\001\002\000\004\033\ufee6\001\002" +
    "\000\010\037\ufef3\057\ufef3\060\ufef3\001\002\000\010\037" +
    "\ufeef\057\ufeef\060\ufeef\001\002\000\010\037\ufef4\057\ufef4" +
    "\060\ufef4\001\002\000\004\037\154\001\002\000\010\037" +
    "\ufef1\057\ufef1\060\ufef1\001\002\000\010\037\ufef7\057\ufef7" +
    "\060\ufef7\001\002\000\066\006\ufefb\010\ufefb\011\ufefb\012" +
    "\ufefb\013\ufefb\014\ufefb\015\ufefb\016\ufefb\017\ufefb\020\ufefb" +
    "\021\ufefb\022\ufefb\023\ufefb\024\ufefb\025\ufefb\037\ufefb\042" +
    "\ufefb\043\ufefb\051\ufefb\052\ufefb\053\ufefb\054\ufefb\055\ufefb" +
    "\056\ufefb\057\ufefb\060\ufefb\001\002\000\020\033\uff61\040" +
    "\uff61\041\uff61\042\uff61\050\uff61\061\uff61\062\uff61\001\002" +
    "\000\004\061\306\001\002\000\010\033\341\042\263\062" +
    "\264\001\002\000\020\033\uff19\040\uff19\041\uff19\042\uff19" +
    "\050\uff19\061\uff19\062\uff19\001\002\000\006\033\340\061" +
    "\uff0f\001\002\000\020\033\uff67\040\uff67\041\uff67\042\uff67" +
    "\050\uff67\061\uff67\062\uff67\001\002\000\006\033\337\061" +
    "\uff10\001\002\000\020\033\uff16\040\uff16\041\uff16\042\uff16" +
    "\050\uff16\061\301\062\uff16\001\002\000\006\033\336\061" +
    "\uff12\001\002\000\020\033\uff0b\040\uff0b\041\uff0b\042\uff0b" +
    "\050\uff0b\061\uff0b\062\uff0b\001\002\000\020\033\uff5f\040" +
    "\uff5f\041\uff5f\042\uff5f\050\uff5f\061\uff5f\062\uff5f\001\002" +
    "\000\020\033\uff6c\040\uff6c\041\uff6c\042\uff6c\050\uff6c\061" +
    "\uff6c\062\uff6c\001\002\000\026\033\uff6e\035\uff6e\040\uff6e" +
    "\041\uff6e\042\uff6e\043\uff6e\045\uff6e\050\uff6e\061\uff6e\062" +
    "\uff6e\001\002\000\016\033\335\035\207\042\256\043\206" +
    "\045\212\061\uff13\001\002\000\026\033\uff6f\035\uff6f\040" +
    "\uff6f\041\uff6f\042\uff6f\043\uff6f\045\uff6f\050\uff6f\061\uff6f" +
    "\062\uff6f\001\002\000\010\033\334\042\245\061\uff11\001" +
    "\002\000\024\007\176\025\171\027\155\030\173\031\166" +
    "\032\167\043\202\047\175\063\200\001\002\000\006\023" +
    "\313\024\314\001\002\000\020\033\uff69\040\uff69\041\uff69" +
    "\042\271\050\uff69\061\uff69\062\uff69\001\002\000\012\025" +
    "\uff09\031\uff09\047\uff09\063\uff09\001\002\000\012\025\222" +
    "\031\166\047\221\063\224\001\002\000\012\025\171\030" +
    "\173\043\202\047\204\001\002\000\026\033\uff71\035\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\045\uff71\050\uff71\061" +
    "\uff71\062\uff71\001\002\000\012\025\171\030\173\043\202" +
    "\047\204\001\002\000\014\035\207\042\210\043\206\045" +
    "\212\050\211\001\002\000\012\025\171\030\173\043\202" +
    "\047\204\001\002\000\012\025\171\030\173\043\202\047" +
    "\204\001\002\000\012\025\171\030\173\043\202\047\204" +
    "\001\002\000\026\033\uff70\035\uff70\040\uff70\041\uff70\042" +
    "\uff70\043\uff70\045\uff70\050\uff70\061\uff70\062\uff70\001\002" +
    "\000\012\025\171\030\173\043\202\047\204\001\002\000" +
    "\026\033\uff72\035\uff72\040\uff72\041\uff72\042\uff72\043\uff72" +
    "\045\uff72\050\uff72\061\uff72\062\uff72\001\002\000\026\033" +
    "\uff75\035\207\040\uff75\041\uff75\042\uff75\043\uff75\045\212" +
    "\050\uff75\061\uff75\062\uff75\001\002\000\026\033\uff73\035" +
    "\uff73\040\uff73\041\uff73\042\uff73\043\uff73\045\uff73\050\uff73" +
    "\061\uff73\062\uff73\001\002\000\026\033\uff74\035\207\040" +
    "\uff74\041\uff74\042\uff74\043\uff74\045\212\050\uff74\061\uff74" +
    "\062\uff74\001\002\000\012\025\222\031\166\047\311\063" +
    "\224\001\002\000\020\033\uff0c\040\uff0c\041\uff0c\042\uff0c" +
    "\050\uff0c\061\uff0c\062\uff0c\001\002\000\024\007\176\025" +
    "\232\027\155\030\173\031\166\032\167\043\202\047\236" +
    "\063\200\001\002\000\020\033\uff76\040\uff76\041\uff76\042" +
    "\uff76\050\uff76\061\uff76\062\uff76\001\002\000\020\033\uff0d" +
    "\040\uff0d\041\uff0d\042\uff0d\050\uff0d\061\uff0d\062\uff0d\001" +
    "\002\000\012\025\uff0a\031\uff0a\047\uff0a\063\uff0a\001\002" +
    "\000\010\042\263\050\310\062\264\001\002\000\020\033" +
    "\uff0f\040\uff0f\041\uff0f\042\uff0f\050\uff0f\061\uff0f\062\uff0f" +
    "\001\002\000\020\033\uff10\040\uff10\041\uff10\042\uff10\050" +
    "\uff10\061\uff10\062\uff10\001\002\000\020\033\uff12\040\uff12" +
    "\041\uff12\042\uff12\050\uff12\061\uff12\062\uff12\001\002\000" +
    "\012\042\uff16\050\300\061\301\062\uff16\001\002\000\022" +
    "\033\uff76\035\uff6e\041\uff76\042\uff6e\043\uff6e\045\uff6e\050" +
    "\uff76\061\uff6e\001\002\000\026\033\uff13\035\207\040\uff13" +
    "\041\uff13\042\256\043\206\045\212\050\uff13\061\uff13\062" +
    "\uff13\001\002\000\004\050\277\001\002\000\020\033\uff11" +
    "\040\uff11\041\uff11\042\245\050\uff11\061\uff11\062\uff11\001" +
    "\002\000\024\007\176\025\232\027\155\030\173\031\166" +
    "\032\167\043\202\047\236\063\200\001\002\000\010\042" +
    "\263\050\265\062\264\001\002\000\006\050\262\061\uff0f" +
    "\001\002\000\010\042\uff67\050\255\061\uff67\001\002\000" +
    "\006\050\261\061\uff10\001\002\000\016\035\207\042\256" +
    "\043\206\045\212\050\211\061\uff13\001\002\000\010\042" +
    "\245\050\246\061\uff11\001\002\000\016\025\171\027\155" +
    "\030\173\032\167\043\202\047\251\001\002\000\020\033" +
    "\uff60\040\uff60\041\uff60\042\uff60\050\uff60\061\uff60\062\uff60" +
    "\001\002\000\020\033\uff6a\040\uff6a\041\uff6a\042\uff6a\050" +
    "\uff6a\061\uff6a\062\uff6a\001\002\000\012\035\207\042\256" +
    "\043\206\045\212\001\002\000\016\025\171\027\155\030" +
    "\173\032\167\043\202\047\251\001\002\000\004\042\245" +
    "\001\002\000\004\050\255\001\002\000\004\050\246\001" +
    "\002\000\020\033\uff62\040\uff62\041\uff62\042\uff62\050\uff62" +
    "\061\uff62\062\uff62\001\002\000\016\025\171\027\155\030" +
    "\173\032\167\043\202\047\251\001\002\000\020\033\uff6b" +
    "\040\uff6b\041\uff6b\042\uff6b\050\uff6b\061\uff6b\062\uff6b\001" +
    "\002\000\026\033\uff75\035\207\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\045\212\050\uff75\061\uff75\062\uff75\001\002\000" +
    "\020\033\uff5e\040\uff5e\041\uff5e\042\uff5e\050\uff5e\061\uff5e" +
    "\062\uff5e\001\002\000\020\033\uff5c\040\uff5c\041\uff5c\042" +
    "\uff5c\050\uff5c\061\uff5c\062\uff5c\001\002\000\006\027\155" +
    "\047\270\001\002\000\024\007\176\025\171\027\155\030" +
    "\173\031\166\032\167\043\202\047\175\063\200\001\002" +
    "\000\020\033\uff1b\040\uff1b\041\uff1b\042\uff1b\050\uff1b\061" +
    "\uff1b\062\uff1b\001\002\000\020\033\uff1a\040\uff1a\041\uff1a" +
    "\042\uff1a\050\uff1a\061\uff1a\062\uff1a\001\002\000\020\033" +
    "\uff6d\040\uff6d\041\uff6d\042\uff6d\050\uff6d\061\uff6d\062\uff6d" +
    "\001\002\000\006\027\155\047\270\001\002\000\024\007" +
    "\176\025\171\027\155\030\173\031\166\032\167\043\202" +
    "\047\175\063\200\001\002\000\020\033\uff68\040\uff68\041" +
    "\uff68\042\uff68\050\uff68\061\uff68\062\uff68\001\002\000\020" +
    "\033\uff64\040\uff64\041\uff64\042\uff64\050\uff64\061\uff64\062" +
    "\264\001\002\000\020\033\uff63\040\uff63\041\uff63\042\uff67" +
    "\050\uff63\061\uff67\062\uff63\001\002\000\026\033\uff66\035" +
    "\207\040\uff66\041\uff66\042\uff66\043\206\045\212\050\uff66" +
    "\061\uff66\062\uff66\001\002\000\020\033\uff65\040\uff65\041" +
    "\uff65\042\uff65\050\uff65\061\uff65\062\uff65\001\002\000\020" +
    "\033\uff77\040\uff77\041\uff77\042\uff77\050\uff77\061\uff77\062" +
    "\uff77\001\002\000\020\033\uff0e\040\uff0e\041\uff0e\042\uff0e" +
    "\050\uff0e\061\uff0e\062\uff0e\001\002\000\024\007\176\025" +
    "\171\027\155\030\173\031\166\032\167\043\202\047\175" +
    "\063\200\001\002\000\020\033\uff14\040\uff14\041\uff14\042" +
    "\uff14\050\uff14\061\306\062\uff14\001\002\000\006\042\263" +
    "\062\264\001\002\000\020\033\uff15\040\uff15\041\uff15\042" +
    "\uff16\050\uff15\061\301\062\uff16\001\002\000\020\033\uff17" +
    "\040\uff17\041\uff17\042\uff17\050\uff17\061\uff17\062\uff17\001" +
    "\002\000\024\007\176\025\171\027\155\030\173\031\166" +
    "\032\167\043\202\047\175\063\200\001\002\000\020\033" +
    "\uff18\040\uff18\041\uff18\042\uff18\050\uff18\061\uff18\062\uff18" +
    "\001\002\000\020\033\uff1c\040\uff1c\041\uff1c\042\uff1c\050" +
    "\uff1c\061\uff1c\062\uff1c\001\002\000\012\025\222\031\166" +
    "\047\311\063\200\001\002\000\004\050\300\001\002\000" +
    "\004\047\332\001\002\000\004\047\315\001\002\000\026" +
    "\007\176\025\171\027\155\030\173\031\166\032\167\043" +
    "\202\047\175\050\uff2a\063\200\001\002\000\006\041\uff28" +
    "\050\uff28\001\002\000\012\041\uff24\042\263\050\uff24\062" +
    "\264\001\002\000\010\041\uff22\050\uff22\061\uff0f\001\002" +
    "\000\010\041\uff23\050\uff23\061\uff10\001\002\000\010\041" +
    "\uff26\050\uff26\061\uff12\001\002\000\020\035\207\041\uff27" +
    "\042\256\043\206\045\212\050\uff27\061\uff13\001\002\000" +
    "\004\050\331\001\002\000\012\041\uff25\042\245\050\uff25" +
    "\061\uff11\001\002\000\006\041\327\050\uff2b\001\002\000" +
    "\024\007\176\025\171\027\155\030\173\031\166\032\167" +
    "\043\202\047\175\063\200\001\002\000\006\041\uff29\050" +
    "\uff29\001\002\000\020\033\uff5b\040\uff5b\041\uff5b\042\uff5b" +
    "\050\uff5b\061\uff5b\062\uff5b\001\002\000\004\050\333\001" +
    "\002\000\020\033\uff5d\040\uff5d\041\uff5d\042\uff5d\050\uff5d" +
    "\061\uff5d\062\uff5d\001\002\000\010\037\ufeeb\057\ufeeb\060" +
    "\ufeeb\001\002\000\010\037\ufeed\057\ufeed\060\ufeed\001\002" +
    "\000\010\037\ufeec\057\ufeec\060\ufeec\001\002\000\010\037" +
    "\ufee9\057\ufee9\060\ufee9\001\002\000\010\037\ufee8\057\ufee8" +
    "\060\ufee8\001\002\000\010\037\ufeea\057\ufeea\060\ufeea\001" +
    "\002\000\064\006\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\024\uff8b\025\uff8b\037\uff8b\042\uff8b\043\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\056\uff8b\057\uff8b\060" +
    "\uff8b\001\002\000\010\037\ufef9\057\ufef9\060\ufef9\001\002" +
    "\000\010\037\ufef5\057\ufef5\060\ufef5\001\002\000\004\047" +
    "\346\001\002\000\024\007\176\025\232\027\155\030\173" +
    "\031\166\032\167\043\202\047\236\063\200\001\002\000" +
    "\010\042\263\050\353\062\264\001\002\000\004\050\351" +
    "\001\002\000\004\033\352\001\002\000\064\006\uff49\010" +
    "\uff49\011\uff49\012\uff49\013\uff49\014\uff49\015\uff49\016\uff49" +
    "\017\uff49\020\uff49\021\uff49\022\uff49\023\uff49\024\uff49\025" +
    "\uff49\037\uff49\042\uff49\043\uff49\051\uff49\052\uff49\053\uff49" +
    "\054\uff49\056\uff49\057\uff49\060\uff49\001\002\000\004\033" +
    "\354\001\002\000\064\006\uff4a\010\uff4a\011\uff4a\012\uff4a" +
    "\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a\021" +
    "\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\037\uff4a\042\uff4a" +
    "\043\uff4a\051\uff4a\052\uff4a\053\uff4a\054\uff4a\056\uff4a\057" +
    "\uff4a\060\uff4a\001\002\000\006\033\uffc8\041\uffc8\001\002" +
    "\000\006\033\uffe4\041\366\001\002\000\010\033\uffc5\041" +
    "\uffc5\046\360\001\002\000\010\007\361\025\222\047\362" +
    "\001\002\000\004\024\314\001\002\000\010\007\361\025" +
    "\222\047\362\001\002\000\006\033\uffc7\041\uffc7\001\002" +
    "\000\006\033\uffc6\041\uffc6\001\002\000\004\050\262\001" +
    "\002\000\004\025\357\001\002\000\006\033\uffc9\041\uffc9" +
    "\001\002\000\006\033\uffdd\041\uffdd\001\002\000\006\033" +
    "\uffe8\041\376\001\002\000\010\033\uffda\041\uffda\046\373" +
    "\001\002\000\024\007\176\025\232\027\155\030\173\031" +
    "\166\032\167\043\202\047\236\063\200\001\002\000\010" +
    "\033\uffdb\041\uffdb\061\uff12\001\002\000\006\033\uffdc\041" +
    "\uffdc\001\002\000\004\025\372\001\002\000\006\033\uffde" +
    "\041\uffde\001\002\000\034\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\026\uffb5\037\uffb5\001\002\000\064\006\uff83\010" +
    "\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025" +
    "\uff83\037\uff83\042\uff83\043\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\056\uff83\057\uff83\060\uff83\001\002\000\024\007" +
    "\176\025\232\027\155\030\173\031\166\032\167\043\202" +
    "\047\236\063\200\001\002\000\010\042\263\050\u0107\062" +
    "\264\001\002\000\004\050\u0105\001\002\000\004\036\135" +
    "\001\002\000\064\006\uff4b\010\uff4b\011\uff4b\012\uff4b\013" +
    "\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b\021\uff4b" +
    "\022\uff4b\023\uff4b\024\uff4b\025\uff4b\037\uff4b\042\uff4b\043" +
    "\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b\056\uff4b\057\uff4b" +
    "\060\uff4b\001\002\000\004\036\135\001\002\000\064\006" +
    "\uff4c\010\uff4c\011\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c" +
    "\016\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024" +
    "\uff4c\025\uff4c\037\uff4c\042\uff4c\043\uff4c\051\uff4c\052\uff4c" +
    "\053\uff4c\054\uff4c\056\uff4c\057\uff4c\060\uff4c\001\002\000" +
    "\024\007\176\025\171\027\155\030\173\031\166\032\167" +
    "\043\202\047\175\063\200\001\002\000\004\050\u010e\001" +
    "\002\000\010\040\ufefe\050\ufefe\061\uff12\001\002\000\020" +
    "\035\207\040\ufefd\042\256\043\206\045\212\050\ufefd\061" +
    "\uff13\001\002\000\012\040\ufefc\042\245\050\ufefc\061\uff11" +
    "\001\002\000\004\036\u010f\001\002\000\010\037\ufeff\057" +
    "\u0115\060\u0110\001\002\000\004\040\u011c\001\002\000\004" +
    "\037\uff06\001\002\000\004\037\u011b\001\002\000\010\037" +
    "\uff04\057\uff04\060\uff04\001\002\000\010\037\ufeff\057\u0115" +
    "\060\u0110\001\002\000\024\007\176\025\171\027\155\030" +
    "\173\031\166\032\167\043\202\047\175\063\200\001\002" +
    "\000\004\040\u0117\001\002\000\066\003\114\006\110\010" +
    "\144\011\145\012\005\013\007\014\013\015\015\016\075" +
    "\017\073\020\124\021\067\022\112\023\103\024\125\025" +
    "\070\037\uff02\042\131\043\074\051\076\052\117\053\130" +
    "\054\107\056\115\057\uff02\060\uff02\001\002\000\010\037" +
    "\uff03\057\uff03\060\uff03\001\002\000\004\037\uff07\001\002" +
    "\000\010\037\uff05\057\uff05\060\uff05\001\002\000\064\006" +
    "\uff08\010\uff08\011\uff08\012\uff08\013\uff08\014\uff08\015\uff08" +
    "\016\uff08\017\uff08\020\uff08\021\uff08\022\uff08\023\uff08\024" +
    "\uff08\025\uff08\037\uff08\042\uff08\043\uff08\051\uff08\052\uff08" +
    "\053\uff08\054\uff08\056\uff08\057\uff08\060\uff08\001\002\000" +
    "\062\003\114\006\110\010\144\011\145\012\005\013\007" +
    "\014\013\015\015\016\075\017\073\020\124\021\067\022" +
    "\112\023\103\024\125\025\070\037\uff00\042\131\043\074" +
    "\051\076\052\117\053\130\054\107\056\115\001\002\000" +
    "\004\037\uff01\001\002\000\004\033\334\001\002\000\014" +
    "\033\335\035\207\042\210\043\206\045\212\001\002\000" +
    "\014\025\171\030\173\032\167\043\202\047\u0120\001\002" +
    "\000\006\033\uffd3\041\uffd3\001\002\000\006\033\uffe6\041" +
    "\u0127\001\002\000\010\033\uffd0\041\uffd0\046\u0124\001\002" +
    "\000\024\007\176\025\232\027\155\030\173\031\166\032" +
    "\167\043\202\047\236\063\200\001\002\000\012\033\uffd1" +
    "\041\uffd1\042\263\062\264\001\002\000\006\033\uffd2\041" +
    "\uffd2\001\002\000\004\025\u0123\001\002\000\006\033\uffd4" +
    "\041\uffd4\001\002\000\004\025\u012c\001\002\000\004\033" +
    "\u014b\001\002\000\004\046\u0136\001\002\000\012\033\uff2f" +
    "\034\u012d\046\uff2f\047\u012e\001\002\000\004\025\u012c\001" +
    "\002\000\026\007\176\025\171\027\155\030\173\031\166" +
    "\032\167\043\202\047\175\050\uff2a\063\200\001\002\000" +
    "\004\050\u0130\001\002\000\006\033\uff2c\034\u0131\001\002" +
    "\000\004\025\u012c\001\002\000\004\033\uff2d\001\002\000" +
    "\006\033\uff30\046\uff30\001\002\000\004\033\uff2e\001\002" +
    "\000\006\033\uff31\046\uff31\001\002\000\026\006\u013c\007" +
    "\176\025\u013d\027\155\030\173\031\166\032\167\043\202" +
    "\047\175\063\200\001\002\000\004\033\u014a\001\002\000" +
    "\010\033\uff7d\042\263\062\264\001\002\000\006\033\uff7b" +
    "\061\uff0f\001\002\000\006\033\uff7c\061\uff10\001\002\000" +
    "\006\033\uff7f\061\uff12\001\002\000\004\034\u0147\001\002" +
    "\000\022\033\uff6e\034\u0141\035\uff6e\042\uff6e\043\uff6e\045" +
    "\uff6e\047\u0142\061\uff6e\001\002\000\016\033\uff80\035\207" +
    "\042\256\043\206\045\212\061\uff13\001\002\000\010\033" +
    "\uff7e\042\245\061\uff11\001\002\000\004\033\uff79\001\002" +
    "\000\004\025\u0146\001\002\000\026\007\176\025\171\027" +
    "\155\030\173\031\166\032\167\043\202\047\175\050\uff2a" +
    "\063\200\001\002\000\004\050\u0144\001\002\000\006\033" +
    "\uff2c\034\u0145\001\002\000\004\025\u0146\001\002\000\006" +
    "\034\u0141\047\u0142\001\002\000\004\025\u012c\001\002\000" +
    "\004\033\uff78\001\002\000\004\033\uff7a\001\002\000\104" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\037\uff81\042\uff81\043\uff81\047\uff81\051\uff81" +
    "\052\uff81\053\uff81\054\uff81\056\uff81\057\uff81\060\uff81\063" +
    "\uff81\001\002\000\064\006\uff32\010\uff32\011\uff32\012\uff32" +
    "\013\uff32\014\uff32\015\uff32\016\uff32\017\uff32\020\uff32\021" +
    "\uff32\022\uff32\023\uff32\024\uff32\025\uff32\037\uff32\042\uff32" +
    "\043\uff32\051\uff32\052\uff32\053\uff32\054\uff32\056\uff32\057" +
    "\uff32\060\uff32\001\002\000\024\007\176\025\232\027\155" +
    "\030\173\031\166\032\167\043\202\047\236\063\200\001" +
    "\002\000\010\042\263\050\u0151\062\264\001\002\000\004" +
    "\050\u014f\001\002\000\004\036\135\001\002\000\066\006" +
    "\uff1d\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\015\uff1d" +
    "\016\uff1d\017\uff1d\020\uff1d\021\uff1d\022\uff1d\023\uff1d\024" +
    "\uff1d\025\uff1d\037\uff1d\042\uff1d\043\uff1d\051\uff1d\052\uff1d" +
    "\053\uff1d\054\uff1d\055\uff1d\056\uff1d\057\uff1d\060\uff1d\001" +
    "\002\000\004\036\135\001\002\000\066\006\uff1e\010\uff1e" +
    "\011\uff1e\012\uff1e\013\uff1e\014\uff1e\015\uff1e\016\uff1e\017" +
    "\uff1e\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\025\uff1e" +
    "\037\uff1e\042\uff1e\043\uff1e\051\uff1e\052\uff1e\053\uff1e\054" +
    "\uff1e\055\uff1e\056\uff1e\057\uff1e\060\uff1e\001\002\000\006" +
    "\033\uffce\041\uffce\001\002\000\006\033\uffe5\041\u015c\001" +
    "\002\000\010\033\uffca\041\uffca\046\u0156\001\002\000\010" +
    "\007\176\025\222\047\u0159\001\002\000\006\033\uffcc\041" +
    "\uffcc\001\002\000\006\033\uffcd\041\uffcd\001\002\000\010" +
    "\007\176\025\222\047\u0159\001\002\000\006\033\uffcb\041" +
    "\uffcb\001\002\000\004\050\261\001\002\000\004\025\u0155" +
    "\001\002\000\006\033\uffcf\041\uffcf\001\002\000\004\036" +
    "\135\001\002\000\064\006\uff20\010\uff20\011\uff20\012\uff20" +
    "\013\uff20\014\uff20\015\uff20\016\uff20\017\uff20\020\uff20\021" +
    "\uff20\022\uff20\023\uff20\024\uff20\025\uff20\037\uff20\042\uff20" +
    "\043\uff20\051\uff20\052\uff20\053\uff20\054\uff20\056\uff20\057" +
    "\uff20\060\uff20\001\002\000\064\006\uff33\010\uff33\011\uff33" +
    "\012\uff33\013\uff33\014\uff33\015\uff33\016\uff33\017\uff33\020" +
    "\uff33\021\uff33\022\uff33\023\uff33\024\uff33\025\uff33\037\uff33" +
    "\042\uff33\043\uff33\051\uff33\052\uff33\053\uff33\054\uff33\056" +
    "\uff33\057\uff33\060\uff33\001\002\000\004\037\u0164\001\002" +
    "\000\004\037\u0163\001\002\000\034\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\026\uffb6\037\uffb6\001\002\000\034\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\037\uffb4\001" +
    "\002\000\004\033\u0166\001\002\000\066\006\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\037\uffec\042\uffec\043\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\056\uffec\057\uffec\060\uffec\001\002\000\026" +
    "\006\u0172\016\u0168\017\u016f\020\u016d\021\u0174\022\u016b\023" +
    "\u016a\024\u0171\025\u0173\033\u0169\001\002\000\004\025\u01bc" +
    "\001\002\000\026\007\uff45\025\uff45\027\uff45\030\uff45\031" +
    "\uff45\032\uff45\033\uff45\043\uff45\047\uff45\063\uff45\001\002" +
    "\000\004\025\u01b4\001\002\000\004\025\u01ae\001\002\000" +
    "\026\007\uff47\025\uff47\027\uff47\030\uff47\031\uff47\032\uff47" +
    "\033\uff47\043\uff47\047\uff47\063\uff47\001\002\000\004\025" +
    "\u01a8\001\002\000\026\007\uff46\025\uff46\027\uff46\030\uff46" +
    "\031\uff46\032\uff46\033\uff46\043\uff46\047\uff46\063\uff46\001" +
    "\002\000\004\025\u01a4\001\002\000\026\007\176\025\232" +
    "\027\155\030\173\031\166\032\167\033\u018b\043\202\047" +
    "\236\063\200\001\002\000\004\025\u0182\001\002\000\004" +
    "\034\u0181\001\002\000\010\034\u017c\046\uff2f\047\u017d\001" +
    "\002\000\004\025\u0175\001\002\000\004\046\u0176\001\002" +
    "\000\010\025\222\032\167\047\u0178\001\002\000\004\033" +
    "\u017b\001\002\000\010\025\222\032\167\047\u0178\001\002" +
    "\000\004\033\u017a\001\002\000\026\007\uff3f\025\uff3f\027" +
    "\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f\043\uff3f\047\uff3f" +
    "\063\uff3f\001\002\000\026\007\uff40\025\uff40\027\uff40\030" +
    "\uff40\031\uff40\032\uff40\033\uff40\043\uff40\047\uff40\063\uff40" +
    "\001\002\000\004\025\u0173\001\002\000\026\007\176\025" +
    "\171\027\155\030\173\031\166\032\167\043\202\047\175" +
    "\050\uff2a\063\200\001\002\000\004\050\u017f\001\002\000" +
    "\004\034\u0180\001\002\000\004\025\u0173\001\002\000\004" +
    "\025\u0173\001\002\000\004\046\u0183\001\002\000\010\007" +
    "\361\025\222\047\362\001\002\000\004\033\u0187\001\002" +
    "\000\004\033\u0186\001\002\000\026\007\uff3a\025\uff3a\027" +
    "\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a\043\uff3a\047\uff3a" +
    "\063\uff3a\001\002\000\026\007\uff39\025\uff39\027\uff39\030" +
    "\uff39\031\uff39\032\uff39\033\uff39\043\uff39\047\uff39\063\uff39" +
    "\001\002\000\010\033\u01a3\042\263\062\264\001\002\000" +
    "\012\025\u018f\042\131\043\074\050\uff34\001\002\000\004" +
    "\033\u018c\001\002\000\012\025\uff36\042\uff36\043\uff36\050" +
    "\uff36\001\002\000\012\025\uff37\042\uff37\043\uff37\050\uff37" +
    "\001\002\000\004\050\uff35\001\002\000\004\050\u01a1\001" +
    "\002\000\012\035\u0191\042\u0193\043\u0190\045\u0195\001\002" +
    "\000\006\043\u019e\046\u019f\001\002\000\004\046\u019c\001" +
    "\002\000\006\033\uff53\050\uff53\001\002\000\006\042\u0198" +
    "\046\u0199\001\002\000\006\033\uff54\050\uff54\001\002\000" +
    "\004\046\u0196\001\002\000\012\025\171\030\173\043\202" +
    "\047\204\001\002\000\016\033\uff50\035\207\042\210\043" +
    "\206\045\212\050\uff50\001\002\000\006\033\uff58\050\uff58" +
    "\001\002\000\024\007\176\025\171\027\155\030\173\031" +
    "\166\032\167\043\202\047\175\063\200\001\002\000\010" +
    "\033\uff4e\050\uff4e\061\uff12\001\002\000\020\033\uff4f\035" +
    "\207\042\256\043\206\045\212\050\uff4f\061\uff13\001\002" +
    "\000\012\025\171\030\173\043\202\047\204\001\002\000" +
    "\016\033\uff51\035\207\042\210\043\206\045\212\050\uff51" +
    "\001\002\000\006\033\uff57\050\uff57\001\002\000\012\025" +
    "\171\030\173\043\202\047\204\001\002\000\016\033\uff52" +
    "\035\207\042\210\043\206\045\212\050\uff52\001\002\000" +
    "\004\036\135\001\002\000\064\006\uff48\010\uff48\011\uff48" +
    "\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020" +
    "\uff48\021\uff48\022\uff48\023\uff48\024\uff48\025\uff48\037\uff48" +
    "\042\uff48\043\uff48\051\uff48\052\uff48\053\uff48\054\uff48\056" +
    "\uff48\057\uff48\060\uff48\001\002\000\012\025\uff38\042\uff38" +
    "\043\uff38\050\uff38\001\002\000\004\046\u01a5\001\002\000" +
    "\012\025\171\030\173\043\202\047\204\001\002\000\014" +
    "\033\u01a7\035\207\042\210\043\206\045\212\001\002\000" +
    "\026\007\uff43\025\uff43\027\uff43\030\uff43\031\uff43\032\uff43" +
    "\033\uff43\043\uff43\047\uff43\063\uff43\001\002\000\004\046" +
    "\u01a9\001\002\000\024\007\176\025\232\027\155\030\173" +
    "\031\166\032\167\043\202\047\236\063\200\001\002\000" +
    "\006\033\u01ad\061\uff12\001\002\000\004\033\u01ac\001\002" +
    "\000\026\007\uff41\025\uff41\027\uff41\030\uff41\031\uff41\032" +
    "\uff41\033\uff41\043\uff41\047\uff41\063\uff41\001\002\000\026" +
    "\007\uff42\025\uff42\027\uff42\030\uff42\031\uff42\032\uff42\033" +
    "\uff42\043\uff42\047\uff42\063\uff42\001\002\000\004\046\u01af" +
    "\001\002\000\024\007\176\025\232\027\155\030\173\031" +
    "\166\032\167\043\202\047\236\063\200\001\002\000\010" +
    "\033\u01b3\042\263\062\264\001\002\000\004\033\u01b2\001" +
    "\002\000\026\007\uff3d\025\uff3d\027\uff3d\030\uff3d\031\uff3d" +
    "\032\uff3d\033\uff3d\043\uff3d\047\uff3d\063\uff3d\001\002\000" +
    "\026\007\uff3e\025\uff3e\027\uff3e\030\uff3e\031\uff3e\032\uff3e" +
    "\033\uff3e\043\uff3e\047\uff3e\063\uff3e\001\002\000\004\046" +
    "\u01b5\001\002\000\010\007\u01b6\025\222\047\u01b9\001\002" +
    "\000\004\023\313\001\002\000\004\033\u01bb\001\002\000" +
    "\004\033\u01ba\001\002\000\010\007\u01b6\025\222\047\u01b9" +
    "\001\002\000\026\007\uff3b\025\uff3b\027\uff3b\030\uff3b\031" +
    "\uff3b\032\uff3b\033\uff3b\043\uff3b\047\uff3b\063\uff3b\001\002" +
    "\000\026\007\uff3c\025\uff3c\027\uff3c\030\uff3c\031\uff3c\032" +
    "\uff3c\033\uff3c\043\uff3c\047\uff3c\063\uff3c\001\002\000\004" +
    "\046\u01bd\001\002\000\012\025\171\030\173\043\202\047" +
    "\204\001\002\000\014\033\u01bf\035\207\042\210\043\206" +
    "\045\212\001\002\000\026\007\uff44\025\uff44\027\uff44\030" +
    "\uff44\031\uff44\032\uff44\033\uff44\043\uff44\047\uff44\063\uff44" +
    "\001\002\000\006\033\uffea\041\u01c2\001\002\000\010\033" +
    "\uffdf\041\uffdf\046\045\001\002\000\004\025\u01c1\001\002" +
    "\000\006\033\uffe3\041\uffe3\001\002\000\004\025\u01c5\001" +
    "\002\000\006\033\uff55\050\uff55\001\002\000\034\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\037\uffb3\001\002" +
    "\000\006\033\uffd8\041\uffd8\001\002\000\006\033\uffe7\041" +
    "\u01cd\001\002\000\010\033\uffd5\041\uffd5\046\u01ca\001\002" +
    "\000\010\025\222\032\167\047\u0178\001\002\000\006\033" +
    "\uffd6\041\uffd6\001\002\000\006\033\uffd7\041\uffd7\001\002" +
    "\000\004\025\u01c9\001\002\000\006\033\uffd9\041\uffd9\001" +
    "\002\000\026\006\u013c\007\176\025\u013d\027\155\030\173" +
    "\031\166\032\167\043\202\047\175\063\200\001\002\000" +
    "\004\033\u01d1\001\002\000\104\006\uff82\007\uff82\010\uff82" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82" +
    "\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\037\uff82\042" +
    "\uff82\043\uff82\047\uff82\051\uff82\052\uff82\053\uff82\054\uff82" +
    "\056\uff82\057\uff82\060\uff82\063\uff82\001\002\000\006\041" +
    "\uff96\050\uff96\001\002\000\006\033\uffe0\041\uffe0\001\002" +
    "\000\016\033\uffe1\035\207\041\uffe1\042\210\043\206\045" +
    "\212\001\002\000\004\047\u01d7\001\002\000\034\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\037\uffc0\001\002" +
    "\000\024\016\047\017\054\020\053\021\060\022\051\023" +
    "\050\024\055\041\uff94\050\uff94\001\002\000\006\041\062" +
    "\050\u01d9\001\002\000\004\036\u01da\001\002\000\060\003" +
    "\114\006\110\010\u01dd\012\005\013\007\014\013\015\015" +
    "\016\075\017\073\020\124\021\067\022\112\023\103\024" +
    "\125\025\070\037\u01db\042\131\043\074\051\076\052\117" +
    "\053\130\054\107\056\115\001\002\000\034\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\026\uff97\037\uff97\001\002\000" +
    "\056\006\110\010\u01e1\012\005\013\007\014\013\015\015" +
    "\016\075\017\073\020\124\021\067\022\112\023\103\024" +
    "\125\025\070\037\u01e0\042\131\043\074\051\076\052\117" +
    "\053\130\054\107\056\115\001\002\000\004\033\u01de\001" +
    "\002\000\004\037\u01df\001\002\000\034\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\026\uff98\037\uff98\001\002\000\034" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\026\uff99\037\uff99" +
    "\001\002\000\004\033\u01e2\001\002\000\004\037\u01e3\001" +
    "\002\000\034\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\026" +
    "\uff9a\037\uff9a\001\002\000\034\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\026\uffc4\037\uffc4\001\002\000\034\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\037\ufff0\001\002" +
    "\000\004\002\ufff2\001\002\000\012\033\uffda\041\uffda\046" +
    "\373\047\u01e8\001\002\000\024\016\047\017\054\020\053" +
    "\021\060\022\051\023\050\024\055\041\uff94\050\uff94\001" +
    "\002\000\006\041\062\050\u01ea\001\002\000\004\036\u01ec" +
    "\001\002\000\034\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\026\uffbb\037\uffbb\001\002\000\056\003\114\006\110\010" +
    "\u01ef\012\005\013\007\014\013\015\015\016\075\017\073" +
    "\020\124\021\067\022\112\023\103\024\125\025\070\042" +
    "\131\043\074\051\076\052\117\053\130\054\107\056\115" +
    "\001\002\000\054\006\110\010\u01ef\012\005\013\007\014" +
    "\013\015\015\016\075\017\073\020\124\021\067\022\112" +
    "\023\103\024\125\025\070\042\131\043\074\051\076\052" +
    "\117\053\130\054\107\056\115\001\002\000\004\037\u01f4" +
    "\001\002\000\024\007\176\025\232\027\155\030\173\031" +
    "\166\032\167\043\202\047\236\063\200\001\002\000\004" +
    "\037\u01f1\001\002\000\034\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\026\uffaf\037\uffaf\001\002\000\004\033\u01f3\001" +
    "\002\000\004\037\ufeee\001\002\000\034\012\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\026\uffb1\037\uffb1\001\002\000\004" +
    "\037\u01f8\001\002\000\004\037\u01f7\001\002\000\034\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\037\uffb0\001" +
    "\002\000\034\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026" +
    "\uffb2\037\uffb2\001\002\000\012\033\uffd0\041\uffd0\046\u0124" +
    "\047\u01fa\001\002\000\024\016\047\017\054\020\053\021" +
    "\060\022\051\023\050\024\055\041\uff94\050\uff94\001\002" +
    "\000\006\041\062\050\u01fc\001\002\000\004\036\u01fe\001" +
    "\002\000\034\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026" +
    "\uffb9\037\uffb9\001\002\000\056\003\114\006\110\010\u0201" +
    "\012\005\013\007\014\013\015\015\016\075\017\073\020" +
    "\124\021\067\022\112\023\103\024\125\025\070\042\131" +
    "\043\074\051\076\052\117\053\130\054\107\056\115\001" +
    "\002\000\054\006\110\010\u0201\012\005\013\007\014\013" +
    "\015\015\016\075\017\073\020\124\021\067\022\112\023" +
    "\103\024\125\025\070\042\131\043\074\051\076\052\117" +
    "\053\130\054\107\056\115\001\002\000\004\037\u0204\001" +
    "\002\000\024\007\176\025\232\027\155\030\173\031\166" +
    "\032\167\043\202\047\236\063\200\001\002\000\004\037" +
    "\u0203\001\002\000\034\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\026\uffa7\037\uffa7\001\002\000\034\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\026\uffa9\037\uffa9\001\002\000\004" +
    "\037\u0208\001\002\000\004\037\u0207\001\002\000\034\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\037\uffa8\001" +
    "\002\000\034\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026" +
    "\uffaa\037\uffaa\001\002\000\012\033\uffca\041\uffca\046\u0156" +
    "\047\u020a\001\002\000\024\016\047\017\054\020\053\021" +
    "\060\022\051\023\050\024\055\041\uff94\050\uff94\001\002" +
    "\000\006\041\062\050\u020c\001\002\000\004\036\u020e\001" +
    "\002\000\034\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026" +
    "\uffb8\037\uffb8\001\002\000\056\003\114\006\110\010\u0212" +
    "\012\005\013\007\014\013\015\015\016\075\017\073\020" +
    "\124\021\067\022\112\023\103\024\125\025\070\042\131" +
    "\043\074\051\076\052\117\053\130\054\107\056\115\001" +
    "\002\000\004\037\u0220\001\002\000\054\006\110\010\u0212" +
    "\012\005\013\007\014\013\015\015\016\075\017\073\020" +
    "\124\021\067\022\112\023\103\024\125\025\070\042\131" +
    "\043\074\051\076\052\117\053\130\054\107\056\115\001" +
    "\002\000\004\037\u0217\001\002\000\024\007\176\025\232" +
    "\027\155\030\173\031\166\032\167\043\202\047\236\063" +
    "\200\001\002\000\004\037\u0216\001\002\000\004\037\u0215" +
    "\001\002\000\034\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\026\uffa1\037\uffa1\001\002\000\034\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\026\uff9f\037\uff9f\001\002\000\034\012" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\037\uffa5\001" +
    "\002\000\004\037\u021f\001\002\000\004\037\u021e\001\002" +
    "\000\004\037\u021d\001\002\000\004\037\u021c\001\002\000" +
    "\034\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0\037" +
    "\uffa0\001\002\000\034\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\026\uffa2\037\uffa2\001\002\000\034\012\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\026\uffa6\037\uffa6\001\002\000\034" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\037\uffa4" +
    "\001\002\000\034\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\026\uffa3\037\uffa3\001\002\000\024\016\047\017\054\020" +
    "\053\021\060\022\051\023\050\024\055\041\uff94\050\uff94" +
    "\001\002\000\012\033\uffc5\041\uffc5\046\360\047\u0223\001" +
    "\002\000\024\016\047\017\054\020\053\021\060\022\051" +
    "\023\050\024\055\041\uff94\050\uff94\001\002\000\006\041" +
    "\062\050\u0225\001\002\000\004\036\u0227\001\002\000\034" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\037\uffb7" +
    "\001\002\000\056\003\114\006\110\010\u022a\012\005\013" +
    "\007\014\013\015\015\016\075\017\073\020\124\021\067" +
    "\022\112\023\103\024\125\025\070\042\131\043\074\051" +
    "\076\052\117\053\130\054\107\056\115\001\002\000\054" +
    "\006\110\010\u022a\012\005\013\007\014\013\015\015\016" +
    "\075\017\073\020\124\021\067\022\112\023\103\024\125" +
    "\025\070\042\131\043\074\051\076\052\117\053\130\054" +
    "\107\056\115\001\002\000\004\037\u022e\001\002\000\010" +
    "\007\361\025\222\047\362\001\002\000\004\037\u022c\001" +
    "\002\000\034\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\026" +
    "\uff9b\037\uff9b\001\002\000\004\033\340\001\002\000\034" +
    "\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d\037\uff9d" +
    "\001\002\000\004\037\u0232\001\002\000\004\037\u0231\001" +
    "\002\000\034\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026" +
    "\uff9c\037\uff9c\001\002\000\034\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\026\uff9e\037\uff9e\001\002\000\006\041\062" +
    "\050\u0234\001\002\000\004\036\u0236\001\002\000\034\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\037\uffc2\001" +
    "\002\000\056\003\114\006\110\012\005\013\007\014\013" +
    "\015\015\016\075\017\073\020\124\021\067\022\112\023" +
    "\103\024\125\025\070\037\u0237\042\131\043\074\051\076" +
    "\052\117\053\130\054\107\056\115\001\002\000\034\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\037\uffbe\001" +
    "\002\000\054\006\110\012\005\013\007\014\013\015\015" +
    "\016\075\017\073\020\124\021\067\022\112\023\103\024" +
    "\125\025\070\037\u0239\042\131\043\074\051\076\052\117" +
    "\053\130\054\107\056\115\001\002\000\034\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\026\uffbf\037\uffbf\001\002\000" +
    "\012\033\uffd5\041\uffd5\046\u01ca\047\u023b\001\002\000\024" +
    "\016\047\017\054\020\053\021\060\022\051\023\050\024" +
    "\055\041\uff94\050\uff94\001\002\000\006\041\062\050\u023d" +
    "\001\002\000\004\036\u023f\001\002\000\034\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\026\uffba\037\uffba\001\002\000" +
    "\056\003\114\006\110\010\u0243\012\005\013\007\014\013" +
    "\015\015\016\075\017\073\020\124\021\067\022\112\023" +
    "\103\024\125\025\070\042\131\043\074\051\076\052\117" +
    "\053\130\054\107\056\115\001\002\000\004\037\u0249\001" +
    "\002\000\054\006\110\010\u0243\012\005\013\007\014\013" +
    "\015\015\016\075\017\073\020\124\021\067\022\112\023" +
    "\103\024\125\025\070\042\131\043\074\051\076\052\117" +
    "\053\130\054\107\056\115\001\002\000\004\037\u0244\001" +
    "\002\000\010\025\222\032\167\047\u0178\001\002\000\034" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026\uffad\037\uffad" +
    "\001\002\000\004\037\u0248\001\002\000\004\037\u0247\001" +
    "\002\000\034\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026" +
    "\uffae\037\uffae\001\002\000\034\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\026\uffac\037\uffac\001\002\000\034\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\026\uffab\037\uffab\001\002" +
    "\000\012\033\uffdf\041\uffdf\046\045\047\u024b\001\002\000" +
    "\024\016\047\017\054\020\053\021\060\022\051\023\050" +
    "\024\055\041\uff94\050\uff94\001\002\000\006\041\062\050" +
    "\u024d\001\002\000\004\036\065\001\002\000\034\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\037\uffbd\001\002" +
    "\000\066\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\037\uffeb\042\uffeb\043" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\001\002\000\004\002\ufff8\001\002\000\004\033" +
    "\u0259\001\002\000\006\033\ufffb\034\u0256\001\002\000\004" +
    "\034\u0254\001\002\000\004\025\u0255\001\002\000\006\033" +
    "\ufff9\034\ufff9\001\002\000\006\025\u0258\035\u0257\001\002" +
    "\000\004\033\ufffc\001\002\000\006\033\ufffa\034\ufffa\001" +
    "\002\000\016\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\001\002\000\004\002\001\001\002\000\004\025" +
    "\u0253\001\002\000\004\002\000\001\002\000\004\033\u025e" +
    "\001\002\000\016\004\ufffe\005\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u025c\000\014\002\005\003\003\006\010\007\013\010" +
    "\011\001\001\000\010\006\010\007\u025b\010\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\u0250\005\u0251\001\001\000\004\010\u024f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\033\011\032\012\025\013\024\014\020\031\035\032" +
    "\021\034\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u01bf\016\041\001\001\000\006\021\u01c7\022" +
    "\u01c6\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\355\030\354\001\001\000\006\025\u0153\026\u0152\001" +
    "\001\000\006\023\u0121\024\u0120\001\001\000\006\017\370" +
    "\020\367\001\001\000\020\006\033\012\u01e4\013\024\014" +
    "\020\031\035\032\021\034\036\001\001\000\010\014\u0164" +
    "\032\u01e3\034\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\042" +
    "\016\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\054\u01d3\062\u01d2\001\001\000\010" +
    "\044\055\045\051\046\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u01d1\046\056\001\001\000\004\035\063\001" +
    "\001\000\002\001\001\000\050\006\076\013\103\014\020" +
    "\047\077\050\110\051\125\066\120\067\115\070\104\073" +
    "\071\074\117\101\122\102\065\103\100\107\126\110\101" +
    "\111\105\131\121\133\070\001\001\000\002\001\001\000" +
    "\006\021\u01c7\022\u01c6\001\001\000\006\071\u0193\072\u0191" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\042\016\041\001\001\000\002\001\001\000\006\015\u01bf" +
    "\016\041\001\001\000\002\001\001\000\004\014\u0164\001" +
    "\001\000\046\006\076\013\103\014\020\050\341\051\125" +
    "\066\120\067\115\070\104\073\071\074\117\101\122\102" +
    "\065\103\100\107\126\110\101\111\105\131\u0161\133\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\u0153\026\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u0121\024\u0120\001\001\000\006" +
    "\054\u011e\062\u011d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\370\020\367\001\001\000\006\027\355\030\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\124" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\006\076\013\103\014" +
    "\020\047\142\050\110\051\125\066\120\067\115\070\104" +
    "\073\071\074\117\101\122\102\065\103\100\107\126\110" +
    "\101\111\105\125\150\126\152\127\141\131\147\132\145" +
    "\133\135\134\151\135\136\136\146\137\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\006\076\013\103\014" +
    "\020\050\341\051\125\066\120\067\115\070\104\073\071" +
    "\074\117\101\122\102\065\103\100\107\126\110\101\111" +
    "\105\126\342\127\141\131\147\132\145\133\135\134\151" +
    "\135\136\136\146\137\137\001\001\000\034\054\171\055" +
    "\164\056\167\057\176\061\161\062\173\063\156\064\162" +
    "\065\160\117\157\121\163\122\155\123\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\054\242\055\227\056\167\057" +
    "\176\061\240\062\243\063\236\064\241\065\237\117\157" +
    "\121\230\122\155\123\200\001\001\000\002\001\001\000" +
    "\004\060\271\001\001\000\002\001\001\000\010\053\217" +
    "\121\222\123\216\001\001\000\004\054\202\001\001\000" +
    "\002\001\001\000\004\054\204\001\001\000\002\001\001" +
    "\000\004\054\215\001\001\000\004\054\214\001\001\000" +
    "\004\054\213\001\001\000\002\001\001\000\004\054\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\053\217\121\222\123\216" +
    "\001\001\000\002\001\001\000\036\053\233\054\232\055" +
    "\227\056\167\057\176\061\161\062\234\063\224\064\226" +
    "\065\225\117\157\121\230\122\155\123\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\053\233\054" +
    "\242\055\227\056\167\057\176\061\240\062\243\063\236" +
    "\064\241\065\237\117\157\121\230\122\155\123\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\054\247\056\246\057\176\061\161\062\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\204\061\252\062\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\054\257\056\256\057\176\061\161\062\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\057\266\061\161\001\001\000\034" +
    "\054\232\055\227\056\167\057\176\061\161\062\234\063" +
    "\265\064\226\065\225\117\157\121\163\122\155\123\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\271\001\001\000\004\061\252\001\001\000\034\054\274" +
    "\055\227\056\167\057\176\061\273\062\275\063\272\064" +
    "\226\065\225\117\157\121\163\122\155\123\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\054\232\055\227\056\167\057\176\061" +
    "\161\062\234\063\302\064\226\065\225\117\157\120\304" +
    "\121\303\122\301\123\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\054\232\055\227\056\167\057\176\061\161\062\234\063" +
    "\302\064\226\065\225\117\157\120\306\121\303\122\301" +
    "\123\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\053\233\121\311\123\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\054\322\055" +
    "\321\056\167\057\176\061\161\062\324\063\316\064\320" +
    "\065\317\104\323\105\325\106\315\117\157\121\163\122" +
    "\155\123\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\054\322\055\321\056\167\057\176\061" +
    "\161\062\324\063\316\064\320\065\317\106\327\117\157" +
    "\121\163\122\155\123\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\053\347\054\232\055\227\056\167\057\176\061\161" +
    "\062\234\063\346\064\226\065\225\117\157\121\163\122" +
    "\155\123\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\362\065\363\001\001\000\002\001" +
    "\001\000\006\053\233\065\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\053\374\054\232\055\373\056" +
    "\167\057\176\061\161\062\234\063\302\064\226\065\225" +
    "\117\157\121\163\122\155\123\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\053" +
    "\u0103\054\232\055\227\056\167\057\176\061\161\062\234" +
    "\063\u0102\064\226\065\225\117\157\121\163\122\155\123" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\124\u0105\001\001\000\002\001\001\000\004\124\u0107\001" +
    "\001\000\002\001\001\000\036\054\u010b\055\u010a\056\167" +
    "\057\176\061\161\062\u010c\063\302\064\226\065\225\116" +
    "\u0109\117\157\121\163\122\155\123\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\112\u0111\113\u0113\114\u0112" +
    "\115\u0110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\114\u0119\115\u0118" +
    "\001\001\000\036\054\u010b\055\u010a\056\167\057\176\061" +
    "\161\062\u010c\063\302\064\226\065\225\116\u0115\117\157" +
    "\121\163\122\155\123\200\001\001\000\002\001\001\000" +
    "\070\006\076\013\103\014\020\047\142\050\110\051\125" +
    "\066\120\067\115\070\104\073\071\074\117\101\122\102" +
    "\065\103\100\107\126\110\101\111\105\125\u0117\126\152" +
    "\127\141\131\147\132\145\133\135\134\151\135\136\136" +
    "\146\137\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\006\076\013" +
    "\103\014\020\047\142\050\110\051\125\066\120\067\115" +
    "\070\104\073\071\074\117\101\122\102\065\103\100\107" +
    "\126\110\101\111\105\125\u011c\126\152\127\141\131\147" +
    "\132\145\133\135\134\151\135\136\136\146\137\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\054\204\062\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\053\u0125\054\232" +
    "\055\227\056\167\057\176\061\161\062\234\063\u0124\064" +
    "\226\065\225\117\157\121\163\122\155\123\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0127\001" +
    "\001\000\002\001\001\000\006\102\u012a\103\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\102\u0134\103\u0133\001\001\000\042\054\322\055\321" +
    "\056\167\057\176\061\161\062\324\063\316\064\320\065" +
    "\317\104\u012e\105\325\106\315\117\157\121\163\122\155" +
    "\123\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\102\u0132\103\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\052" +
    "\u0136\054\u013d\055\u013a\056\167\057\176\061\161\062\u013e" +
    "\063\u0137\064\u0139\065\u0138\103\u013f\117\157\121\163\122" +
    "\155\123\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\u0133\001\001\000" +
    "\042\054\322\055\321\056\167\057\176\061\161\062\324" +
    "\063\316\064\320\065\317\104\u0142\105\325\106\315\117" +
    "\157\121\163\122\155\123\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\u0131\001\001\000\002\001" +
    "\001\000\006\102\u0148\103\u0147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\053\u014d\054\232\055\227\056\167\057\176\061\161" +
    "\062\234\063\u014c\064\226\065\225\117\157\121\163\122" +
    "\155\123\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\124\u014f\001\001\000\002\001\001\000\004\124" +
    "\u0151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\053\u0157\064\u0156\065" +
    "\u0159\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\053\233\064\u015a\065\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u015c\001\001\000\002\001\001" +
    "\000\004\124\u015e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\051\u016d\075\u016f\076\u016b\102\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\053\u0189\054\232\055\227\056" +
    "\167\057\176\061\161\062\234\063\u0187\064\226\065\225" +
    "\077\u0188\117\157\121\163\122\155\123\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\u0178\062\u0176\001" +
    "\001\000\002\001\001\000\006\053\233\062\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\u0134\001\001\000\042\054\322\055\321\056\167" +
    "\057\176\061\161\062\324\063\316\064\320\065\317\104" +
    "\u017d\105\325\106\315\117\157\121\163\122\155\123\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u0132\001\001\000\004\102\u012a\001\001\000\002\001\001" +
    "\000\006\053\u0183\065\u0184\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\066\u018c\067\115\070\104\100\u018d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\071\u0193\072" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u0196\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\054\u019a\055\u0199\056\167\057\176\061" +
    "\161\062\234\063\302\064\226\065\225\117\157\121\163" +
    "\122\155\123\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u019c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\u019f\001\001\000\002\001\001\000" +
    "\004\124\u01a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\u01a5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\053\u01aa" +
    "\054\232\055\u01a9\056\167\057\176\061\161\062\234\063" +
    "\302\064\226\065\225\117\157\121\163\122\155\123\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\053\u01b0" +
    "\054\232\055\227\056\167\057\176\061\161\062\234\063" +
    "\u01af\064\226\065\225\117\157\121\163\122\155\123\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\u01b7" +
    "\064\u01b6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\053\233\064\u015a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u01bd\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u01c2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\053\u01cb\062\u01ca\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u01cd\001\001\000\002\001" +
    "\001\000\040\052\u01cf\054\u013d\055\u013a\056\167\057\176" +
    "\061\161\062\u013e\063\u0137\064\u0139\065\u0138\103\u013f\117" +
    "\157\121\163\122\155\123\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u01d5\001\001\000\002\001\001" +
    "\000\010\044\u01d7\045\051\046\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\006\076\013\103\014\020" +
    "\047\u01db\050\110\051\125\066\120\067\115\070\104\073" +
    "\071\074\117\101\122\102\065\103\100\107\126\110\101" +
    "\111\105\001\001\000\002\001\001\000\042\006\076\013" +
    "\103\014\020\050\341\051\125\066\120\067\115\070\104" +
    "\073\071\074\117\101\122\102\065\103\100\107\126\110" +
    "\101\111\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\u01e8\045\051\046\056\001\001\000\002\001\001\000\004" +
    "\036\u01ea\001\001\000\002\001\001\000\050\006\076\013" +
    "\103\014\020\047\u01ec\050\110\051\125\066\120\067\115" +
    "\070\104\073\071\074\117\101\122\102\065\103\100\107" +
    "\126\110\101\111\105\130\u01ed\132\u01ef\001\001\000\046" +
    "\006\076\013\103\014\020\050\341\051\125\066\120\067" +
    "\115\070\104\073\071\074\117\101\122\102\065\103\100" +
    "\107\126\110\101\111\105\130\u01f4\132\u01f5\001\001\000" +
    "\002\001\001\000\036\053\u01f1\054\232\055\164\056\167" +
    "\057\176\061\161\062\234\063\302\064\226\065\225\117" +
    "\157\121\163\122\155\123\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\u01fa\045\051\046\056\001\001\000\002\001\001\000\004" +
    "\040\u01fc\001\001\000\002\001\001\000\050\006\076\013" +
    "\103\014\020\047\u01fe\050\110\051\125\066\120\067\115" +
    "\070\104\073\071\074\117\101\122\102\065\103\100\107" +
    "\126\110\101\111\105\130\u01ff\134\u0201\001\001\000\046" +
    "\006\076\013\103\014\020\050\341\051\125\066\120\067" +
    "\115\070\104\073\071\074\117\101\122\102\065\103\100" +
    "\107\126\110\101\111\105\130\u0204\134\u0205\001\001\000" +
    "\002\001\001\000\036\053\u01f1\054\232\055\227\056\167" +
    "\057\176\061\161\062\234\063\156\064\226\065\225\117" +
    "\157\121\163\122\155\123\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\044\u020a\045\051\046\056\001\001\000" +
    "\002\001\001\000\004\041\u020c\001\001\000\002\001\001" +
    "\000\054\006\076\013\103\014\020\047\u020f\050\110\051" +
    "\125\066\120\067\115\070\104\073\071\074\117\101\122" +
    "\102\065\103\100\107\126\110\101\111\105\130\u0210\132" +
    "\u0212\135\u020e\136\u0213\001\001\000\002\001\001\000\052" +
    "\006\076\013\103\014\020\050\341\051\125\066\120\067" +
    "\115\070\104\073\071\074\117\101\122\102\065\103\100" +
    "\107\126\110\101\111\105\130\u0218\132\u021a\135\u0217\136" +
    "\u0219\001\001\000\002\001\001\000\036\053\u01f1\054\232" +
    "\055\164\056\167\057\176\061\161\062\234\063\302\064" +
    "\162\065\160\117\157\121\163\122\155\123\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\u0232\045\051\046\056\001" +
    "\001\000\002\001\001\000\010\044\u0223\045\051\046\056" +
    "\001\001\000\002\001\001\000\004\042\u0225\001\001\000" +
    "\002\001\001\000\050\006\076\013\103\014\020\047\u0227" +
    "\050\110\051\125\066\120\067\115\070\104\073\071\074" +
    "\117\101\122\102\065\103\100\107\126\110\101\111\105" +
    "\130\u0228\136\u022a\001\001\000\046\006\076\013\103\014" +
    "\020\050\341\051\125\066\120\067\115\070\104\073\071" +
    "\074\117\101\122\102\065\103\100\107\126\110\101\111" +
    "\105\130\u022e\136\u022f\001\001\000\002\001\001\000\006" +
    "\053\u01f1\065\u022c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0234\001\001\000\002\001\001" +
    "\000\044\006\076\013\103\014\020\047\u0237\050\110\051" +
    "\125\066\120\067\115\070\104\073\071\074\117\101\122" +
    "\102\065\103\100\107\126\110\101\111\105\001\001\000" +
    "\002\001\001\000\042\006\076\013\103\014\020\050\341" +
    "\051\125\066\120\067\115\070\104\073\071\074\117\101" +
    "\122\102\065\103\100\107\126\110\101\111\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\u023b\045" +
    "\051\046\056\001\001\000\002\001\001\000\004\037\u023d" +
    "\001\001\000\002\001\001\000\050\006\076\013\103\014" +
    "\020\047\u0240\050\110\051\125\066\120\067\115\070\104" +
    "\073\071\074\117\101\122\102\065\103\100\107\126\110" +
    "\101\111\105\130\u0241\133\u023f\001\001\000\002\001\001" +
    "\000\046\006\076\013\103\014\020\050\341\051\125\066" +
    "\120\067\115\070\104\073\071\074\117\101\122\102\065" +
    "\103\100\107\126\110\101\111\105\130\u0245\133\u0244\001" +
    "\001\000\002\001\001\000\006\053\u01f1\062\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\044\u024b\045\051\046\056\001\001\000" +
    "\002\001\001\000\004\035\u024d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u025c" +
    "\005\u0251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/*código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    */
    public Parser(Lexer lexer){/*nuevo constructor*/
        super(lexer);        
    }    
    
    /*protected int error_sync_size(){
        return 1;
    }*//*para que establezca que con un token bien leido basta para recuperarse...   */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= imports clase 
            {
              Object RESULT =null;
		System.out.println("[S] clase con imports analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= clase 
            {
              Object RESULT =null;
		System.out.println("[S] clase analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // imports ::= imports IIMPORT iimport PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: import [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // imports ::= IIMPORT iimport PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: import [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // iimport ::= direccion PUNTO ASTERISCO 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: direccion [con *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // iimport ::= direccion 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: direccion [sin *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // direccion ::= direccion PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: direccion: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // direccion ::= NOMBRE PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: direccion: PAREJA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clase ::= visibilidad def_clase 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: CLASE [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // clase ::= def_clase 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: CLASE [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PUBLIC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PROTECTED");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PRIVATE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // visibilidad ::= FINAL 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: FINAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_clase ::= CLASS OBJETO LLAVE_A bloque_clase LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_clase: CB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_clase ::= CLASS OBJETO LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_clase: SB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_clase ::= bloque_clase sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("[S] bloque clases: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque_clase ::= sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("[S] bloque clases: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias_clase ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("[S] sentencia clases: def_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias_clase ::= def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] sentencia clases: def_metodo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_variable ::= visibilidad def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_variable [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_variable ::= def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_variable [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_tipo_variable ::= INT creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [INT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_tipo_variable ::= DOUBLE creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [DOUBLE]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_tipo_variable ::= STRING creacion_variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [STRING]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_tipo_variable ::= CHAR creacion_variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [CHAR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_tipo_variable ::= BOOLEAN creacion_variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [BOOLEAN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // def_tipo_variable ::= OBJECT creacion_variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [OBJECT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // def_tipo_variable ::= OBJETO creacion_variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [OBJETO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // creacion_variable_numero ::= creacion_variable_numero COMA variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_numero: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // creacion_variable_numero ::= variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_numero: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable_numero ::= NOMBRE IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_numero: con INI [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable_numero ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_numero: con INI [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable_numero ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_numero: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacion_variable_string ::= creacion_variable_string COMA variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_string: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacion_variable_string ::= variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_string: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable_string ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_string: con INI [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_string ::= NOMBRE IGUAL contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_string: con INI [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_string ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_string: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creacion_variable_char ::= creacion_variable_char COMA variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_char: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacion_variable_char ::= variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_char: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable_char ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_char: con INI [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable_char ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_char: con INI [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable_char ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_char: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creacion_variable_boolean ::= creacion_variable_boolean COMA variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_boolean: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // creacion_variable_boolean ::= variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_boolean: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_boolean ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_boolean: con INI [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_boolean ::= NOMBRE IGUAL contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_boolean: con INI [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_boolean ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_boolean: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // creacion_variable_object ::= creacion_variable_object COMA variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_object: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // creacion_variable_object ::= variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_object: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_object ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_object: con INI [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_object ::= NOMBRE IGUAL contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_object: con INI [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable_object ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_object: con INI [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable_object ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_object: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // creacion_variable_objeto ::= creacion_variable_objeto COMA variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_objetO: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // creacion_variable_objeto ::= variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_objetO: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_objeto ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_objetO: con INI [cont_V");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable_objeto ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_objetO: con INI [cont_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_objeto ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_objetO: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // def_metodo ::= visibilidad cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_metodo [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // def_metodo ::= cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_metodo [invisible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo_def_metodo ::= OBJETO PARENTESIS_A parametros PARENTESIS_C def_metodo_constructor 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_constructor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpo_def_metodo ::= def_metodo_tipo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_TIPO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpo_def_metodo ::= VOID NOMBRE def_metodo_void 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_VOID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // def_metodo_constructor ::= LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: no_void [cuerpo_cnstrct [CB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_constructor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // def_metodo_constructor ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: no_void [cuerpo_cnstrct [SB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_constructor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // def_metodo_tipo ::= INT NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: INT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // def_metodo_tipo ::= DOUBLE NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: DOUBLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // def_metodo_tipo ::= STRING NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: STRING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // def_metodo_tipo ::= CHAR NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // def_metodo_tipo ::= BOOLEAN NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: BOOLEAN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // def_metodo_tipo ::= OBJECT NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: OBJECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // def_metodo_tipo ::= OBJETO NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: OBJETO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_metodo_numero ::= LLAVE_A retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpo_metodo_numero ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpo_metodo_string ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cuerpo_metodo_string ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cuerpo_metodo_char ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpo_metodo_char ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpo_metodo_boolean ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpo_metodo_boolean ::= LLAVE_A retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_metodo_object ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo_metodo_object ::= LLAVE_A retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_metodo_object ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_metodo_object ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_metodo_objeto ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_metodo_objeto ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [CB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [CB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [SB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [SB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros ::= parametro 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: UNICO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: ninguno");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parametro ::= tipo NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametro");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo ::= INT 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: INT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: DOUBLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo ::= STRING 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: STRING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipo ::= CHAR 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: BOOLEAN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo ::= OBJECT 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: OBJECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo ::= OBJETO 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: OBJETO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // bloque ::= bloque sentencias 
            {
              Object RESULT =null;
		System.out.println("[S] bloque: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // bloque ::= sentencias 
            {
              Object RESULT =null;
		System.out.println("[S] bloque: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // bloque ::= error 
            {
              Object RESULT =null;
		System.out.println("[S] error: BAD METHOD or STATEMENT BODY");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencias ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: def_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencias ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias ::= ciclo 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: ciclo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencias ::= invocacion 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: invocacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencias ::= sentencia_control 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: sentencia_control");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencias ::= operacion_unaria PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: operacion_unaria");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacion ::= cuerpo_invocacion_var IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // asignacion ::= THIS PUNTO cuerpo_invocacion_var IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipos_asignacion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipos_asig: cont_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipos_asignacion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipos_asig: cont_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipos_asignacion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipos_asignacion ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tipos_asignacion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipos_asignacion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tipos_asignacion ::= THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: THIS. invoc_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipos_asignacion ::= cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: invoc_met");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipos_asignacion ::= THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: THIS. invoc_met");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // contenido_variable ::= PARENTESIS_A contenido_variable PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: ( cont_var )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // contenido_variable ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // contenido_numero ::= contenido_numero MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // contenido_numero ::= contenido_numero RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: RESTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // contenido_numero ::= contenido_numero ASTERISCO contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ASTERISCO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // contenido_numero ::= contenido_numero DIV contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: DIV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // contenido_numero ::= RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MENOS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // contenido_numero ::= PARENTESIS_A contenido_numero PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ( cont_# )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // contenido_numero ::= NUMERO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: NUMERO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // contenido_numero ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // contenido_string ::= contenido_boolean MAS cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_S [ cont_boolean + cc ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // contenido_string ::= permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_S [ permitidos ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // permitidos ::= contenido_numero MAS permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cont_# + permitidos]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // permitidos ::= contenido_char MAS permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cont_C + permitidos]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // permitidos ::= cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cualquier_contenido ::= cualquier_contenido opciones_cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cualq_cont: [cc o_cc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cualquier_contenido",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // cualquier_contenido ::= strings 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cualq_cont: [strings]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cualquier_contenido",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // opciones_cualquier_contenido ::= MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // opciones_cualquier_contenido ::= MAS contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // opciones_cualquier_contenido ::= MAS contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // opciones_cualquier_contenido ::= MAS strings 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ strings]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // strings ::= PARENTESIS_A strings PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: strings: ( strings )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // strings ::= CADENA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: strings: CADENA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // contenido_char ::= PARENTESIS_A contenido_char PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_C: ( cont_C )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // contenido_char ::= CARACTER 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_C: CARACTER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // contenido_object ::= PARENTESIS_A contenido_object PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_Oc: ( cont_Oc )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // contenido_object ::= NEW OBJECT PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_Oc: NEW Oc()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // contenido_objeto ::= PARENTESIS_A contenido_objeto PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: ( cont_O )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // contenido_objeto ::= NEW OBJETO PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: NEW O( argucion )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // operacion_unaria ::= incremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_unaria: INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operacion_unaria ::= autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_unaria: AUTO_INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // incremento ::= NOMBRE MAS MAS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ [der]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // incremento ::= NOMBRE RESTA RESTA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- [der]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // incremento ::= MAS MAS NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ [izq]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // incremento ::= RESTA RESTA NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- [izq]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // autoincremento ::= NOMBRE opciones_autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("autoincremento",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // opciones_autoincremento ::= opciones_autoIncreMas 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: +=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // opciones_autoincremento ::= RESTA IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: -=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // opciones_autoincremento ::= ASTERISCO IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: *=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // opciones_autoincremento ::= DIV IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: /=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // opciones_autoIncreMas ::= MAS IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [val#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // opciones_autoIncreMas ::= MAS IGUAL contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ciclo ::= ciclo_for 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: ciclo: FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ciclo ::= WHILE PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: ciclo: WHILE [cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ciclo ::= WHILE PARENTESIS_A contenido_variable PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("estructura: ciclo: WHILE [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_boolean PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: ciclo: DO-WHILE [cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_variable PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("estructura: ciclo: DO-WHILE [cont_V] ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ciclo_for ::= FOR PARENTESIS_A asignacion_for condiciones_for incremento_for PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // asignacion_for ::= asignacion_completa_for 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [completa]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // asignacion_for ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [parcial]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // asignacion_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // asignacion_completa_for ::= INT NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [INT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // asignacion_completa_for ::= DOUBLE NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [DOUBLE]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [STRING-CS]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [STRING-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [CHAR-CC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [CHAR-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [BOOLEAN-CB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [BOOLEAN-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJECT-COc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETC-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO-CO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // condiciones_for ::= contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // condiciones_for ::= contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // condiciones_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // incremento_for ::= operacion_unaria 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: incremento [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // incremento_for ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: incremento [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // invocacion ::= cuerpo_invocacion_metodo PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: invocacion [tradicional]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // invocacion ::= THIS PUNTO cuerpo_invocacion_metodo PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: invocacion [this]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // cuerpo_invocacion_var ::= NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [recursi var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // cuerpo_invocacion_var ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [recursi met]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // cuerpo_invocacion_var ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [only var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // cuerpo_invocacion_metodo ::= NOMBRE PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [recursi var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // cuerpo_invocacion_metodo ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [recursi met]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // cuerpo_invocacion_metodo ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [only metodo]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // argumentacion ::= argumentos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentacion [min 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // argumentacion ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentacion [0 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // argumentos ::= argumentos COMA argumento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentos [+ 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // argumentos ::= argumento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentos [1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // argumento ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // argumento ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // argumento ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // argumento ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // argumento ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // argumento ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // sentencia_control ::= sentencia_if 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // sentencia_control ::= sentencia_if ELSE cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: IF-ELSE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // sentencia_control ::= sentencia_switch 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sentencia_if ::= IF PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_if [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // sentencia_if ::= IF PARENTESIS_A contenido_variable PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_if [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // contenido_boolean ::= negaciones PARENTESIS_A contenido_boolean PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [! ( MC ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // contenido_boolean ::= PARENTESIS_A contenido_boolean PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [( MC )]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // contenido_boolean ::= contenido_boolean OPERADOR_LOGICO contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [ cont_boolean OL cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // contenido_boolean ::= condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [condicion]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // condicion ::= contenido_condicion OPERADOR_RELACIONAL opcion_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [contCondi OR op_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // condicion ::= contenido_bool OPERADOR_RELACIONAL opcion_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [cont_bool OR op_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // condicion ::= contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [cont_bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // opcion_condicion ::= contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_condicion [cont_bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // opcion_condicion ::= contenido_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_condicion [cont_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // contenido_condicion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [con_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // contenido_condicion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // contenido_condicion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // contenido_condicion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // contenido_condicion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // contenido_bool ::= PARENTESIS_A contenido_bool PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ( cont_bool ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // contenido_bool ::= negaciones contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ! cont_bool ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // contenido_bool ::= negaciones contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ! cont_var ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // contenido_bool ::= BOOLEANO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ BOOLEANO ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // negaciones ::= negaciones NO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: negaciones [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // negaciones ::= NO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: negaciones [UNICA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // sentencia_switch ::= SWITCH PARENTESIS_A contenido_switch PARENTESIS_C LLAVE_A cuerpo_switch LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // cuerpo_switch ::= casos_normales caso_default 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_switch [CN + posible CD]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // cuerpo_switch ::= caso_default 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_switch [posible CD o nada]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // casos_normales ::= casos_normales caso 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: casos_normales [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // casos_normales ::= caso 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: casos_normales [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // caso ::= CASE contenido_switch DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso (CB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // caso ::= CASE contenido_switch DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso (SB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // caso_default ::= DEFAULT DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [existente (CB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // caso_default ::= DEFAULT DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [existente (SB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // caso_default ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [ausente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // contenido_switch ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // contenido_switch ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // contenido_switch ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // cuerpo_estructuras ::= LLAVE_A bloque_general LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_estructuras [CB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // cuerpo_estructuras ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_estructuras [SB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // bloque_general ::= bloque retorno 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [CR [comp o parada]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // bloque_general ::= bloque 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // bloque_general ::= retorno 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [SB y CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // retorno ::= retorno_compuesto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno [compuesto]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // retorno ::= parada PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno [parada [simple]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // retorno_compuesto ::= retorno_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // retorno_compuesto ::= retorno_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // retorno_compuesto ::= retorno_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // retorno_compuesto ::= retorno_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // retorno_compuesto ::= retorno_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // retorno_compuesto ::= retorno_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // retorno_variable ::= RETURN contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_V");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_variable",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // retorno_numero ::= RETURN contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_numero",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // retorno_string ::= RETURN contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_string",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // retorno_char ::= RETURN contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_char",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // retorno_boolean ::= RETURN contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_boolean",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // retorno_object ::= RETURN contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_object",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // retorno_objeto ::= RETURN contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_objeto",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // parada ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parada [RETURN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // parada ::= BREAK 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parada [BREAK]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
