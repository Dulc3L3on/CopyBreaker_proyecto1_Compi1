
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import Backend.Analizadores.ParserSym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\005\005\000\002\007\004\000" +
    "\002\007\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\010\007\000\002\010" +
    "\006\000\002\011\004\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\005\000\002\013\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\015\005\000\002\015\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\003\000\002\017\005\000" +
    "\002\017\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\005\000\002\022\005\000\002\022\003\000\002\023\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\004\000" +
    "\002\024\003\000\002\025\005\000\002\025\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\003\000\002\031\004\000" +
    "\002\031\003\000\002\032\003\000\002\032\004\000\002" +
    "\033\007\000\002\033\007\000\002\033\007\000\002\033" +
    "\007\000\002\033\007\000\002\033\007\000\002\033\007" +
    "\000\002\034\006\000\002\034\005\000\002\034\006\000" +
    "\002\034\005\000\002\035\006\000\002\035\005\000\002" +
    "\035\006\000\002\035\005\000\002\036\006\000\002\036" +
    "\005\000\002\036\006\000\002\036\005\000\002\037\006" +
    "\000\002\037\005\000\002\037\006\000\002\037\005\000" +
    "\002\040\006\000\002\040\005\000\002\040\006\000\002" +
    "\040\005\000\002\040\006\000\002\040\005\000\002\040" +
    "\006\000\002\040\005\000\002\041\006\000\002\041\005" +
    "\000\002\041\006\000\002\041\005\000\002\041\005\000" +
    "\002\041\004\000\002\042\012\000\002\042\010\000\002" +
    "\042\011\000\002\042\007\000\002\043\005\000\002\043" +
    "\003\000\002\043\002\000\002\044\004\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\046\004\000\002\046\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\004\000\002\050\006\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\052\005\000\002\052" +
    "\003\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\004\000\002\053\005\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\055\005\000\002\055\003\000\002\056" +
    "\005\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\060\005\000\002\060\003\000" +
    "\002\061\005\000\002\061\006\000\002\062\005\000\002" +
    "\062\007\000\002\063\005\000\002\063\005\000\002\063" +
    "\005\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\065\003\000\002\065\003\000" +
    "\002\066\005\000\002\066\005\000\002\066\005\000\002" +
    "\066\005\000\002\067\004\000\002\070\003\000\002\070" +
    "\005\000\002\070\005\000\002\070\005\000\002\071\005" +
    "\000\002\071\005\000\002\072\003\000\002\072\007\000" +
    "\002\072\011\000\002\073\011\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\075\007\000\002\075" +
    "\007\000\002\075\007\000\002\075\007\000\002\075\007" +
    "\000\002\075\007\000\002\075\007\000\002\075\007\000" +
    "\002\075\007\000\002\075\007\000\002\075\007\000\002" +
    "\075\007\000\002\076\004\000\002\076\003\000\002\077" +
    "\003\000\002\077\002\000\002\100\007\000\002\100\007" +
    "\000\002\101\003\000\002\101\002\000\002\102\005\000" +
    "\002\102\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\104\003\000\002\104\005\000\002\104\003" +
    "\000\002\105\007\000\002\114\003\000\002\114\003\000" +
    "\002\115\006\000\002\115\005\000\002\115\005\000\002" +
    "\115\005\000\002\117\003\000\002\117\003\000\002\116" +
    "\005\000\002\116\005\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\121\005\000\002" +
    "\121\004\000\002\121\004\000\002\122\003\000\002\122" +
    "\003\000\002\123\004\000\002\123\003\000\002\106\011" +
    "\000\002\107\004\000\002\107\003\000\002\110\004\000" +
    "\002\110\003\000\002\111\006\000\002\111\005\000\002" +
    "\112\005\000\002\112\004\000\002\112\002\000\002\113" +
    "\003\000\002\113\003\000\002\113\003\000\002\124\005" +
    "\000\002\124\004\000\002\125\004\000\002\125\003\000" +
    "\002\125\003\000\002\126\003\000\002\126\004\000\002" +
    "\127\003\000\002\127\003\000\002\127\003\000\002\127" +
    "\003\000\002\127\003\000\002\127\003\000\002\130\005" +
    "\000\002\131\005\000\002\132\005\000\002\133\005\000" +
    "\002\134\005\000\002\135\005\000\002\136\005\000\002" +
    "\137\003\000\002\137\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u021f\000\016\004\010\005\016\011\005\012\007\013" +
    "\013\014\015\001\002\000\014\005\016\011\005\012\007" +
    "\013\013\014\015\001\002\000\024\005\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7" +
    "\001\002\000\004\002\u0220\001\002\000\024\005\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\025\ufff6\001\002\000\004\024\u021c\001\002\000\004\005" +
    "\016\001\002\000\004\002\ufff8\001\002\000\024\005\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\025\ufff5\001\002\000\004\002\uffff\001\002\000\024" +
    "\005\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\025\ufff4\001\002\000\004\023\017\001\002" +
    "\000\004\035\020\001\002\000\034\011\005\012\007\013" +
    "\013\014\015\015\023\016\041\017\032\020\024\021\031" +
    "\022\030\023\027\025\040\036\034\001\002\000\004\032" +
    "\u0218\001\002\000\034\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\025\uffc4\036\uffc4\001\002\000\006\024\045\046\u0214" +
    "\001\002\000\006\024\u01a3\046\u0205\001\002\000\034\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef\036\uffef\001" +
    "\002\000\034\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025" +
    "\ufff0\036\ufff0\001\002\000\006\024\350\046\u01f3\001\002" +
    "\000\006\024\u0125\046\u01dc\001\002\000\006\024\u0118\046" +
    "\u01cd\001\002\000\006\024\363\046\u01bc\001\002\000\034" +
    "\011\005\012\007\013\013\014\015\015\023\016\041\017" +
    "\032\020\024\021\031\022\030\023\027\025\040\036\u01bb" +
    "\001\002\000\004\002\ufff2\001\002\000\022\015\023\016" +
    "\041\017\032\020\024\021\031\022\030\023\027\025\040" +
    "\001\002\000\034\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\025\uffee\036\uffee\001\002\000\034\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\025\uffc3\036\uffc3\001\002\000\004\046" +
    "\u01ac\001\002\000\006\024\045\046\044\001\002\000\006" +
    "\032\uffe3\040\uffe3\001\002\000\006\032\uffea\040\u0196\001" +
    "\002\000\024\015\074\016\101\017\100\020\105\021\076" +
    "\022\075\023\102\040\uff96\047\uff96\001\002\000\010\032" +
    "\uffe0\040\uffe0\045\046\001\002\000\014\024\054\027\050" +
    "\031\055\042\051\046\053\001\002\000\006\032\uffe1\040" +
    "\uffe1\001\002\000\026\032\uff76\034\uff76\037\uff76\040\uff76" +
    "\041\uff76\042\uff76\044\uff76\047\uff76\060\uff76\061\uff76\001" +
    "\002\000\012\024\054\027\050\042\051\046\066\001\002" +
    "\000\016\032\uffe2\034\061\040\uffe2\041\062\042\060\044" +
    "\064\001\002\000\014\024\054\027\050\031\055\042\051" +
    "\046\053\001\002\000\026\032\uff75\034\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\044\uff75\047\uff75\060\uff75\061\uff75" +
    "\001\002\000\020\032\uff6f\037\uff6f\040\uff6f\041\uff6f\047" +
    "\uff6f\060\uff6f\061\uff6f\001\002\000\004\047\072\001\002" +
    "\000\014\034\061\041\062\042\060\044\064\047\063\001" +
    "\002\000\012\024\054\027\050\042\051\046\066\001\002" +
    "\000\012\024\054\027\050\042\051\046\066\001\002\000" +
    "\012\024\054\027\050\042\051\046\066\001\002\000\026" +
    "\032\uff77\034\uff77\037\uff77\040\uff77\041\uff77\042\uff77\044" +
    "\uff77\047\uff77\060\uff77\061\uff77\001\002\000\012\024\054" +
    "\027\050\042\051\046\066\001\002\000\026\032\uff79\034" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\044\uff79\047\uff79" +
    "\060\uff79\061\uff79\001\002\000\012\024\054\027\050\042" +
    "\051\046\066\001\002\000\026\032\uff7c\034\061\037\uff7c" +
    "\040\uff7c\041\uff7c\042\uff7c\044\064\047\uff7c\060\uff7c\061" +
    "\uff7c\001\002\000\026\032\uff7a\034\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\044\uff7a\047\uff7a\060\uff7a\061\uff7a\001" +
    "\002\000\026\032\uff7b\034\061\037\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\044\064\047\uff7b\060\uff7b\061\uff7b\001\002\000" +
    "\020\032\uff70\037\uff70\040\uff70\041\uff70\047\uff70\060\uff70" +
    "\061\uff70\001\002\000\026\032\uff78\034\uff78\037\uff78\040" +
    "\uff78\041\uff78\042\uff78\044\uff78\047\uff78\060\uff78\061\uff78" +
    "\001\002\000\004\024\uff94\001\002\000\004\024\uff8f\001" +
    "\002\000\004\024\uff90\001\002\000\006\040\uff97\047\uff97" +
    "\001\002\000\004\024\uff92\001\002\000\004\024\uff93\001" +
    "\002\000\004\024\uff8e\001\002\000\004\024\u01aa\001\002" +
    "\000\006\040\106\047\107\001\002\000\004\024\uff91\001" +
    "\002\000\020\015\074\016\101\017\100\020\105\021\076" +
    "\022\075\023\102\001\002\000\004\035\111\001\002\000" +
    "\034\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\025\uffc0\036" +
    "\uffc0\001\002\000\052\007\135\011\005\012\007\013\013" +
    "\014\015\015\120\016\116\017\145\020\112\021\134\022" +
    "\126\023\146\024\113\041\152\042\117\050\122\051\140" +
    "\052\151\053\131\055\136\001\002\000\004\024\u01a3\001" +
    "\002\000\020\033\u019b\034\u0161\041\u0162\042\u015f\044\u0164" +
    "\045\u014a\046\u019c\001\002\000\004\036\u019a\001\002\000" +
    "\062\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\036\uff89\041\uff89\042\uff89\050\uff89\051\uff89" +
    "\052\uff89\053\uff89\055\uff89\056\uff89\057\uff89\001\002\000" +
    "\004\024\045\001\002\000\004\042\u0198\001\002\000\004" +
    "\024\045\001\002\000\006\033\u018f\046\u0190\001\002\000" +
    "\004\046\u0136\001\002\000\020\015\120\016\116\017\145" +
    "\020\112\021\134\022\126\023\146\001\002\000\052\007" +
    "\135\011\005\012\007\013\013\014\015\015\120\016\116" +
    "\017\145\020\112\021\134\022\126\023\146\024\113\041" +
    "\152\042\117\050\122\051\140\052\151\053\131\055\136" +
    "\001\002\000\064\007\uff2e\010\uff2e\011\uff2e\012\uff2e\013" +
    "\uff2e\014\uff2e\015\uff2e\016\uff2e\017\uff2e\020\uff2e\021\uff2e" +
    "\022\uff2e\023\uff2e\024\uff2e\036\uff2e\041\uff2e\042\uff2e\050" +
    "\uff2e\051\uff2e\052\uff2e\053\uff2e\054\u012e\055\uff2e\056\uff2e" +
    "\057\uff2e\001\002\000\004\024\u0125\001\002\000\062\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\036\uff8b\041\uff8b\042\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\053\uff8b\055\uff8b\056\uff8b\057\uff8b\001\002\000\006\032" +
    "\uff5d\047\uff5d\001\002\000\004\046\u011f\001\002\000\062" +
    "\007\uff2c\010\uff2c\011\uff2c\012\uff2c\013\uff2c\014\uff2c\015" +
    "\uff2c\016\uff2c\017\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c" +
    "\024\uff2c\036\uff2c\041\uff2c\042\uff2c\050\uff2c\051\uff2c\052" +
    "\uff2c\053\uff2c\055\uff2c\056\uff2c\057\uff2c\001\002\000\062" +
    "\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c" +
    "\024\uff8c\036\uff8c\041\uff8c\042\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\055\uff8c\056\uff8c\057\uff8c\001\002\000\004" +
    "\024\u0118\001\002\000\014\024\054\027\050\031\055\042" +
    "\051\046\053\001\002\000\004\046\377\001\002\000\006" +
    "\032\uff5e\047\uff5e\001\002\000\004\046\373\001\002\000" +
    "\062\007\uff51\010\uff51\011\uff51\012\uff51\013\uff51\014\uff51" +
    "\015\uff51\016\uff51\017\uff51\020\uff51\021\uff51\022\uff51\023" +
    "\uff51\024\uff51\036\uff51\041\uff51\042\uff51\050\uff51\051\uff51" +
    "\052\uff51\053\uff51\055\uff51\056\uff51\057\uff51\001\002\000" +
    "\004\032\372\001\002\000\004\036\371\001\002\000\062" +
    "\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88" +
    "\024\uff88\036\uff88\041\uff88\042\uff88\050\uff88\051\uff88\052" +
    "\uff88\053\uff88\055\uff88\056\uff88\057\uff88\001\002\000\004" +
    "\024\363\001\002\000\004\024\350\001\002\000\062\007" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024" +
    "\uff8a\036\uff8a\041\uff8a\042\uff8a\050\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\055\uff8a\056\uff8a\057\uff8a\001\002\000\062\007" +
    "\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87" +
    "\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024" +
    "\uff87\036\uff87\041\uff87\042\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\055\uff87\056\uff87\057\uff87\001\002\000\004\035" +
    "\156\001\002\000\004\041\153\001\002\000\004\024\154" +
    "\001\002\000\006\032\uff5a\047\uff5a\001\002\000\004\051" +
    "\341\001\002\000\056\007\165\010\166\011\005\012\007" +
    "\013\013\014\015\015\120\016\116\017\145\020\112\021" +
    "\134\022\126\023\146\024\113\036\162\041\152\042\117" +
    "\050\122\051\140\052\151\053\131\055\136\001\002\000" +
    "\010\036\ufefc\056\ufefc\057\ufefc\001\002\000\010\036\ufefa" +
    "\056\ufefa\057\ufefa\001\002\000\004\032\340\001\002\000" +
    "\064\007\uff04\010\uff04\011\uff04\012\uff04\013\uff04\014\uff04" +
    "\015\uff04\016\uff04\017\uff04\020\uff04\021\uff04\022\uff04\023" +
    "\uff04\024\uff04\036\uff04\041\uff04\042\uff04\050\uff04\051\uff04" +
    "\052\uff04\053\uff04\054\uff04\055\uff04\056\uff04\057\uff04\001" +
    "\002\000\010\036\uff00\056\uff00\057\uff00\001\002\000\062" +
    "\007\165\010\166\011\005\012\007\013\013\014\015\015" +
    "\120\016\116\017\145\020\112\021\134\022\126\023\146" +
    "\024\113\036\uff02\041\152\042\117\050\122\051\140\052" +
    "\151\053\131\055\136\056\uff02\057\uff02\001\002\000\026" +
    "\006\220\024\054\026\176\027\050\030\211\031\055\032" +
    "\ufef1\042\051\046\216\062\221\001\002\000\004\032\ufef0" +
    "\001\002\000\010\036\ufefd\056\ufefd\057\ufefd\001\002\000" +
    "\010\036\ufef9\056\ufef9\057\ufef9\001\002\000\010\036\ufefe" +
    "\056\ufefe\057\ufefe\001\002\000\004\036\175\001\002\000" +
    "\010\036\ufefb\056\ufefb\057\ufefb\001\002\000\010\036\uff01" +
    "\056\uff01\057\uff01\001\002\000\064\007\uff05\010\uff05\011" +
    "\uff05\012\uff05\013\uff05\014\uff05\015\uff05\016\uff05\017\uff05" +
    "\020\uff05\021\uff05\022\uff05\023\uff05\024\uff05\036\uff05\041" +
    "\uff05\042\uff05\050\uff05\051\uff05\052\uff05\053\uff05\054\uff05" +
    "\055\uff05\056\uff05\057\uff05\001\002\000\020\032\uff71\037" +
    "\uff71\040\uff71\041\uff71\047\uff71\060\uff71\061\uff71\001\002" +
    "\000\004\041\271\001\002\000\020\032\uff23\037\uff23\040" +
    "\uff23\041\uff23\047\uff23\060\334\061\uff23\001\002\000\020" +
    "\032\uff29\037\uff29\040\uff29\041\uff29\047\uff29\060\uff29\061" +
    "\uff29\001\002\000\006\032\333\041\uff61\001\002\000\010" +
    "\032\332\060\uff1a\061\uff1a\001\002\000\004\061\276\001" +
    "\002\000\020\032\uff73\037\uff73\040\uff73\041\uff73\047\uff73" +
    "\060\uff73\061\uff73\001\002\000\020\032\uff6d\037\uff6d\040" +
    "\uff6d\041\uff6d\047\uff6d\060\uff6d\061\uff6d\001\002\000\010" +
    "\032\331\060\uff1b\061\uff1b\001\002\000\010\032\330\060" +
    "\uff1f\061\uff1f\001\002\000\020\032\uff6a\037\uff6a\040\uff6a" +
    "\041\uff6a\047\uff6a\060\uff6a\061\uff6a\001\002\000\020\032" +
    "\327\034\061\041\062\042\060\044\064\060\uff20\061\uff20" +
    "\001\002\000\020\032\uff2a\037\uff2a\040\uff2a\041\uff2a\047" +
    "\uff2a\060\uff2a\061\273\001\002\000\020\032\uff6c\037\uff6c" +
    "\040\uff6c\041\uff6c\047\uff6c\060\uff6c\061\uff6c\001\002\000" +
    "\012\032\326\041\uff60\060\uff1e\061\uff1e\001\002\000\024" +
    "\006\220\024\054\026\176\027\050\030\211\031\055\042" +
    "\051\046\216\062\221\001\002\000\020\032\uff6e\037\uff6e" +
    "\040\uff6e\041\uff6e\047\uff6e\060\uff6e\061\uff6e\001\002\000" +
    "\006\022\305\023\306\001\002\000\012\024\uff13\030\uff13" +
    "\046\uff13\062\uff13\001\002\000\020\032\uff74\037\uff74\040" +
    "\uff74\041\266\047\uff74\060\uff74\061\uff74\001\002\000\012" +
    "\024\230\030\211\046\231\062\224\001\002\000\012\024" +
    "\uff14\030\uff14\046\uff14\062\uff14\001\002\000\020\032\uff18" +
    "\037\uff18\040\uff18\041\uff18\047\uff18\060\uff18\061\uff18\001" +
    "\002\000\020\032\uff16\037\uff16\040\uff16\041\uff16\047\uff16" +
    "\060\uff16\061\uff16\001\002\000\020\032\uff15\037\uff15\040" +
    "\uff15\041\uff15\047\uff15\060\uff15\061\uff15\001\002\000\020" +
    "\032\uff7d\037\uff7d\040\uff7d\041\uff7d\047\uff7d\060\uff7d\061" +
    "\uff7d\001\002\000\024\006\220\024\250\026\176\027\050" +
    "\030\211\031\055\042\051\046\255\062\221\001\002\000" +
    "\020\032\uff17\037\uff17\040\uff17\041\uff17\047\uff17\060\uff17" +
    "\061\uff17\001\002\000\012\024\230\030\211\046\234\062" +
    "\224\001\002\000\012\024\230\030\211\046\234\062\221" +
    "\001\002\000\004\047\242\001\002\000\004\047\241\001" +
    "\002\000\004\047\240\001\002\000\020\032\uff19\037\uff19" +
    "\040\uff19\041\uff19\047\uff19\060\uff19\061\uff19\001\002\000" +
    "\020\032\uff6b\037\uff6b\040\uff6b\041\uff6b\047\uff6b\060\uff6b" +
    "\061\uff6b\001\002\000\020\032\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\047\uff7e\060\uff7e\061\uff7e\001\002\000\020\032\uff61" +
    "\037\uff61\040\uff61\041\uff61\047\uff61\060\uff61\061\uff61\001" +
    "\002\000\020\032\uff1a\037\uff1a\040\uff1a\041\uff1a\047\uff1a" +
    "\060\uff1a\061\uff1a\001\002\000\012\041\uff6d\047\241\060" +
    "\uff1d\061\uff1d\001\002\000\020\032\uff1b\037\uff1b\040\uff1b" +
    "\041\uff1b\047\uff1b\060\uff1b\061\uff1b\001\002\000\020\032" +
    "\uff1f\037\uff1f\040\uff1f\041\uff1f\047\uff1f\060\uff1f\061\uff1f" +
    "\001\002\000\024\032\uff7d\034\uff75\040\uff7d\041\uff75\042" +
    "\uff75\044\uff75\047\uff7d\060\uff75\061\uff75\001\002\000\026" +
    "\032\uff62\034\061\037\uff62\040\uff62\041\062\042\060\044" +
    "\064\047\uff62\060\uff62\061\uff62\001\002\000\010\041\uff2a" +
    "\047\304\061\273\001\002\000\012\041\uff6c\047\240\060" +
    "\uff1c\061\uff1c\001\002\000\020\032\uff60\037\uff60\040\uff60" +
    "\041\uff60\047\uff60\060\uff60\061\uff60\001\002\000\024\006" +
    "\220\024\250\026\176\027\050\030\211\031\055\042\051" +
    "\046\255\062\221\001\002\000\010\041\uff29\047\303\061" +
    "\uff24\001\002\000\010\047\302\060\uff1a\061\uff1a\001\002" +
    "\000\012\041\uff5f\047\301\060\uff73\061\uff73\001\002\000" +
    "\010\047\300\060\uff1b\061\uff1b\001\002\000\020\034\061" +
    "\041\062\042\060\044\064\047\063\060\uff20\061\uff20\001" +
    "\002\000\010\041\uff2a\047\274\061\273\001\002\000\012" +
    "\041\uff60\047\072\060\uff1e\061\uff1e\001\002\000\012\041" +
    "\266\047\267\060\uff74\061\uff74\001\002\000\024\006\220" +
    "\024\054\026\176\027\050\030\211\031\055\042\051\046" +
    "\216\062\221\001\002\000\020\032\uff65\037\uff65\040\uff65" +
    "\041\uff65\047\uff65\060\uff65\061\uff65\001\002\000\020\032" +
    "\uff64\037\uff64\040\uff64\041\uff64\047\uff64\060\uff64\061\uff64" +
    "\001\002\000\024\006\220\024\054\026\176\027\050\030" +
    "\211\031\055\042\051\046\216\062\221\001\002\000\020" +
    "\032\uff63\037\uff63\040\uff63\041\uff63\047\uff63\060\uff63\061" +
    "\uff63\001\002\000\024\006\220\024\054\026\176\027\050" +
    "\030\211\031\055\042\051\046\216\062\221\001\002\000" +
    "\020\032\uff27\037\uff27\040\uff27\041\uff27\047\uff27\060\uff27" +
    "\061\uff27\001\002\000\020\032\uff26\037\uff26\040\uff26\041" +
    "\uff26\047\uff26\060\uff26\061\uff26\001\002\000\024\006\220" +
    "\024\054\026\176\027\050\030\211\031\055\042\051\046" +
    "\216\062\221\001\002\000\020\032\uff25\037\uff25\040\uff25" +
    "\041\uff25\047\uff25\060\uff25\061\uff25\001\002\000\020\032" +
    "\uff69\037\uff69\040\uff69\041\uff69\047\uff69\060\uff69\061\uff69" +
    "\001\002\000\020\032\uff72\037\uff72\040\uff72\041\uff72\047" +
    "\uff72\060\uff72\061\uff72\001\002\000\020\032\uff67\037\uff67" +
    "\040\uff67\041\uff67\047\uff67\060\uff67\061\uff67\001\002\000" +
    "\020\032\uff22\037\uff22\040\uff22\041\uff22\047\uff22\060\uff22" +
    "\061\uff22\001\002\000\020\032\uff28\037\uff28\040\uff28\041" +
    "\uff28\047\uff28\060\uff28\061\uff28\001\002\000\004\046\324" +
    "\001\002\000\004\046\307\001\002\000\026\006\220\024" +
    "\054\026\176\027\050\030\211\031\055\042\051\046\216" +
    "\047\uff37\062\221\001\002\000\006\040\uff35\047\uff35\001" +
    "\002\000\010\040\uff31\041\uff61\047\uff31\001\002\000\012" +
    "\040\uff2f\047\uff2f\060\uff1a\061\uff1a\001\002\000\012\040" +
    "\uff30\047\uff30\060\uff1b\061\uff1b\001\002\000\012\040\uff33" +
    "\047\uff33\060\uff1f\061\uff1f\001\002\000\022\034\061\040" +
    "\uff34\041\062\042\060\044\064\047\uff34\060\uff20\061\uff20" +
    "\001\002\000\004\047\323\001\002\000\014\040\uff32\041" +
    "\uff60\047\uff32\060\uff1e\061\uff1e\001\002\000\006\040\321" +
    "\047\uff38\001\002\000\024\006\220\024\054\026\176\027" +
    "\050\030\211\031\055\042\051\046\216\062\221\001\002" +
    "\000\006\040\uff36\047\uff36\001\002\000\020\032\uff66\037" +
    "\uff66\040\uff66\041\uff66\047\uff66\060\uff66\061\uff66\001\002" +
    "\000\004\047\325\001\002\000\020\032\uff68\037\uff68\040" +
    "\uff68\041\uff68\047\uff68\060\uff68\061\uff68\001\002\000\010" +
    "\036\ufef5\056\ufef5\057\ufef5\001\002\000\010\036\ufef7\056" +
    "\ufef7\057\ufef7\001\002\000\010\036\ufef6\056\ufef6\057\ufef6" +
    "\001\002\000\010\036\ufef3\056\ufef3\057\ufef3\001\002\000" +
    "\010\036\ufef2\056\ufef2\057\ufef2\001\002\000\010\036\ufef4" +
    "\056\ufef4\057\ufef4\001\002\000\024\006\220\024\054\026" +
    "\176\027\050\030\211\031\055\042\051\046\216\062\221" +
    "\001\002\000\016\032\uff21\037\uff21\040\uff21\041\uff21\047" +
    "\uff21\061\uff23\001\002\000\062\007\uff8d\010\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\036\uff8d\041\uff8d" +
    "\042\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\055\uff8d\056" +
    "\uff8d\057\uff8d\001\002\000\010\036\uff03\056\uff03\057\uff03" +
    "\001\002\000\010\036\ufeff\056\ufeff\057\ufeff\001\002\000" +
    "\004\046\342\001\002\000\024\006\220\024\054\026\176" +
    "\027\050\030\211\031\055\042\051\046\216\062\221\001" +
    "\002\000\006\041\uff61\047\344\001\002\000\004\032\345" +
    "\001\002\000\062\007\uff4f\010\uff4f\011\uff4f\012\uff4f\013" +
    "\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f" +
    "\022\uff4f\023\uff4f\024\uff4f\036\uff4f\041\uff4f\042\uff4f\050" +
    "\uff4f\051\uff4f\052\uff4f\053\uff4f\055\uff4f\056\uff4f\057\uff4f" +
    "\001\002\000\006\032\uffc9\040\uffc9\001\002\000\006\032" +
    "\uffe5\040\357\001\002\000\010\032\uffc6\040\uffc6\045\351" +
    "\001\002\000\010\006\352\024\230\046\353\001\002\000" +
    "\004\023\306\001\002\000\010\006\352\024\230\046\353" +
    "\001\002\000\006\032\uffc8\040\uffc8\001\002\000\006\032" +
    "\uffc7\040\uffc7\001\002\000\004\047\302\001\002\000\004" +
    "\024\350\001\002\000\006\032\uffca\040\uffca\001\002\000" +
    "\006\032\uffde\040\uffde\001\002\000\006\032\uffe9\040\367" +
    "\001\002\000\010\032\uffdb\040\uffdb\045\364\001\002\000" +
    "\024\006\220\024\250\026\176\027\050\030\211\031\055" +
    "\042\051\046\255\062\221\001\002\000\012\032\uffdc\040" +
    "\uffdc\060\uff1f\061\uff1f\001\002\000\006\032\uffdd\040\uffdd" +
    "\001\002\000\004\024\363\001\002\000\006\032\uffdf\040" +
    "\uffdf\001\002\000\034\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\025\uffb9\036\uffb9\001\002\000\062\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\036\uff86" +
    "\041\uff86\042\uff86\050\uff86\051\uff86\052\uff86\053\uff86\055" +
    "\uff86\056\uff86\057\uff86\001\002\000\024\006\220\024\054" +
    "\026\176\027\050\030\211\031\055\042\051\046\216\062" +
    "\221\001\002\000\006\041\uff61\047\375\001\002\000\004" +
    "\035\156\001\002\000\062\007\uff50\010\uff50\011\uff50\012" +
    "\uff50\013\uff50\014\uff50\015\uff50\016\uff50\017\uff50\020\uff50" +
    "\021\uff50\022\uff50\023\uff50\024\uff50\036\uff50\041\uff50\042" +
    "\uff50\050\uff50\051\uff50\052\uff50\053\uff50\055\uff50\056\uff50" +
    "\057\uff50\001\002\000\024\006\220\024\054\026\176\027" +
    "\050\030\211\031\055\042\051\046\216\062\221\001\002" +
    "\000\004\047\u0104\001\002\000\012\037\uff08\047\uff08\060" +
    "\uff1f\061\uff1f\001\002\000\022\034\061\037\uff07\041\062" +
    "\042\060\044\064\047\uff07\060\uff20\061\uff20\001\002\000" +
    "\014\037\uff06\041\uff60\047\uff06\060\uff1e\061\uff1e\001\002" +
    "\000\004\035\u0105\001\002\000\010\036\uff09\056\u010b\057" +
    "\u0106\001\002\000\004\037\u0112\001\002\000\004\036\uff10" +
    "\001\002\000\004\036\u0111\001\002\000\010\036\uff09\056" +
    "\u010b\057\u0106\001\002\000\010\036\uff0e\056\uff0e\057\uff0e" +
    "\001\002\000\024\006\220\024\054\026\176\027\050\030" +
    "\211\031\055\042\051\046\216\062\221\001\002\000\004" +
    "\037\u010d\001\002\000\062\007\165\010\166\011\005\012" +
    "\007\013\013\014\015\015\120\016\116\017\145\020\112" +
    "\021\134\022\126\023\146\024\113\036\uff0c\041\152\042" +
    "\117\050\122\051\140\052\151\053\131\055\136\056\uff0c" +
    "\057\uff0c\001\002\000\010\036\uff0d\056\uff0d\057\uff0d\001" +
    "\002\000\004\036\uff11\001\002\000\010\036\uff0f\056\uff0f" +
    "\057\uff0f\001\002\000\062\007\uff12\010\uff12\011\uff12\012" +
    "\uff12\013\uff12\014\uff12\015\uff12\016\uff12\017\uff12\020\uff12" +
    "\021\uff12\022\uff12\023\uff12\024\uff12\036\uff12\041\uff12\042" +
    "\uff12\050\uff12\051\uff12\052\uff12\053\uff12\055\uff12\056\uff12" +
    "\057\uff12\001\002\000\056\007\165\010\166\011\005\012" +
    "\007\013\013\014\015\015\120\016\116\017\145\020\112" +
    "\021\134\022\126\023\146\024\113\036\uff0a\041\152\042" +
    "\117\050\122\051\140\052\151\053\131\055\136\001\002" +
    "\000\004\036\uff0b\001\002\000\004\032\326\001\002\000" +
    "\014\032\327\034\061\041\062\042\060\044\064\001\002" +
    "\000\006\032\uffd4\040\uffd4\001\002\000\006\032\uffe7\040" +
    "\u011d\001\002\000\032\006\220\024\054\026\176\027\050" +
    "\030\211\031\055\032\uffd1\040\uffd1\042\051\045\u0119\046" +
    "\216\062\221\001\002\000\006\024\230\046\u011b\001\002" +
    "\000\010\032\uffd2\040\uffd2\041\uff61\001\002\000\006\024" +
    "\230\046\u011b\001\002\000\006\032\uffd3\040\uffd3\001\002" +
    "\000\004\024\u0118\001\002\000\006\032\uffd5\040\uffd5\001" +
    "\002\000\024\006\220\024\054\026\176\027\050\030\211" +
    "\031\055\042\051\046\216\062\221\001\002\000\006\041" +
    "\uff61\047\u0121\001\002\000\004\035\156\001\002\000\064" +
    "\007\uff2b\010\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b\015" +
    "\uff2b\016\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\023\uff2b" +
    "\024\uff2b\036\uff2b\041\uff2b\042\uff2b\050\uff2b\051\uff2b\052" +
    "\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b\057\uff2b\001\002" +
    "\000\006\032\uffcf\040\uffcf\001\002\000\006\032\uffe6\040" +
    "\u012c\001\002\000\010\032\uffcb\040\uffcb\045\u0126\001\002" +
    "\000\010\006\220\024\230\046\u0129\001\002\000\006\032" +
    "\uffcd\040\uffcd\001\002\000\006\032\uffce\040\uffce\001\002" +
    "\000\010\006\220\024\230\046\u0129\001\002\000\006\032" +
    "\uffcc\040\uffcc\001\002\000\004\047\300\001\002\000\004" +
    "\024\u0125\001\002\000\006\032\uffd0\040\uffd0\001\002\000" +
    "\004\035\156\001\002\000\062\007\uff2d\010\uff2d\011\uff2d" +
    "\012\uff2d\013\uff2d\014\uff2d\015\uff2d\016\uff2d\017\uff2d\020" +
    "\uff2d\021\uff2d\022\uff2d\023\uff2d\024\uff2d\036\uff2d\041\uff2d" +
    "\042\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d\055\uff2d\056" +
    "\uff2d\057\uff2d\001\002\000\004\036\u0133\001\002\000\004" +
    "\036\u0132\001\002\000\034\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\025\uffba\036\uffba\001\002\000\034\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\025\uffb8\036\uffb8\001\002\000" +
    "\004\032\u0135\001\002\000\064\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\036\uffed" +
    "\041\uffed\042\uffed\050\uffed\051\uffed\052\uffed\053\uffed\055" +
    "\uffed\056\uffed\057\uffed\001\002\000\024\015\u0137\016\u013e" +
    "\017\u013c\020\u0142\021\u013a\022\u0139\023\u0140\024\u0141\032" +
    "\u0138\001\002\000\004\024\u018b\001\002\000\026\006\uff4b" +
    "\024\uff4b\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\042" +
    "\uff4b\046\uff4b\062\uff4b\001\002\000\004\024\u0183\001\002" +
    "\000\004\024\u017d\001\002\000\026\006\uff4d\024\uff4d\026" +
    "\uff4d\027\uff4d\030\uff4d\031\uff4d\032\uff4d\042\uff4d\046\uff4d" +
    "\062\uff4d\001\002\000\004\024\u0177\001\002\000\026\006" +
    "\uff4c\024\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c" +
    "\042\uff4c\046\uff4c\062\uff4c\001\002\000\004\024\u0173\001" +
    "\002\000\026\006\220\024\054\026\176\027\050\030\211" +
    "\031\055\032\u015b\042\051\046\216\062\221\001\002\000" +
    "\004\024\u0153\001\002\000\004\045\u014a\001\002\000\004" +
    "\024\u0143\001\002\000\004\045\u0144\001\002\000\010\024" +
    "\230\031\055\046\u0147\001\002\000\004\032\u0149\001\002" +
    "\000\004\032\u0148\001\002\000\010\024\230\031\055\046" +
    "\u0147\001\002\000\026\006\uff45\024\uff45\026\uff45\027\uff45" +
    "\030\uff45\031\uff45\032\uff45\042\uff45\046\uff45\062\uff45\001" +
    "\002\000\026\006\uff46\024\uff46\026\uff46\027\uff46\030\uff46" +
    "\031\uff46\032\uff46\042\uff46\046\uff46\062\uff46\001\002\000" +
    "\024\006\220\024\054\026\176\027\050\030\211\031\055" +
    "\042\051\046\216\062\221\001\002\000\004\032\u0152\001" +
    "\002\000\006\032\uff81\041\uff61\001\002\000\010\032\uff7f" +
    "\060\uff1a\061\uff1a\001\002\000\010\032\uff80\060\uff1b\061" +
    "\uff1b\001\002\000\010\032\uff83\060\uff1f\061\uff1f\001\002" +
    "\000\020\032\uff84\034\061\041\062\042\060\044\064\060" +
    "\uff20\061\uff20\001\002\000\012\032\uff82\041\uff60\060\uff1e" +
    "\061\uff1e\001\002\000\102\006\uff85\007\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\026\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\036\uff85\041\uff85\042\uff85" +
    "\046\uff85\050\uff85\051\uff85\052\uff85\053\uff85\055\uff85\056" +
    "\uff85\057\uff85\062\uff85\001\002\000\004\045\u0154\001\002" +
    "\000\010\006\352\024\230\046\353\001\002\000\004\032" +
    "\u0158\001\002\000\004\032\u0157\001\002\000\026\006\uff40" +
    "\024\uff40\026\uff40\027\uff40\030\uff40\031\uff40\032\uff40\042" +
    "\uff40\046\uff40\062\uff40\001\002\000\026\006\uff3f\024\uff3f" +
    "\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f\042\uff3f\046" +
    "\uff3f\062\uff3f\001\002\000\006\032\u0172\041\uff61\001\002" +
    "\000\012\024\u015e\041\152\042\117\047\uff3b\001\002\000" +
    "\012\024\uff3d\041\uff3d\042\uff3d\047\uff3d\001\002\000\004" +
    "\047\uff3c\001\002\000\004\047\u0170\001\002\000\012\034" +
    "\u0161\041\u0162\042\u015f\044\u0164\001\002\000\006\042\u016d" +
    "\045\u016e\001\002\000\006\032\uff57\047\uff57\001\002\000" +
    "\004\045\u016b\001\002\000\006\041\u0167\045\u0168\001\002" +
    "\000\006\032\uff58\047\uff58\001\002\000\004\045\u0165\001" +
    "\002\000\012\024\054\027\050\042\051\046\066\001\002" +
    "\000\016\032\uff54\034\061\041\062\042\060\044\064\047" +
    "\uff54\001\002\000\006\032\uff5c\047\uff5c\001\002\000\024" +
    "\006\220\024\054\026\176\027\050\030\211\031\055\042" +
    "\051\046\216\062\221\001\002\000\012\032\uff52\047\uff52" +
    "\060\uff1f\061\uff1f\001\002\000\022\032\uff53\034\061\041" +
    "\062\042\060\044\064\047\uff53\060\uff20\061\uff20\001\002" +
    "\000\012\024\054\027\050\042\051\046\066\001\002\000" +
    "\016\032\uff55\034\061\041\062\042\060\044\064\047\uff55" +
    "\001\002\000\006\032\uff5b\047\uff5b\001\002\000\012\024" +
    "\054\027\050\042\051\046\066\001\002\000\016\032\uff56" +
    "\034\061\041\062\042\060\044\064\047\uff56\001\002\000" +
    "\004\035\156\001\002\000\062\007\uff4e\010\uff4e\011\uff4e" +
    "\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020" +
    "\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e\036\uff4e\041\uff4e" +
    "\042\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e\055\uff4e\056" +
    "\uff4e\057\uff4e\001\002\000\012\024\uff3e\041\uff3e\042\uff3e" +
    "\047\uff3e\001\002\000\004\045\u0174\001\002\000\012\024" +
    "\054\027\050\042\051\046\066\001\002\000\014\032\u0176" +
    "\034\061\041\062\042\060\044\064\001\002\000\026\006" +
    "\uff49\024\uff49\026\uff49\027\uff49\030\uff49\031\uff49\032\uff49" +
    "\042\uff49\046\uff49\062\uff49\001\002\000\004\045\u0178\001" +
    "\002\000\024\006\220\024\250\026\176\027\050\030\211" +
    "\031\055\042\051\046\255\062\221\001\002\000\010\032" +
    "\u017c\060\uff1f\061\uff1f\001\002\000\004\032\u017b\001\002" +
    "\000\026\006\uff47\024\uff47\026\uff47\027\uff47\030\uff47\031" +
    "\uff47\032\uff47\042\uff47\046\uff47\062\uff47\001\002\000\026" +
    "\006\uff48\024\uff48\026\uff48\027\uff48\030\uff48\031\uff48\032" +
    "\uff48\042\uff48\046\uff48\062\uff48\001\002\000\004\045\u017e" +
    "\001\002\000\024\006\220\024\250\026\176\027\050\030" +
    "\211\031\055\042\051\046\255\062\221\001\002\000\006" +
    "\032\u0182\041\uff61\001\002\000\004\032\u0181\001\002\000" +
    "\026\006\uff43\024\uff43\026\uff43\027\uff43\030\uff43\031\uff43" +
    "\032\uff43\042\uff43\046\uff43\062\uff43\001\002\000\026\006" +
    "\uff44\024\uff44\026\uff44\027\uff44\030\uff44\031\uff44\032\uff44" +
    "\042\uff44\046\uff44\062\uff44\001\002\000\004\045\u0184\001" +
    "\002\000\010\006\u0185\024\230\046\u0188\001\002\000\004" +
    "\022\305\001\002\000\004\032\u018a\001\002\000\004\032" +
    "\u0189\001\002\000\010\006\u0185\024\230\046\u0188\001\002" +
    "\000\026\006\uff41\024\uff41\026\uff41\027\uff41\030\uff41\031" +
    "\uff41\032\uff41\042\uff41\046\uff41\062\uff41\001\002\000\026" +
    "\006\uff42\024\uff42\026\uff42\027\uff42\030\uff42\031\uff42\032" +
    "\uff42\042\uff42\046\uff42\062\uff42\001\002\000\004\045\u018c" +
    "\001\002\000\012\024\054\027\050\042\051\046\066\001" +
    "\002\000\014\032\u018e\034\061\041\062\042\060\044\064" +
    "\001\002\000\026\006\uff4a\024\uff4a\026\uff4a\027\uff4a\030" +
    "\uff4a\031\uff4a\032\uff4a\042\uff4a\046\uff4a\062\uff4a\001\002" +
    "\000\004\024\u0194\001\002\000\026\006\220\024\054\026" +
    "\176\027\050\030\211\031\055\042\051\046\216\047\uff37" +
    "\062\221\001\002\000\004\047\u0192\001\002\000\004\032" +
    "\u0193\001\002\000\062\007\uff3a\010\uff3a\011\uff3a\012\uff3a" +
    "\013\uff3a\014\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021" +
    "\uff3a\022\uff3a\023\uff3a\024\uff3a\036\uff3a\041\uff3a\042\uff3a" +
    "\050\uff3a\051\uff3a\052\uff3a\053\uff3a\055\uff3a\056\uff3a\057" +
    "\uff3a\001\002\000\010\032\ufffb\033\ufffb\046\ufffb\001\002" +
    "\000\006\032\uffeb\040\u0196\001\002\000\004\024\045\001" +
    "\002\000\006\032\uffe4\040\uffe4\001\002\000\004\024\u0199" +
    "\001\002\000\006\032\uff59\047\uff59\001\002\000\034\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7\036\uffb7\001" +
    "\002\000\004\024\u01a0\001\002\000\026\006\220\024\054" +
    "\026\176\027\050\030\211\031\055\042\051\046\216\047" +
    "\uff37\062\221\001\002\000\004\047\u019e\001\002\000\004" +
    "\032\u019f\001\002\000\062\007\uff39\010\uff39\011\uff39\012" +
    "\uff39\013\uff39\014\uff39\015\uff39\016\uff39\017\uff39\020\uff39" +
    "\021\uff39\022\uff39\023\uff39\024\uff39\036\uff39\041\uff39\042" +
    "\uff39\050\uff39\051\uff39\052\uff39\053\uff39\055\uff39\056\uff39" +
    "\057\uff39\001\002\000\010\032\ufffa\033\ufffa\046\ufffa\001" +
    "\002\000\006\032\uffd9\040\uffd9\001\002\000\006\032\uffe8" +
    "\040\u01a7\001\002\000\010\032\uffd6\040\uffd6\045\u01a4\001" +
    "\002\000\010\024\230\031\055\046\u0147\001\002\000\006" +
    "\032\uffd7\040\uffd7\001\002\000\006\032\uffd8\040\uffd8\001" +
    "\002\000\004\024\u01a3\001\002\000\006\032\uffda\040\uffda" +
    "\001\002\000\006\040\uff98\047\uff98\001\002\000\006\040" +
    "\uff95\047\uff95\001\002\000\034\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\025\uffc2\036\uffc2\001\002\000\024\015\074" +
    "\016\101\017\100\020\105\021\076\022\075\023\102\040" +
    "\uff96\047\uff96\001\002\000\006\040\106\047\u01ae\001\002" +
    "\000\004\035\u01af\001\002\000\054\007\u01b2\011\005\012" +
    "\007\013\013\014\015\015\120\016\116\017\145\020\112" +
    "\021\134\022\126\023\146\024\113\036\u01b0\041\152\042" +
    "\117\050\122\051\140\052\151\053\131\055\136\001\002" +
    "\000\034\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\025\uff99" +
    "\036\uff99\001\002\000\054\007\u01b6\011\005\012\007\013" +
    "\013\014\015\015\120\016\116\017\145\020\112\021\134" +
    "\022\126\023\146\024\113\036\u01b5\041\152\042\117\050" +
    "\122\051\140\052\151\053\131\055\136\001\002\000\004" +
    "\032\u01b3\001\002\000\004\036\u01b4\001\002\000\034\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\025\uff9a\036\uff9a\001" +
    "\002\000\034\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\025" +
    "\uff9b\036\uff9b\001\002\000\004\032\u01b7\001\002\000\004" +
    "\036\u01b8\001\002\000\034\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\025\uff9c\036\uff9c\001\002\000\034\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\025\uffc5\036\uffc5\001\002\000" +
    "\034\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\036" +
    "\ufff1\001\002\000\004\002\ufff3\001\002\000\024\015\074" +
    "\016\101\017\100\020\105\021\076\022\075\023\102\040" +
    "\uff96\047\uff96\001\002\000\006\040\106\047\u01be\001\002" +
    "\000\004\035\u01c0\001\002\000\034\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\025\uffbf\036\uffbf\001\002\000\052\007" +
    "\u01c3\011\005\012\007\013\013\014\015\015\120\016\116" +
    "\017\145\020\112\021\134\022\126\023\146\024\113\041" +
    "\152\042\117\050\122\051\140\052\151\053\131\055\136" +
    "\001\002\000\052\007\u01c3\011\005\012\007\013\013\014" +
    "\015\015\120\016\116\017\145\020\112\021\134\022\126" +
    "\023\146\024\113\041\152\042\117\050\122\051\140\052" +
    "\151\053\131\055\136\001\002\000\004\036\u01c8\001\002" +
    "\000\024\006\220\024\250\026\176\027\050\030\211\031" +
    "\055\042\051\046\255\062\221\001\002\000\004\036\u01c5" +
    "\001\002\000\034\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\025\uffb3\036\uffb3\001\002\000\004\032\u01c7\001\002\000" +
    "\004\036\ufef8\001\002\000\034\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\025\uffb5\036\uffb5\001\002\000\004\036\u01cc" +
    "\001\002\000\004\036\u01cb\001\002\000\034\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\025\uffb4\036\uffb4\001\002\000" +
    "\034\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\036" +
    "\uffb6\001\002\000\024\015\074\016\101\017\100\020\105" +
    "\021\076\022\075\023\102\040\uff96\047\uff96\001\002\000" +
    "\006\040\106\047\u01cf\001\002\000\004\035\u01d1\001\002" +
    "\000\034\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd" +
    "\036\uffbd\001\002\000\052\007\u01d4\011\005\012\007\013" +
    "\013\014\015\015\120\016\116\017\145\020\112\021\134" +
    "\022\126\023\146\024\113\041\152\042\117\050\122\051" +
    "\140\052\151\053\131\055\136\001\002\000\052\007\u01d4" +
    "\011\005\012\007\013\013\014\015\015\120\016\116\017" +
    "\145\020\112\021\134\022\126\023\146\024\113\041\152" +
    "\042\117\050\122\051\140\052\151\053\131\055\136\001" +
    "\002\000\004\036\u01d7\001\002\000\024\006\220\024\250" +
    "\026\176\027\050\030\211\031\055\042\051\046\255\062" +
    "\221\001\002\000\004\036\u01d6\001\002\000\034\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\025\uffab\036\uffab\001\002" +
    "\000\034\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\025\uffad" +
    "\036\uffad\001\002\000\004\036\u01db\001\002\000\004\036" +
    "\u01da\001\002\000\034\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\025\uffac\036\uffac\001\002\000\034\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\025\uffae\036\uffae\001\002\000\024" +
    "\015\074\016\101\017\100\020\105\021\076\022\075\023" +
    "\102\040\uff96\047\uff96\001\002\000\006\040\106\047\u01de" +
    "\001\002\000\004\035\u01e0\001\002\000\034\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\025\uffbc\036\uffbc\001\002\000" +
    "\052\007\u01e4\011\005\012\007\013\013\014\015\015\120" +
    "\016\116\017\145\020\112\021\134\022\126\023\146\024" +
    "\113\041\152\042\117\050\122\051\140\052\151\053\131" +
    "\055\136\001\002\000\004\036\u01f2\001\002\000\052\007" +
    "\u01e4\011\005\012\007\013\013\014\015\015\120\016\116" +
    "\017\145\020\112\021\134\022\126\023\146\024\113\041" +
    "\152\042\117\050\122\051\140\052\151\053\131\055\136" +
    "\001\002\000\004\036\u01e9\001\002\000\024\006\220\024" +
    "\250\026\176\027\050\030\211\031\055\042\051\046\255" +
    "\062\221\001\002\000\004\036\u01e8\001\002\000\004\036" +
    "\u01e7\001\002\000\034\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\025\uffa5\036\uffa5\001\002\000\034\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\025\uffa3\036\uffa3\001\002\000\034" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\036\uffa9" +
    "\001\002\000\004\036\u01f1\001\002\000\004\036\u01f0\001" +
    "\002\000\004\036\u01ef\001\002\000\004\036\u01ee\001\002" +
    "\000\034\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\025\uffa6" +
    "\036\uffa6\001\002\000\034\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\025\uffa4\036\uffa4\001\002\000\034\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\025\uffaa\036\uffaa\001\002\000" +
    "\034\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\025\uffa8\036" +
    "\uffa8\001\002\000\034\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\025\uffa7\036\uffa7\001\002\000\024\015\074\016\101" +
    "\017\100\020\105\021\076\022\075\023\102\040\uff96\047" +
    "\uff96\001\002\000\006\040\106\047\u01f5\001\002\000\004" +
    "\035\u01f7\001\002\000\034\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\025\uffbb\036\uffbb\001\002\000\054\007\u01fb\011" +
    "\005\012\007\013\013\014\015\015\120\016\116\017\145" +
    "\020\112\021\134\022\126\023\146\024\113\036\u01f8\041" +
    "\152\042\117\050\122\051\140\052\151\053\131\055\136" +
    "\001\002\000\034\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\025\uff9d\036\uff9d\001\002\000\054\007\u01fb\011\005\012" +
    "\007\013\013\014\015\015\120\016\116\017\145\020\112" +
    "\021\134\022\126\023\146\024\113\036\u0200\041\152\042" +
    "\117\050\122\051\140\052\151\053\131\055\136\001\002" +
    "\000\004\036\u01ff\001\002\000\010\006\352\024\230\046" +
    "\353\001\002\000\004\036\u01fd\001\002\000\034\011\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f\036\uff9f\001\002" +
    "\000\004\032\332\001\002\000\034\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\025\uffa1\036\uffa1\001\002\000\034\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\023\uff9e\025\uff9e\036\uff9e\001" +
    "\002\000\004\036\u0204\001\002\000\004\036\u0203\001\002" +
    "\000\034\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\025\uffa0" +
    "\036\uffa0\001\002\000\034\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\025\uffa2\036\uffa2\001\002\000\024\015\074\016" +
    "\101\017\100\020\105\021\076\022\075\023\102\040\uff96" +
    "\047\uff96\001\002\000\006\040\106\047\u0207\001\002\000" +
    "\004\035\u0209\001\002\000\034\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\025\uffbe\036\uffbe\001\002\000\052\007\u020d" +
    "\011\005\012\007\013\013\014\015\015\120\016\116\017" +
    "\145\020\112\021\134\022\126\023\146\024\113\041\152" +
    "\042\117\050\122\051\140\052\151\053\131\055\136\001" +
    "\002\000\004\036\u0213\001\002\000\052\007\u020d\011\005" +
    "\012\007\013\013\014\015\015\120\016\116\017\145\020" +
    "\112\021\134\022\126\023\146\024\113\041\152\042\117" +
    "\050\122\051\140\052\151\053\131\055\136\001\002\000" +
    "\004\036\u020e\001\002\000\010\024\230\031\055\046\u0147" +
    "\001\002\000\034\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\025\uffb1\036\uffb1\001\002\000\004\036\u0212\001\002\000" +
    "\004\036\u0211\001\002\000\034\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\025\uffb2\036\uffb2\001\002\000\034\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\036\uffb0\001\002" +
    "\000\034\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf" +
    "\036\uffaf\001\002\000\024\015\074\016\101\017\100\020" +
    "\105\021\076\022\075\023\102\040\uff96\047\uff96\001\002" +
    "\000\006\040\106\047\u0216\001\002\000\004\035\111\001" +
    "\002\000\034\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\036\uffc1\001\002\000\064\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\036\uffec" +
    "\041\uffec\042\uffec\050\uffec\051\uffec\052\uffec\053\uffec\055" +
    "\uffec\056\uffec\057\uffec\001\002\000\004\002\ufff9\001\002" +
    "\000\004\032\u021f\001\002\000\006\032\ufffc\033\u021d\001" +
    "\002\000\004\033\u019b\001\002\000\006\024\u0194\034\u021e" +
    "\001\002\000\004\032\ufffd\001\002\000\014\005\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u021f\000\014\002\005\003\003\006\010\007\013\010" +
    "\011\001\001\000\010\006\010\007\u0220\010\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\u0219\005\u021a\001\001\000\004\010\u0218\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\034\011\032\012\025\013\024\014\020\031\035\032" +
    "\021\033\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u0194\016\041\001\001\000\006\021\u01a1\022" +
    "\u01a0\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\346\030\345\001\001\000\006\025\u0123\026\u0122\001" +
    "\001\000\006\023\u0116\024\u0115\001\001\000\006\017\361" +
    "\020\360\001\001\000\020\006\034\012\u01b9\013\024\014" +
    "\020\031\035\032\021\033\036\001\001\000\002\001\001" +
    "\000\010\014\u0133\032\u01b8\033\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u01aa\001\001\000\006" +
    "\015\042\016\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\103\044\076\045\102\001\001\000\002" +
    "\001\001\000\006\053\051\056\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\072\001\001\000\002" +
    "\001\001\000\006\053\056\056\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\070\001\001\000\004\053\067\001\001\000" +
    "\004\053\066\001\001\000\002\001\001\000\004\053\064" +
    "\001\001\000\002\001\001\000\004\053\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\u01a8\045\102" +
    "\001\001\000\004\034\107\001\001\000\002\001\001\000" +
    "\046\005\120\006\122\013\126\014\020\046\123\047\132" +
    "\050\146\065\141\066\136\067\127\072\114\073\140\100" +
    "\143\104\147\105\124\106\131\131\142\133\113\001\001" +
    "\000\006\021\u01a1\022\u01a0\001\001\000\006\070\u0162\071" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\042\016\041\001\001\000\002\001\001\000\006\015" +
    "\u0194\016\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u0133\001\001\000\044\005\120\006\122\013" +
    "\126\014\020\047\335\050\146\065\141\066\136\067\127" +
    "\072\114\073\140\100\143\104\147\105\124\106\131\131" +
    "\u0130\133\u012f\001\001\000\002\001\001\000\006\025\u0123" +
    "\026\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\u0116\024\u0115\001\001\000\006\053\u0114\056\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\361\020\360\001\001\000\006" +
    "\027\346\030\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\124\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\005" +
    "\120\006\122\013\126\014\020\046\163\047\132\050\146" +
    "\065\141\066\136\067\127\072\114\073\140\100\143\104" +
    "\147\105\124\106\131\125\171\126\173\127\162\131\170" +
    "\132\166\133\156\134\172\135\157\136\167\137\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\005\120\006" +
    "\122\013\126\014\020\047\335\050\146\065\141\066\136" +
    "\067\127\072\114\073\140\100\143\104\147\105\124\106" +
    "\131\126\336\127\162\131\170\132\166\133\156\134\172" +
    "\135\157\136\167\137\160\001\001\000\044\053\211\054" +
    "\207\055\204\056\214\057\201\060\205\061\206\062\202" +
    "\063\221\064\176\114\216\115\212\116\200\117\203\120" +
    "\177\121\213\123\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\053\261\054\246\055\257\056\263\057\242\060\244" +
    "\061\260\062\256\063\264\064\176\114\216\115\262\116" +
    "\255\117\203\120\177\121\252\123\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\052\226\060\225\121\224\122\231\123\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\052\234" +
    "\053\250\054\246\055\204\056\253\057\242\060\244\061" +
    "\245\062\243\063\221\064\176\114\216\115\251\116\200" +
    "\117\203\120\177\121\252\123\222\001\001\000\002\001" +
    "\001\000\014\052\226\060\225\121\224\122\231\123\232" +
    "\001\001\000\012\052\234\060\235\121\236\123\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\052\234\053\261\054\246\055\257\056\263\057" +
    "\242\060\244\061\260\062\256\063\264\064\176\114\216" +
    "\115\262\116\255\117\203\120\177\121\252\123\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\053\250\054\246" +
    "\055\204\056\253\057\242\060\205\061\245\062\243\063" +
    "\221\064\267\114\216\115\212\116\200\117\203\120\177" +
    "\121\213\123\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\053\250\054\246\055\204\056\253\057\242" +
    "\060\205\061\245\062\243\063\221\064\271\114\216\115" +
    "\212\116\200\117\203\120\177\121\213\123\222\001\001" +
    "\000\002\001\001\000\044\053\250\054\246\055\204\056" +
    "\253\057\242\060\205\061\245\062\243\063\221\064\176" +
    "\114\216\115\212\116\200\117\274\120\177\121\213\123" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\053\250\054\246\055\204\056\253\057\242\060\205\061" +
    "\245\062\243\063\221\064\176\114\216\115\212\116\200" +
    "\117\276\120\177\121\213\123\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\053\314\054\313\055\204\056\316" +
    "\057\310\060\205\061\312\062\311\063\221\064\176\101" +
    "\315\102\317\103\307\114\216\115\212\116\200\117\203" +
    "\120\177\121\213\123\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\053\314\054\313\055\204" +
    "\056\316\057\310\060\205\061\312\062\311\063\221\064" +
    "\176\103\321\114\216\115\212\116\200\117\203\120\177" +
    "\121\213\123\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\053\250\054\246" +
    "\055\204\056\253\057\242\060\205\061\245\062\243\063" +
    "\221\064\176\114\216\115\212\116\200\117\203\120\334" +
    "\121\213\123\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\053\250\054\246\055\204\056\253\057\342\060" +
    "\205\061\245\062\243\063\221\064\176\114\216\115\212" +
    "\116\200\117\203\120\177\121\213\123\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\353\062\354\001\001\000\002\001\001\000\006\052\234" +
    "\062\355\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\052\365\053\250\054\364\055\204\056\253\057\242" +
    "\060\205\061\245\062\243\063\221\064\176\114\216\115" +
    "\212\116\200\117\203\120\177\121\213\123\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\053\250\054\246\055\204\056\253\057\373\060" +
    "\205\061\245\062\243\063\221\064\176\114\216\115\212" +
    "\116\200\117\203\120\177\121\213\123\222\001\001\000" +
    "\002\001\001\000\004\124\375\001\001\000\002\001\001" +
    "\000\046\053\u0101\054\u0100\055\204\056\u0102\057\242\060" +
    "\205\061\245\062\243\063\221\064\176\113\377\114\216" +
    "\115\212\116\200\117\203\120\177\121\213\123\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\107\u0107\110" +
    "\u0108\111\u0109\112\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\111\u010f\112\u010e\001" +
    "\001\000\002\001\001\000\046\053\u0101\054\u0100\055\204" +
    "\056\u0102\057\242\060\205\061\245\062\243\063\221\064" +
    "\176\113\u010b\114\216\115\212\116\200\117\203\120\177" +
    "\121\213\123\222\001\001\000\002\001\001\000\066\005" +
    "\120\006\122\013\126\014\020\046\163\047\132\050\146" +
    "\065\141\066\136\067\127\072\114\073\140\100\143\104" +
    "\147\105\124\106\131\125\u010d\126\173\127\162\131\170" +
    "\132\166\133\156\134\172\135\157\136\167\137\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\005\120\006\122\013\126\014" +
    "\020\046\163\047\132\050\146\065\141\066\136\067\127" +
    "\072\114\073\140\100\143\104\147\105\124\106\131\125" +
    "\u0112\126\173\127\162\131\170\132\166\133\156\134\172" +
    "\135\157\136\167\137\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\053\250\054\246\055\204\056\253\057" +
    "\u0119\060\205\061\245\062\243\063\221\064\176\114\216" +
    "\115\212\116\200\117\203\120\177\121\213\123\222\001" +
    "\001\000\004\052\u011b\001\001\000\002\001\001\000\004" +
    "\052\234\001\001\000\002\001\001\000\004\024\u011d\001" +
    "\001\000\002\001\001\000\044\053\250\054\246\055\204" +
    "\056\253\057\u011f\060\205\061\245\062\243\063\221\064" +
    "\176\114\216\115\212\116\200\117\203\120\177\121\213" +
    "\123\222\001\001\000\002\001\001\000\004\124\u0121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\052\u0127\061\u0126\062\u0129\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\052\234" +
    "\061\u012a\062\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u012c\001\001\000\002\001\001\000\004" +
    "\124\u012e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\u013c\074\u013e\075" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\053\250" +
    "\054\246\055\204\056\253\057\u0158\060\205\061\245\062" +
    "\243\063\221\064\176\076\u0159\114\216\115\212\116\200" +
    "\117\203\120\177\121\213\123\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\u0145\056\u0144\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\234\056\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\051\u014a\053\u014f\054" +
    "\u014e\055\204\056\u0150\057\u014b\060\205\061\u014d\062\u014c" +
    "\063\221\064\176\114\216\115\212\116\200\117\203\120" +
    "\177\121\213\123\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\u0154\062\u0155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\065\u015b\066\136\067" +
    "\127\077\u015c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\070\u0162\071\u015f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\u0165\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\053\u0169\054\u0168\055\204\056\253\057\242\060\205\061" +
    "\245\062\243\063\221\064\176\114\216\115\212\116\200" +
    "\117\203\120\177\121\213\123\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\u016b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\u016e\001\001\000" +
    "\002\001\001\000\004\124\u0170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\052\u0179\053\250\054\u0178\055\204\056\253\057" +
    "\242\060\205\061\245\062\243\063\221\064\176\114\216" +
    "\115\212\116\200\117\203\120\177\121\213\123\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\052\u017f\053" +
    "\250\054\246\055\204\056\253\057\u017e\060\205\061\245" +
    "\062\243\063\221\064\176\114\216\115\212\116\200\117" +
    "\203\120\177\121\213\123\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\u0186\061\u0185\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\234\061\u012a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\u018c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\053\314" +
    "\054\313\055\204\056\316\057\310\060\205\061\312\062" +
    "\311\063\221\064\176\101\u0190\102\317\103\307\114\216" +
    "\115\212\116\200\117\203\120\177\121\213\123\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u0196\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\053\314\054" +
    "\313\055\204\056\316\057\310\060\205\061\312\062\311" +
    "\063\221\064\176\101\u019c\102\317\103\307\114\216\115" +
    "\212\116\200\117\203\120\177\121\213\123\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\u01a5\056\u01a4\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u01a7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\u01ac\044\076\045\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\120\006\122\013" +
    "\126\014\020\046\u01b0\047\132\050\146\065\141\066\136" +
    "\067\127\072\114\073\140\100\143\104\147\105\124\106" +
    "\131\001\001\000\002\001\001\000\040\005\120\006\122" +
    "\013\126\014\020\047\335\050\146\065\141\066\136\067" +
    "\127\072\114\073\140\100\143\104\147\105\124\106\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\043\u01bc\044\076\045\102\001\001" +
    "\000\002\001\001\000\004\035\u01be\001\001\000\002\001" +
    "\001\000\046\005\120\006\122\013\126\014\020\046\u01c0" +
    "\047\132\050\146\065\141\066\136\067\127\072\114\073" +
    "\140\100\143\104\147\105\124\106\131\130\u01c1\132\u01c3" +
    "\001\001\000\044\005\120\006\122\013\126\014\020\047" +
    "\335\050\146\065\141\066\136\067\127\072\114\073\140" +
    "\100\143\104\147\105\124\106\131\130\u01c8\132\u01c9\001" +
    "\001\000\002\001\001\000\046\052\u01c5\053\250\054\207" +
    "\055\204\056\253\057\242\060\205\061\245\062\243\063" +
    "\221\064\176\114\216\115\212\116\200\117\203\120\177" +
    "\121\213\123\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\043\u01cd\044\076\045\102\001\001" +
    "\000\002\001\001\000\004\037\u01cf\001\001\000\002\001" +
    "\001\000\046\005\120\006\122\013\126\014\020\046\u01d1" +
    "\047\132\050\146\065\141\066\136\067\127\072\114\073" +
    "\140\100\143\104\147\105\124\106\131\130\u01d2\134\u01d4" +
    "\001\001\000\044\005\120\006\122\013\126\014\020\047" +
    "\335\050\146\065\141\066\136\067\127\072\114\073\140" +
    "\100\143\104\147\105\124\106\131\130\u01d7\134\u01d8\001" +
    "\001\000\002\001\001\000\046\052\u01c5\053\250\054\246" +
    "\055\204\056\253\057\201\060\205\061\245\062\243\063" +
    "\221\064\176\114\216\115\212\116\200\117\203\120\177" +
    "\121\213\123\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\043\u01dc\044" +
    "\076\045\102\001\001\000\002\001\001\000\004\040\u01de" +
    "\001\001\000\002\001\001\000\052\005\120\006\122\013" +
    "\126\014\020\046\u01e1\047\132\050\146\065\141\066\136" +
    "\067\127\072\114\073\140\100\143\104\147\105\124\106" +
    "\131\130\u01e2\132\u01e4\135\u01e0\136\u01e5\001\001\000\002" +
    "\001\001\000\050\005\120\006\122\013\126\014\020\047" +
    "\335\050\146\065\141\066\136\067\127\072\114\073\140" +
    "\100\143\104\147\105\124\106\131\130\u01ea\132\u01eb\135" +
    "\u01e9\136\u01ec\001\001\000\002\001\001\000\046\052\u01c5" +
    "\053\250\054\207\055\204\056\253\057\242\060\205\061" +
    "\206\062\202\063\221\064\176\114\216\115\212\116\200" +
    "\117\203\120\177\121\213\123\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\u01f3\044\076\045\102\001\001\000\002" +
    "\001\001\000\004\041\u01f5\001\001\000\002\001\001\000" +
    "\046\005\120\006\122\013\126\014\020\046\u01f8\047\132" +
    "\050\146\065\141\066\136\067\127\072\114\073\140\100" +
    "\143\104\147\105\124\106\131\130\u01f9\136\u01fb\001\001" +
    "\000\002\001\001\000\044\005\120\006\122\013\126\014" +
    "\020\047\335\050\146\065\141\066\136\067\127\072\114" +
    "\073\140\100\143\104\147\105\124\106\131\130\u0200\136" +
    "\u0201\001\001\000\002\001\001\000\006\052\u01c5\062\u01fd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\u0205\044\076\045\102\001\001\000\002\001\001" +
    "\000\004\036\u0207\001\001\000\002\001\001\000\046\005" +
    "\120\006\122\013\126\014\020\046\u020a\047\132\050\146" +
    "\065\141\066\136\067\127\072\114\073\140\100\143\104" +
    "\147\105\124\106\131\130\u020b\133\u0209\001\001\000\002" +
    "\001\001\000\044\005\120\006\122\013\126\014\020\047" +
    "\335\050\146\065\141\066\136\067\127\072\114\073\140" +
    "\100\143\104\147\105\124\106\131\130\u020f\133\u020e\001" +
    "\001\000\002\001\001\000\006\052\u01c5\056\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\043\u0214\044\076\045\102\001\001\000\002\001\001\000" +
    "\004\034\u0216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/*código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    */
    public Parser(Lexer lexer){/*nuevo constructor*/
        super(lexer);        
    }    
    
    /*protected int error_sync_size(){
        return 1;
    }*//*para que establezca que con un token bien leido basta para recuperarse...   */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= imports clase 
            {
              Object RESULT =null;
		System.out.println("clase con imports analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= clase 
            {
              Object RESULT =null;
		System.out.println("clase analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // imports ::= IIMPORT iimport PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("estructura: import completada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // iimport ::= direccion PUNTO ASTERISCO 
            {
              Object RESULT =null;
		System.out.println("estructura: direccion [con *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // iimport ::= direccion 
            {
              Object RESULT =null;
		System.out.println("estructura: direccion [sin *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // direccion ::= direccion PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: direccion: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // direccion ::= NOMBRE PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: direccion: PAREJA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clase ::= visibilidad def_clase 
            {
              Object RESULT =null;
		System.out.println("estructura: CLASE [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clase ::= def_clase 
            {
              Object RESULT =null;
		System.out.println("estructura: CLASE [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;
		System.out.println("visibilidad: PUBLIC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;
		System.out.println("visibilidad: PROTECTED");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;
		System.out.println("visibilidad: PRIVATE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // visibilidad ::= FINAL 
            {
              Object RESULT =null;
		System.out.println("visibilidad: FINAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_clase ::= CLASS OBJETO LLAVE_A bloque_clase LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_clase: CB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_clase ::= CLASS OBJETO LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_clase: SB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque_clase ::= bloque_clase sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("bloque clases: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_clase ::= sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("bloque clases: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencias_clase ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("sentencia clases: def_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias_clase ::= def_metodo 
            {
              Object RESULT =null;
		System.out.println("sentencia clases: def_metodo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_variable ::= visibilidad def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("estructura: def_variable [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_variable ::= def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("estructura: def_variable [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_tipo_variable ::= INT creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("estructura: def_tipoVar [INT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_tipo_variable ::= DOUBLE creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("estructura: def_tipoVar [DOUBLE]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_tipo_variable ::= STRING creacion_variable_string 
            {
              Object RESULT =null;
		System.out.println("estructura: def_tipoVar [STRING]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_tipo_variable ::= CHAR creacion_variable_char 
            {
              Object RESULT =null;
		System.out.println("estructura: def_tipoVar [CHAR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_tipo_variable ::= BOOLEAN creacion_variable_boolean 
            {
              Object RESULT =null;
		System.out.println("estructura: def_tipoVar [BOOLEAN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_tipo_variable ::= OBJECT creacion_variable_object 
            {
              Object RESULT =null;
		System.out.println("estructura: def_tipoVar [OBJECT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // def_tipo_variable ::= OBJETO creacion_variable_objeto 
            {
              Object RESULT =null;
		System.out.println("estructura: def_tipoVar [OBJETO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // creacion_variable_numero ::= creacion_variable_numero COMA variable_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_numero: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // creacion_variable_numero ::= variable_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_numero: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable_numero ::= NOMBRE IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_numero: cont#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable_numero ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_numero: contChar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable_numero ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_numero: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // creacion_variable_string ::= creacion_variable_string COMA variable_string 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_string: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacion_variable_string ::= variable_string 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_string: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable_string ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_string: contVar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable_string ::= NOMBRE IGUAL contenido_string 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_string: contString");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_string ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_string: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // creacion_variable_char ::= creacion_variable_char COMA variable_char 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_char: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creacion_variable_char ::= variable_char 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_char: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_char ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_char: contVar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable_char ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_char: contChar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable_char ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_char: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creacion_variable_boolean ::= creacion_variable_boolean COMA variable_boolean 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_boolean: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creacion_variable_boolean ::= variable_boolean 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_boolean: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable_boolean ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_boolean: contVar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_boolean ::= NOMBRE contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_boolean: contBool");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_boolean ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_boolean: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // creacion_variable_object ::= creacion_variable_object COMA variable_object 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_object: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // creacion_variable_object ::= variable_object 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_object: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_object ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_object: contVar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_object ::= NOMBRE IGUAL contenido_object 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_object: contObject");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_object ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_object: contObjetO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable_object ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_object: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // creacion_variable_objeto ::= creacion_variable_objeto COMA variable_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_objetO: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // creacion_variable_objeto ::= variable_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: creacion_var_objetO: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_objeto ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_objetO: contVar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_objeto ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_objetO: conObjeto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable_objeto ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: variable_objetO: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // def_metodo ::= visibilidad cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("estructura: def_metodo [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // def_metodo ::= cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("estructura: def_metodo [invisible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpo_def_metodo ::= def_metodo_tipo 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_TIPO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo_def_metodo ::= VOID def_metodo_void 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_VOID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // def_metodo_tipo ::= INT PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_tipo: INT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // def_metodo_tipo ::= DOUBLE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_tipo: DOUBLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // def_metodo_tipo ::= STRING PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_string 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_tipo: STRING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // def_metodo_tipo ::= CHAR PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_char 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_tipo: CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // def_metodo_tipo ::= BOOLEAN PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_boolean 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_tipo: BOOLEAN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // def_metodo_tipo ::= OBJECT PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_object 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_tipo: OBJECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // def_metodo_tipo ::= OBJETO PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_tipo: OBJETO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_# [CB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpo_metodo_numero ::= LLAVE_A retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_# [SB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_# [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cuerpo_metodo_numero ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_# [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_string [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_metodo_string ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_string [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_string [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpo_metodo_string ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_string [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpo_metodo_char ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_char [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cuerpo_metodo_char ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_char [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cuerpo_metodo_boolean ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_char [CB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpo_metodo_boolean ::= LLAVE_A retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_char [SB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_object [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpo_metodo_object ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_object [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_object [CB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpo_metodo_object ::= LLAVE_A retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_object [SB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_object [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_metodo_object ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_object [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_object [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo_metodo_object ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_object [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_objeto [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_metodo_objeto ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_objeto [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_objeto [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_metodo_objeto ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_metodo_objeto [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_metodo_objeto ::= LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: no_void [cuerpo_cnstrct [CB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_metodo_objeto ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: no_void [cuerpo_cnstrct [SB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_void [CB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_void [CB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_void [SB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: def_metodo_void [SB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;
		System.out.println("substruct: parametros: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametros ::= parametro 
            {
              Object RESULT =null;
		System.out.println("substruct: parametros: UNICO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros ::= 
            {
              Object RESULT =null;
		System.out.println("substruct: parametros: ninguno");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametro ::= tipo NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: parametro");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo ::= INT 
            {
              Object RESULT =null;
		System.out.println("tipo: INT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		System.out.println("tipo: DOUBLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo ::= STRING 
            {
              Object RESULT =null;
		System.out.println("tipo: STRING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo ::= CHAR 
            {
              Object RESULT =null;
		System.out.println("tipo: CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		System.out.println("tipo: BOOLEAN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipo ::= OBJECT 
            {
              Object RESULT =null;
		System.out.println("tipo: OBJECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo ::= OBJETO 
            {
              Object RESULT =null;
		System.out.println("tipo: OBJETO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // bloque ::= bloque sentencias 
            {
              Object RESULT =null;
		System.out.println("bloque: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // bloque ::= sentencias 
            {
              Object RESULT =null;
		System.out.println("bloque: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencias ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("sentencias bloque: def_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencias ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("sentencias bloque: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencias ::= ciclo 
            {
              Object RESULT =null;
		System.out.println("sentencias bloque: ciclo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencias ::= invocacion 
            {
              Object RESULT =null;
		System.out.println("sentencias bloque: invocacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencias ::= sentencia_control 
            {
              Object RESULT =null;
		System.out.println("sentencias bloque: sentencia_control");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias ::= operacion_unaria PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("sentencias bloque: operacion_unaria");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // asignacion ::= NOMBRE IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipos_asignacion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: tipos_asig: cont#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipos_asignacion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("substruct: tipos_asig: contS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipos_asignacion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("substruct: tipo_asig: contC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipos_asignacion ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("substruct: tipo_asig: contB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipos_asignacion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("substruct: tipo_asig: contOc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipos_asignacion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: tipo_asig: contO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // contenido_variable ::= PARENTESIS_A contenido_variable PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_var: ( cont_var )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // contenido_variable ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_var: NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // contenido_numero ::= contenido_numero MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_#: MAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // contenido_numero ::= contenido_numero RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_#: RESTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // contenido_numero ::= contenido_numero ASTERISCO contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_#: ASTERISCO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // contenido_numero ::= contenido_numero DIV contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_#: DIV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // contenido_numero ::= RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_#: MENOS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // contenido_numero ::= PARENTESIS_A contenido_numero PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_#: ( cont_# )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // contenido_numero ::= NUMERO 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_#: NUMERO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // contenido_numero ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_#: NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // contenido_string ::= concatenacion 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_S: concat");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // contenido_string ::= strings 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_S: strings");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // strings ::= PARENTESIS_A strings PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: strings: ( strings )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // strings ::= CADENA 
            {
              Object RESULT =null;
		System.out.println("substruct: strings: CADENA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // contenido_char ::= PARENTESIS_A contenido_char PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_C: ( cont_C )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // contenido_char ::= CARACTER 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_C: CARACTER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // contenido_boolean ::= condiciones 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_B: condiciones");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // contenido_boolean ::= booleans 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_B: booleans");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // contenido_boolean ::= contenido_negaciones 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_B: contenido_negaciones");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // booleans ::= PARENTESIS_A booleans PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_C: ( booleans )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleans",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // booleans ::= BOOLEANO 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_C: BOOLEANO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleans",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // contenido_object ::= PARENTESIS_A contenido_object PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_Oc: ( cont_Oc )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // contenido_object ::= NEW OBJECT PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_Oc: NEW Oc()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // contenido_objeto ::= PARENTESIS_A contenido_objeto PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_O: ( cont_O )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // contenido_objeto ::= NEW OBJETO PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_O: NEW O( argucion )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // concatenacion ::= PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: concat: ( concat )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concatenacion",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // concatenacion ::= concatenacion MAS opcion_concatenacion 
            {
              Object RESULT =null;
		System.out.println("substruct: concat: +2 concat ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concatenacion",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // concatenacion ::= opcion_concatenacion MAS opcion_concatenacion 
            {
              Object RESULT =null;
		System.out.println("substruct: concat: 1 concat");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concatenacion",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // opcion_concatenacion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: op_concat: cont_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_concatenacion",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // opcion_concatenacion ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("substruct: op_concat: cont_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_concatenacion",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // opcion_concatenacion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("substruct: op_concat: cont_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_concatenacion",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // opcion_concatenacion ::= strings 
            {
              Object RESULT =null;
		System.out.println("substruct: op_concat: strings");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_concatenacion",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // operacion_unaria ::= incremento 
            {
              Object RESULT =null;
		System.out.println("substruct: op_unaria: INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // operacion_unaria ::= autoincremento 
            {
              Object RESULT =null;
		System.out.println("substruct: op_unaria: AUTO_INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // incremento ::= NOMBRE MAS MAS 
            {
              Object RESULT =null;
		System.out.println("substruct: incre: ++ [der]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // incremento ::= NOMBRE RESTA RESTA 
            {
              Object RESULT =null;
		System.out.println("substruct: incre: -- [der]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // incremento ::= MAS MAS NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: incre: ++ [izq]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // incremento ::= RESTA RESTA NOMBRE 
            {
              Object RESULT =null;
		System.out.println("substruct: incre: -- [izq]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // autoincremento ::= NOMBRE opciones_autoincremento 
            {
              Object RESULT =null;
		System.out.println("substruct: autoincre");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("autoincremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // opciones_autoincremento ::= opciones_autoIncreMas 
            {
              Object RESULT =null;
		System.out.println("substruct: autoincre: +=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // opciones_autoincremento ::= RESTA IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: autoincre: -=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // opciones_autoincremento ::= ASTERISCO IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: autoincre: *=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // opciones_autoincremento ::= DIV IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: autoincre: /=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // opciones_autoIncreMas ::= MAS IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: autoincre: += [val#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // opciones_autoIncreMas ::= MAS IGUAL contenido_string 
            {
              Object RESULT =null;
		System.out.println("substruct: autoincre: += [cnt_string]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ciclo ::= ciclo_for 
            {
              Object RESULT =null;
		System.out.println("estructura: ciclo: FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ciclo ::= WHILE PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("estructura: ciclo: WHILE [contenido_Bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_boolean PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("estructura: ciclo: DO-WHILE [contenido_Bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ciclo_for ::= FOR PARENTESIS_A asignacion_for condiciones_for incremento_for PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // asignacion_for ::= asignacion_completa_for 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion [completa]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // asignacion_for ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion [parcial]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // asignacion_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // asignacion_completa_for ::= INT NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [INT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // asignacion_completa_for ::= DOUBLE NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [DOUBLE]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [STRING-CS]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [STRING-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [CHAR-CC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [CHAR-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [BOOLEAN-CB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [BOOLEAN-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [OBJECT-COc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [OBJETC-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [OBJETO-CO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: asignacion_C [OBJETO-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // condiciones_for ::= contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: condiciones [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // condiciones_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: condiciones [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // incremento_for ::= operacion_unaria 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: incremento [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // incremento_for ::= 
            {
              Object RESULT =null;
		System.out.println("substruct: ciclo_for: incremento [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // invocacion ::= direccion PARENTESIS_A argumentacion PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("estructura: invocacion [externa]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // invocacion ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("estructura: invocacion [interna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // argumentacion ::= argumentos 
            {
              Object RESULT =null;
		System.out.println("substruct: argumentacion [min 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // argumentacion ::= 
            {
              Object RESULT =null;
		System.out.println("substruct: argumentacion [0 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // argumentos ::= argumentos COMA argumento 
            {
              Object RESULT =null;
		System.out.println("substruct: argumentos [+ 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // argumentos ::= argumento 
            {
              Object RESULT =null;
		System.out.println("substruct: argumentos [1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // argumento ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: argumento [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // argumento ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("substruct: argumento [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // argumento ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("substruct: argumento [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // argumento ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("substruct: argumento [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // argumento ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("substruct: argumento [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // argumento ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: argumento [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // sentencia_control ::= sentencia_if 
            {
              Object RESULT =null;
		System.out.println("estructura: IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // sentencia_control ::= sentencia_if ELSE cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("estructura: IF-ELSE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // sentencia_control ::= sentencia_switch 
            {
              Object RESULT =null;
		System.out.println("estructura: SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sentencia_if ::= IF PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("substruct: sentencia_if");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // condiciones ::= multiple_condicion 
            {
              Object RESULT =null;
		System.out.println("substruct: condiciones [multiple]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // condiciones ::= condicion 
            {
              Object RESULT =null;
		System.out.println("substruct: condiciones [pareja o unica]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // multiple_condicion ::= negaciones PARENTESIS_A multiple_condicion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: multiple_condi [! ( MC ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_condicion",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // multiple_condicion ::= PARENTESIS_A multiple_condicion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: multiple_condi [( MC )]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_condicion",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // multiple_condicion ::= multiple_condicion OPERADOR_LOGICO pareja_condiciones 
            {
              Object RESULT =null;
		System.out.println("substruct: multiple_condi [ MC OL parejaC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_condicion",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // multiple_condicion ::= pareja_condiciones OPERADOR_LOGICO pareja_condiciones 
            {
              Object RESULT =null;
		System.out.println("substruct: multiple_condi [parejaC OL parejaC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_condicion",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // pareja_condiciones ::= condicion 
            {
              Object RESULT =null;
		System.out.println("substruct: multiple_condi [parejaC OL parejaC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pareja_condiciones",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // pareja_condiciones ::= contenido_condicion 
            {
              Object RESULT =null;
		System.out.println("substruct: multiple_condi [parejaC OL parejaC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pareja_condiciones",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // condicion ::= PARENTESIS_A condicion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: multiple_condi [parejaC OL parejaC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // condicion ::= contenido_condicion OPERADOR_RELACIONAL contenido_condicion 
            {
              Object RESULT =null;
		System.out.println("substruct: multiple_condi [parejaC OL parejaC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // contenido_condicion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_condi [con_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // contenido_condicion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_condi [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // contenido_condicion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_condi [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // contenido_condicion ::= booleans 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_condi [booleans]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // contenido_condicion ::= contenido_negaciones 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_condi [cont_N]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // contenido_condicion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_condi [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // contenido_condicion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_condi [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // contenido_negaciones ::= PARENTESIS_A contenido_negaciones PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_N [ ( cont_N ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_negaciones",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // contenido_negaciones ::= negaciones contenido_negaciones 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_N [ ! cont_N]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_negaciones",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // contenido_negaciones ::= negaciones opciones_booleanas 
            {
              Object RESULT =null;
		System.out.println("substruct: cont_N [ ! op_booleanas]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_negaciones",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // opciones_booleanas ::= booleans 
            {
              Object RESULT =null;
		System.out.println("substruct: op_booleanas [booleans]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_booleanas",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // opciones_booleanas ::= contenido_variable 
            {
              Object RESULT =null;
		System.out.println("substruct: op_booleanas [cont_v]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_booleanas",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // negaciones ::= negaciones NO 
            {
              Object RESULT =null;
		System.out.println("substruct: negaciones [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // negaciones ::= NO 
            {
              Object RESULT =null;
		System.out.println("substruct: negaciones [UNICA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // sentencia_switch ::= SWITCH PARENTESIS_A contenido_switch PARENTESIS_C LLAVE_A cuerpo_switch LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: sentencia_switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // cuerpo_switch ::= casos_normales caso_default 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_switch [CN + posible CD]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // cuerpo_switch ::= caso_default 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_switch [posible CD o nada]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // casos_normales ::= casos_normales caso 
            {
              Object RESULT =null;
		System.out.println("substruct: casos_normales [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // casos_normales ::= caso 
            {
              Object RESULT =null;
		System.out.println("substruct: casos_normales [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // caso ::= CASE contenido_switch DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("substruct: caso (CB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // caso ::= CASE contenido_switch DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("substruct: caso (SB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // caso_default ::= DEFAULT DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("substruct: caso_default [existente (CB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // caso_default ::= DEFAULT DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("substruct: caso_default [existente (SB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // caso_default ::= 
            {
              Object RESULT =null;
		System.out.println("substruct: caso_default [ausente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // contenido_switch ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_switch [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // contenido_switch ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_switch [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // contenido_switch ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("substruct: contenido_switch [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // cuerpo_estructuras ::= LLAVE_A bloque_general LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_estructuras [CB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // cuerpo_estructuras ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("substruct: cuerpo_estructuras [SB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // bloque_general ::= bloque retorno 
            {
              Object RESULT =null;
		System.out.println("substruct: bloque_general [CR [comp o parada]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // bloque_general ::= bloque 
            {
              Object RESULT =null;
		System.out.println("substruct: bloque_general [SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // bloque_general ::= retorno 
            {
              Object RESULT =null;
		System.out.println("substruct: bloque_general [SB y CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // retorno ::= retorno_compuesto 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno [compuesto]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // retorno ::= parada PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno [parada [simple]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // retorno_compuesto ::= retorno_numero 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_compuesto: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // retorno_compuesto ::= retorno_string 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_compuesto: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // retorno_compuesto ::= retorno_char 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_compuesto: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // retorno_compuesto ::= retorno_boolean 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_compuesto: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // retorno_compuesto ::= retorno_object 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_compuesto: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // retorno_compuesto ::= retorno_objeto 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_compuesto: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // retorno_variable ::= RETURN contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_V");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_variable",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // retorno_numero ::= RETURN contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_numero",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // retorno_string ::= RETURN contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_string",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // retorno_char ::= RETURN contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_char",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // retorno_boolean ::= RETURN contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_boolean",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // retorno_object ::= RETURN contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_object",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // retorno_objeto ::= RETURN contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("substruct: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_objeto",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // parada ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("substruct: parada [RETURN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // parada ::= BREAK 
            {
              Object RESULT =null;
		System.out.println("substruct: parada [BREAK]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
