
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import Backend.Objetos.Resultado.RESULT;
import Backend.Objetos.Resultado.Metodo;
import Backend.Objetos.Resultado.Variable;
import Backend.Objetos.Token;
import Backend.Manejadores.ManejadorErrores;
import Backend.Objetos.Error;
import Backend.Objetos.Enums.SintaxError;
import Backend.Analizadores.ParserSym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\004\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\011\007\000\002\011\006\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\005\000\002\014\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\016\004\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\020\003\000\002\020\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\005\000\002\022\003\000\002\022\004\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\024\003\000\002\024\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\003\000\002\026\004\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\030" +
    "\005\000\002\030\003\000\002\030\004\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\032\004\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\034\007\000\002\035" +
    "\005\000\002\035\004\000\002\035\004\000\002\036\010" +
    "\000\002\036\010\000\002\036\010\000\002\036\010\000" +
    "\002\036\010\000\002\036\010\000\002\036\010\000\002" +
    "\036\010\000\002\037\006\000\002\037\005\000\002\037" +
    "\006\000\002\037\005\000\002\037\012\000\002\037\011" +
    "\000\002\037\012\000\002\037\011\000\002\037\012\000" +
    "\002\037\011\000\002\037\010\000\002\037\007\000\002" +
    "\037\004\000\002\040\006\000\002\040\005\000\002\040" +
    "\006\000\002\040\005\000\002\040\004\000\002\041\006" +
    "\000\002\041\005\000\002\041\006\000\002\041\005\000" +
    "\002\041\004\000\002\042\006\000\002\042\005\000\002" +
    "\042\006\000\002\042\005\000\002\042\004\000\002\043" +
    "\006\000\002\043\005\000\002\043\006\000\002\043\005" +
    "\000\002\043\006\000\002\043\005\000\002\043\006\000" +
    "\002\043\005\000\002\043\004\000\002\044\006\000\002" +
    "\044\005\000\002\044\006\000\002\044\005\000\002\044" +
    "\004\000\002\045\005\000\002\046\012\000\002\046\010" +
    "\000\002\046\011\000\002\046\007\000\002\046\004\000" +
    "\002\047\005\000\002\047\003\000\002\047\002\000\002" +
    "\047\003\000\002\050\004\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\052\004\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\004\000\002\054\006\000\002\054\010" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\005\000\002\055\005\000\002\055\003\000\002\055" +
    "\005\000\002\055\003\000\002\056\005\000\002\056\005" +
    "\000\002\056\003\000\002\056\003\000\002\056\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\004\000\002\057\005\000\002\057" +
    "\003\000\002\057\003\000\002\060\005\000\002\060\003" +
    "\000\002\061\005\000\002\061\005\000\002\061\003\000" +
    "\002\062\004\000\002\062\003\000\002\063\004\000\002" +
    "\063\004\000\002\063\004\000\002\063\004\000\002\064" +
    "\005\000\002\064\003\000\002\065\005\000\002\065\003" +
    "\000\002\067\005\000\002\067\006\000\002\070\005\000" +
    "\002\070\007\000\002\070\007\000\002\071\003\000\002" +
    "\071\003\000\002\072\005\000\002\072\007\000\002\072" +
    "\007\000\002\072\005\000\002\072\007\000\002\072\007" +
    "\000\002\072\005\000\002\072\007\000\002\072\007\000" +
    "\002\072\005\000\002\072\007\000\002\072\007\000\002" +
    "\073\006\000\002\073\006\000\002\073\004\000\002\074" +
    "\003\000\002\074\005\000\002\074\005\000\002\074\005" +
    "\000\002\075\005\000\002\075\005\000\002\075\007\000" +
    "\002\075\007\000\002\075\007\000\002\075\005\000\002" +
    "\075\003\000\002\076\003\000\002\076\007\000\002\076" +
    "\007\000\002\076\011\000\002\076\011\000\002\076\004" +
    "\000\002\077\011\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\004\000\002\101\007\000\002" +
    "\101\007\000\002\101\007\000\002\101\007\000\002\101" +
    "\007\000\002\101\007\000\002\101\007\000\002\101\007" +
    "\000\002\101\007\000\002\101\007\000\002\101\007\000" +
    "\002\101\007\000\002\101\007\000\002\101\007\000\002" +
    "\102\004\000\002\102\004\000\002\102\003\000\002\102" +
    "\004\000\002\103\003\000\002\103\002\000\002\103\003" +
    "\000\002\104\004\000\002\104\006\000\002\105\005\000" +
    "\002\105\010\000\002\105\003\000\002\106\005\000\002" +
    "\106\010\000\002\106\006\000\002\107\003\000\002\107" +
    "\002\000\002\110\005\000\002\110\003\000\002\110\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\111\003\000\002" +
    "\111\005\000\002\111\003\000\002\111\005\000\002\111" +
    "\005\000\002\112\003\000\002\112\005\000\002\112\003" +
    "\000\002\113\007\000\002\113\007\000\002\066\006\000" +
    "\002\066\005\000\002\066\005\000\002\066\003\000\002" +
    "\122\005\000\002\122\005\000\002\122\003\000\002\123" +
    "\003\000\002\123\003\000\002\125\003\000\002\125\003" +
    "\000\002\125\003\000\002\125\003\000\002\125\003\000" +
    "\002\125\005\000\002\125\005\000\002\125\003\000\002" +
    "\125\005\000\002\124\005\000\002\124\004\000\002\124" +
    "\004\000\002\124\003\000\002\126\004\000\002\126\003" +
    "\000\002\114\011\000\002\115\004\000\002\115\003\000" +
    "\002\115\003\000\002\116\004\000\002\116\003\000\002" +
    "\117\006\000\002\117\005\000\002\120\005\000\002\120" +
    "\004\000\002\120\002\000\002\121\003\000\002\121\003" +
    "\000\002\121\003\000\002\121\005\000\002\121\005\000" +
    "\002\121\005\000\002\121\003\000\002\121\003\000\002" +
    "\127\005\000\002\127\004\000\002\127\004\000\002\130" +
    "\004\000\002\130\003\000\002\130\003\000\002\131\003" +
    "\000\002\131\004\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\132\003\000\002\132\003\000\002" +
    "\132\003\000\002\132\004\000\002\132\007\000\002\132" +
    "\007\000\002\133\005\000\002\134\005\000\002\135\005" +
    "\000\002\136\005\000\002\137\005\000\002\140\005\000" +
    "\002\141\005\000\002\142\003\000\002\142\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0318\000\020\003\013\004\010\005\020\012\005\013" +
    "\007\014\014\015\016\001\002\000\020\003\u0318\004\010" +
    "\005\020\012\005\013\007\014\014\015\016\001\002\000" +
    "\030\003\ufff2\005\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\001\002\000" +
    "\004\002\u0317\001\002\000\030\003\ufff1\005\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\001\002\000\006\003\u030e\025\u0310\001\002" +
    "\000\004\005\020\001\002\000\004\002\ufff4\001\002\000" +
    "\006\002\ufff3\004\010\001\002\000\030\003\ufff0\005\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\001\002\000\020\003\ufffd\004\ufffd" +
    "\005\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\001\002\000" +
    "\030\003\uffef\005\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\001\002\000" +
    "\004\002\uffff\001\002\000\004\024\021\001\002\000\004" +
    "\036\022\001\002\000\040\003\041\012\005\013\007\014" +
    "\014\015\016\016\025\017\047\020\035\021\026\022\034" +
    "\023\033\024\032\025\036\026\046\037\043\001\002\000" +
    "\004\033\u030a\001\002\000\040\003\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\037\uffb7\001\002" +
    "\000\006\003\051\025\u0305\001\002\000\006\003\u026b\025" +
    "\u02f3\001\002\000\040\003\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\037\uffb4\001\002\000\040" +
    "\003\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\037\uffea\001\002\000\040\003\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\037\uffeb\001" +
    "\002\000\010\003\u0143\025\u02e5\047\u02e4\001\002\000\006" +
    "\003\u01d5\025\u02ca\001\002\000\006\003\u0195\025\u02b8\001" +
    "\002\000\006\003\u014f\025\u02a6\001\002\000\006\003\u0143" +
    "\025\u0291\001\002\000\040\003\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\037\uffb6\001\002\000" +
    "\040\003\041\012\005\013\007\014\014\015\016\016\025" +
    "\017\047\020\035\021\026\022\034\023\033\024\032\025" +
    "\036\026\046\037\u0290\001\002\000\042\003\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\033\uffde" +
    "\037\uffb3\001\002\000\026\003\041\016\025\017\047\020" +
    "\035\021\026\022\034\023\033\024\032\025\036\026\046" +
    "\001\002\000\004\002\uffed\001\002\000\040\003\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\037" +
    "\uffe9\001\002\000\040\003\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\037\uffb5\001\002\000\004" +
    "\025\u027d\001\002\000\006\003\051\025\053\001\002\000" +
    "\006\033\uffdc\041\uffdc\001\002\000\004\025\u025d\001\002" +
    "\000\006\033\uffe5\041\u025e\001\002\000\012\033\uffd8\041" +
    "\uffd8\046\054\047\055\001\002\000\014\025\212\030\175" +
    "\032\170\043\206\047\u0186\001\002\000\030\003\065\016" +
    "\056\017\063\020\062\021\071\022\060\023\057\024\064" +
    "\025\070\041\uff74\050\uff74\001\002\000\004\025\uff71\001" +
    "\002\000\004\025\uff6c\001\002\000\004\025\uff6d\001\002" +
    "\000\006\041\uff75\050\uff75\001\002\000\004\025\uff6f\001" +
    "\002\000\004\025\uff70\001\002\000\004\025\uff6b\001\002" +
    "\000\006\041\uff73\050\uff73\001\002\000\006\041\073\050" +
    "\074\001\002\000\004\025\072\001\002\000\004\025\uff6a" +
    "\001\002\000\004\025\uff6e\001\002\000\006\041\uff72\050" +
    "\uff72\001\002\000\022\016\056\017\063\020\062\021\071" +
    "\022\060\023\057\024\064\025\070\001\002\000\006\003" +
    "\075\036\077\001\002\000\004\037\u0278\001\002\000\040" +
    "\003\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\037\uffad\001\002\000\056\003\126\006\122\010" +
    "\125\012\005\013\007\014\014\015\016\016\107\017\105" +
    "\020\136\021\101\022\124\023\115\024\137\025\102\042" +
    "\143\043\106\051\110\052\131\053\142\054\120\056\127" +
    "\001\002\000\004\046\u0275\001\002\000\006\003\u026b\025" +
    "\u026e\001\002\000\024\003\u0269\025\u0145\034\u0268\035\u01a3" +
    "\042\u0231\043\u022f\045\u01a9\046\ufef3\047\341\001\002\000" +
    "\004\037\u0267\001\002\000\066\003\uff65\006\uff65\010\uff65" +
    "\011\uff65\012\uff65\013\uff65\014\uff65\015\uff65\016\uff65\017" +
    "\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65" +
    "\037\uff65\042\uff65\043\uff65\051\uff65\052\uff65\053\uff65\054" +
    "\uff65\056\uff65\057\uff65\060\uff65\001\002\000\006\003\051" +
    "\025\u025d\001\002\000\004\043\u0260\001\002\000\006\003" +
    "\051\025\u025d\001\002\000\004\047\u01fe\001\002\000\024" +
    "\003\u01f9\016\107\017\105\020\136\021\101\022\124\023" +
    "\115\024\137\025\u01fa\001\002\000\056\003\126\006\122" +
    "\010\u01e5\012\005\013\007\014\014\015\016\016\107\017" +
    "\105\020\136\021\101\022\124\023\115\024\137\025\102" +
    "\042\143\043\106\051\110\052\131\053\142\054\120\056" +
    "\127\001\002\000\004\033\u0127\001\002\000\070\003\ufee0" +
    "\006\ufee0\010\ufee0\011\ufee0\012\ufee0\013\ufee0\014\ufee0\015" +
    "\ufee0\016\ufee0\017\ufee0\020\ufee0\021\ufee0\022\ufee0\023\ufee0" +
    "\024\ufee0\025\ufee0\037\ufee0\042\ufee0\043\ufee0\051\ufee0\052" +
    "\ufee0\053\ufee0\054\ufee0\055\u01e2\056\ufee0\057\ufee0\060\ufee0" +
    "\001\002\000\006\003\u01d5\025\u01d8\001\002\000\066\003" +
    "\uff67\006\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67" +
    "\015\uff67\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023" +
    "\uff67\024\uff67\025\uff67\037\uff67\042\uff67\043\uff67\051\uff67" +
    "\052\uff67\053\uff67\054\uff67\056\uff67\057\uff67\060\uff67\001" +
    "\002\000\006\033\uff32\050\uff32\001\002\000\004\047\u01ce" +
    "\001\002\000\066\003\ufede\006\ufede\010\ufede\011\ufede\012" +
    "\ufede\013\ufede\014\ufede\015\ufede\016\ufede\017\ufede\020\ufede" +
    "\021\ufede\022\ufede\023\ufede\024\ufede\025\ufede\037\ufede\042" +
    "\ufede\043\ufede\051\ufede\052\ufede\053\ufede\054\ufede\056\ufede" +
    "\057\ufede\060\ufede\001\002\000\004\034\u019f\001\002\000" +
    "\066\003\uff68\006\uff68\010\uff68\011\uff68\012\uff68\013\uff68" +
    "\014\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68\022" +
    "\uff68\023\uff68\024\uff68\025\uff68\037\uff68\042\uff68\043\uff68" +
    "\051\uff68\052\uff68\053\uff68\054\uff68\056\uff68\057\uff68\060" +
    "\uff68\001\002\000\006\003\u0195\025\u0198\001\002\000\016" +
    "\006\u0184\025\u0185\030\175\032\170\043\206\047\u0186\001" +
    "\002\000\006\033\uffde\050\u0181\001\002\000\004\047\u0162" +
    "\001\002\000\006\033\uff33\050\uff33\001\002\000\004\047" +
    "\u015b\001\002\000\066\003\uff17\006\uff17\010\uff17\011\uff17" +
    "\012\uff17\013\uff17\014\uff17\015\uff17\016\uff17\017\uff17\020" +
    "\uff17\021\uff17\022\uff17\023\uff17\024\uff17\025\uff17\037\uff17" +
    "\042\uff17\043\uff17\051\uff17\052\uff17\053\uff17\054\uff17\056" +
    "\uff17\057\uff17\060\uff17\001\002\000\004\033\u015a\001\002" +
    "\000\004\037\u0159\001\002\000\066\003\uff64\006\uff64\010" +
    "\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64" +
    "\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025" +
    "\uff64\037\uff64\042\uff64\043\uff64\051\uff64\052\uff64\053\uff64" +
    "\054\uff64\056\uff64\057\uff64\060\uff64\001\002\000\006\003" +
    "\u014f\025\u0152\001\002\000\006\003\u0143\025\u0145\001\002" +
    "\000\066\003\uff66\006\uff66\010\uff66\011\uff66\012\uff66\013" +
    "\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021\uff66" +
    "\022\uff66\023\uff66\024\uff66\025\uff66\037\uff66\042\uff66\043" +
    "\uff66\051\uff66\052\uff66\053\uff66\054\uff66\056\uff66\057\uff66" +
    "\060\uff66\001\002\000\066\003\uff63\006\uff63\010\uff63\011" +
    "\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\017\uff63" +
    "\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63\037" +
    "\uff63\042\uff63\043\uff63\051\uff63\052\uff63\053\uff63\054\uff63" +
    "\056\uff63\057\uff63\060\uff63\001\002\000\006\003\u010c\036" +
    "\u010d\001\002\000\004\042\144\001\002\000\006\006\145" +
    "\025\146\001\002\000\004\034\u0109\001\002\000\010\033" +
    "\uff2b\034\147\050\uff2b\001\002\000\004\025\151\001\002" +
    "\000\006\033\uff29\050\uff29\001\002\000\026\003\ufef3\033" +
    "\ufef3\034\152\035\ufef3\042\ufef3\043\ufef3\045\ufef3\046\ufef3" +
    "\047\153\050\ufef3\001\002\000\004\025\151\001\002\000" +
    "\032\003\176\006\167\007\201\025\172\027\155\030\175" +
    "\031\166\032\170\043\206\047\200\050\ufeee\063\203\001" +
    "\002\000\006\041\ufeec\050\ufeec\001\002\000\020\033\uff3b" +
    "\040\uff3b\041\uff3b\042\uff3b\050\uff3b\061\uff3b\062\uff3b\001" +
    "\002\000\004\061\357\001\002\000\010\041\ufee5\050\ufee5" +
    "\061\ufece\001\002\000\020\033\ufed8\040\ufed8\041\ufed8\042" +
    "\ufed8\050\ufed8\061\ufed8\062\ufed8\001\002\000\012\041\ufee7" +
    "\042\303\050\ufee7\062\304\001\002\000\020\033\uff41\040" +
    "\uff41\041\uff41\042\uff41\050\uff41\061\uff41\062\uff41\001\002" +
    "\000\010\041\ufee6\050\ufee6\061\ufecf\001\002\000\010\041" +
    "\ufee9\050\ufee9\061\ufed1\001\002\000\020\033\ufed5\040\ufed5" +
    "\041\ufed5\042\ufed5\050\ufed5\061\352\062\ufed5\001\002\000" +
    "\020\033\ufec6\040\ufec6\041\ufec6\042\ufec6\050\ufec6\061\ufec6" +
    "\062\ufec6\001\002\000\004\034\u0106\001\002\000\020\033" +
    "\uff39\040\uff39\041\uff39\042\uff39\050\uff39\061\uff39\062\uff39" +
    "\001\002\000\020\033\uff46\040\uff46\041\uff46\042\uff46\050" +
    "\uff46\061\uff46\062\uff46\001\002\000\024\034\u0104\035\uff48" +
    "\041\uff48\042\uff48\043\uff48\045\uff48\047\313\050\uff48\061" +
    "\uff48\001\002\000\020\035\215\041\ufeea\042\277\043\214" +
    "\045\220\050\ufeea\061\ufed2\001\002\000\004\050\u0102\001" +
    "\002\000\026\033\uff49\035\uff49\040\uff49\041\uff49\042\uff49" +
    "\043\uff49\045\uff49\050\uff49\061\uff49\062\uff49\001\002\000" +
    "\006\041\ufeeb\050\ufeeb\001\002\000\012\041\ufee8\042\266" +
    "\050\ufee8\061\ufed0\001\002\000\026\006\307\007\201\025" +
    "\310\027\155\030\175\031\166\032\170\043\206\047\200" +
    "\063\203\001\002\000\010\023\367\024\370\025\371\001" +
    "\002\000\020\033\uff43\040\uff43\041\uff43\042\331\050\uff43" +
    "\061\uff43\062\uff43\001\002\000\014\006\ufec4\025\ufec4\031" +
    "\ufec4\047\ufec4\063\ufec4\001\002\000\014\006\233\025\235" +
    "\031\166\047\236\063\232\001\002\000\006\041\225\050" +
    "\ufeef\001\002\000\012\025\212\030\175\043\206\047\211" +
    "\001\002\000\010\041\ufee3\050\ufee3\061\ufecb\001\002\000" +
    "\026\033\uff4b\035\uff4b\040\uff4b\041\uff4b\042\uff4b\043\uff4b" +
    "\045\uff4b\050\uff4b\061\uff4b\062\uff4b\001\002\000\012\025" +
    "\212\030\175\043\206\047\211\001\002\000\026\033\uff48" +
    "\035\uff48\040\uff48\041\uff48\042\uff48\043\uff48\045\uff48\050" +
    "\uff48\061\uff48\062\uff48\001\002\000\014\035\215\042\216" +
    "\043\214\045\220\050\217\001\002\000\012\025\212\030" +
    "\175\043\206\047\211\001\002\000\012\025\212\030\175" +
    "\043\206\047\211\001\002\000\012\025\212\030\175\043" +
    "\206\047\211\001\002\000\026\033\uff4a\035\uff4a\040\uff4a" +
    "\041\uff4a\042\uff4a\043\uff4a\045\uff4a\050\uff4a\061\uff4a\062" +
    "\uff4a\001\002\000\012\025\212\030\175\043\206\047\211" +
    "\001\002\000\026\033\uff4c\035\uff4c\040\uff4c\041\uff4c\042" +
    "\uff4c\043\uff4c\045\uff4c\050\uff4c\061\uff4c\062\uff4c\001\002" +
    "\000\026\033\uff4f\035\215\040\uff4f\041\uff4f\042\uff4f\043" +
    "\uff4f\045\220\050\uff4f\061\uff4f\062\uff4f\001\002\000\026" +
    "\033\uff4d\035\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\045" +
    "\uff4d\050\uff4d\061\uff4d\062\uff4d\001\002\000\026\033\uff4e" +
    "\035\215\040\uff4e\041\uff4e\042\uff4e\043\uff4e\045\220\050" +
    "\uff4e\061\uff4e\062\uff4e\001\002\000\026\006\167\007\201" +
    "\025\172\027\155\030\175\031\166\032\170\043\206\047" +
    "\200\063\203\001\002\000\006\041\ufeed\050\ufeed\001\002" +
    "\000\020\033\uff51\040\uff51\041\uff51\042\uff51\050\uff51\061" +
    "\uff51\062\uff51\001\002\000\020\033\ufec8\040\ufec8\041\ufec8" +
    "\042\ufec8\050\ufec8\061\ufec8\062\ufec8\001\002\000\020\033" +
    "\uff52\040\uff52\041\uff52\042\uff52\050\uff52\061\uff52\062\uff52" +
    "\001\002\000\014\006\ufec5\025\ufec5\031\ufec5\047\ufec5\063" +
    "\ufec5\001\002\000\004\034\364\001\002\000\020\033\ufec7" +
    "\040\ufec7\041\ufec7\042\ufec7\050\ufec7\061\ufec7\062\ufec7\001" +
    "\002\000\036\003\ufef3\033\ufef3\034\362\035\ufef3\040\ufef3" +
    "\041\ufef3\042\ufef3\043\ufef3\045\ufef3\046\ufef3\047\341\050" +
    "\ufef3\061\ufef3\062\ufef3\001\002\000\026\006\252\007\201" +
    "\025\253\027\155\030\175\031\166\032\170\043\206\047" +
    "\256\063\203\001\002\000\014\006\233\025\235\031\166" +
    "\047\240\063\232\001\002\000\014\006\233\025\235\031" +
    "\166\047\240\063\203\001\002\000\004\050\244\001\002" +
    "\000\004\050\243\001\002\000\020\033\uff54\040\uff54\041" +
    "\uff54\042\uff54\050\uff54\061\uff54\062\uff54\001\002\000\020" +
    "\033\ufec9\040\ufec9\041\ufec9\042\ufec9\050\ufec9\061\ufec9\062" +
    "\ufec9\001\002\000\020\033\ufece\040\ufece\041\ufece\042\ufece" +
    "\050\ufece\061\ufece\062\ufece\001\002\000\010\042\303\050" +
    "\361\062\304\001\002\000\020\033\ufecf\040\ufecf\041\ufecf" +
    "\042\ufecf\050\ufecf\061\ufecf\062\ufecf\001\002\000\020\033" +
    "\ufed1\040\ufed1\041\ufed1\042\ufed1\050\ufed1\061\ufed1\062\ufed1" +
    "\001\002\000\012\042\ufed5\050\244\061\352\062\ufed5\001" +
    "\002\000\004\034\347\001\002\000\026\033\ufef3\034\340" +
    "\035\uff48\041\ufef3\042\uff48\043\uff48\045\uff48\047\341\050" +
    "\uff48\061\uff48\001\002\000\026\033\ufed2\035\215\040\ufed2" +
    "\041\ufed2\042\277\043\214\045\220\050\ufed2\061\ufed2\062" +
    "\ufed2\001\002\000\020\033\ufed0\040\ufed0\041\ufed0\042\266" +
    "\050\ufed0\061\ufed0\062\ufed0\001\002\000\026\006\252\007" +
    "\201\025\253\027\155\030\175\031\166\032\170\043\206" +
    "\047\256\063\203\001\002\000\012\033\uff51\041\uff51\050" +
    "\uff51\061\ufecb\001\002\000\006\050\337\061\ufece\001\002" +
    "\000\010\042\303\050\305\062\304\001\002\000\010\042" +
    "\uff41\050\276\061\uff41\001\002\000\006\050\302\061\ufecf" +
    "\001\002\000\016\035\215\042\277\043\214\045\220\050" +
    "\217\061\ufed2\001\002\000\010\042\266\050\267\061\ufed0" +
    "\001\002\000\016\025\212\027\155\030\175\032\170\043" +
    "\206\047\272\001\002\000\020\033\uff3a\040\uff3a\041\uff3a" +
    "\042\uff3a\050\uff3a\061\uff3a\062\uff3a\001\002\000\020\033" +
    "\uff44\040\uff44\041\uff44\042\uff44\050\uff44\061\uff44\062\uff44" +
    "\001\002\000\012\035\215\042\277\043\214\045\220\001" +
    "\002\000\016\025\212\027\155\030\175\032\170\043\206" +
    "\047\272\001\002\000\004\042\266\001\002\000\004\050" +
    "\276\001\002\000\004\050\267\001\002\000\020\033\uff3c" +
    "\040\uff3c\041\uff3c\042\uff3c\050\uff3c\061\uff3c\062\uff3c\001" +
    "\002\000\016\025\212\027\155\030\175\032\170\043\206" +
    "\047\272\001\002\000\020\033\uff45\040\uff45\041\uff45\042" +
    "\uff45\050\uff45\061\uff45\062\uff45\001\002\000\026\033\uff4f" +
    "\035\215\040\uff4f\041\uff4f\042\uff4f\043\uff4f\045\220\050" +
    "\uff4f\061\uff4f\062\uff4f\001\002\000\020\033\uff38\040\uff38" +
    "\041\uff38\042\uff38\050\uff38\061\uff38\062\uff38\001\002\000" +
    "\006\027\155\047\330\001\002\000\026\006\307\007\201" +
    "\025\310\027\155\030\175\031\166\032\170\043\206\047" +
    "\200\063\203\001\002\000\020\033\ufeda\040\ufeda\041\ufeda" +
    "\042\ufeda\050\ufeda\061\ufeda\062\ufeda\001\002\000\020\033" +
    "\ufed9\040\ufed9\041\ufed9\042\ufed9\050\ufed9\061\ufed9\062\ufed9" +
    "\001\002\000\004\034\324\001\002\000\032\033\uff48\034" +
    "\312\035\uff48\040\uff48\041\uff48\042\uff48\043\uff48\045\uff48" +
    "\047\313\050\uff48\061\uff48\062\uff48\001\002\000\020\033" +
    "\ufecb\040\ufecb\041\ufecb\042\ufecb\050\ufecb\061\ufecb\062\ufecb" +
    "\001\002\000\004\025\235\001\002\000\032\003\176\006" +
    "\167\007\201\025\172\027\155\030\175\031\166\032\170" +
    "\043\206\047\200\050\ufeee\063\203\001\002\000\004\050" +
    "\315\001\002\000\022\033\ufef0\034\316\040\ufef0\041\ufef0" +
    "\042\ufef0\050\ufef0\061\ufef0\062\ufef0\001\002\000\004\025" +
    "\320\001\002\000\020\033\ufef1\040\ufef1\041\ufef1\042\ufef1" +
    "\050\ufef1\061\ufef1\062\ufef1\001\002\000\006\034\321\047" +
    "\313\001\002\000\004\025\320\001\002\000\020\033\ufef2" +
    "\040\ufef2\041\ufef2\042\ufef2\050\ufef2\061\ufef2\062\ufef2\001" +
    "\002\000\020\033\ufecd\040\ufecd\041\ufecd\042\ufecd\050\ufecd" +
    "\061\ufecd\062\ufecd\001\002\000\004\025\235\001\002\000" +
    "\020\033\ufeca\040\ufeca\041\ufeca\042\ufeca\050\ufeca\061\ufeca" +
    "\062\ufeca\001\002\000\020\033\ufecc\040\ufecc\041\ufecc\042" +
    "\ufecc\050\ufecc\061\ufecc\062\ufecc\001\002\000\020\033\uff47" +
    "\040\uff47\041\uff47\042\uff47\050\uff47\061\uff47\062\uff47\001" +
    "\002\000\006\027\155\047\330\001\002\000\026\006\307" +
    "\007\201\025\310\027\155\030\175\031\166\032\170\043" +
    "\206\047\200\063\203\001\002\000\020\033\uff42\040\uff42" +
    "\041\uff42\042\uff42\050\uff42\061\uff42\062\uff42\001\002\000" +
    "\020\033\uff3e\040\uff3e\041\uff3e\042\uff3e\050\uff3e\061\uff3e" +
    "\062\304\001\002\000\020\033\uff3d\040\uff3d\041\uff3d\042" +
    "\uff41\050\uff3d\061\uff41\062\uff3d\001\002\000\026\033\uff40" +
    "\035\215\040\uff40\041\uff40\042\uff40\043\214\045\220\050" +
    "\uff40\061\uff40\062\uff40\001\002\000\020\033\uff3f\040\uff3f" +
    "\041\uff3f\042\uff3f\050\uff3f\061\uff3f\062\uff3f\001\002\000" +
    "\020\033\uff36\040\uff36\041\uff36\042\uff36\050\uff36\061\uff36" +
    "\062\uff36\001\002\000\004\025\235\001\002\000\032\003" +
    "\176\006\167\007\201\025\172\027\155\030\175\031\166" +
    "\032\170\043\206\047\200\050\ufeee\063\203\001\002\000" +
    "\004\050\343\001\002\000\022\033\ufef0\034\344\040\ufef0" +
    "\041\ufef0\042\ufef0\050\ufef0\061\ufef0\062\ufef0\001\002\000" +
    "\004\025\235\001\002\000\032\003\ufef4\033\ufef4\035\ufef4" +
    "\040\ufef4\041\ufef4\042\ufef4\043\ufef4\045\ufef4\046\ufef4\050" +
    "\ufef4\061\ufef4\062\ufef4\001\002\000\012\033\ufef5\041\ufef5" +
    "\050\ufef5\061\ufecd\001\002\000\004\025\235\001\002\000" +
    "\012\033\uff50\041\uff50\050\uff50\061\ufeca\001\002\000\012" +
    "\033\uff53\041\uff53\050\uff53\061\ufecc\001\002\000\026\006" +
    "\307\007\201\025\310\027\155\030\175\031\166\032\170" +
    "\043\206\047\200\063\203\001\002\000\020\033\ufed3\040" +
    "\ufed3\041\ufed3\042\ufed3\050\ufed3\061\357\062\ufed3\001\002" +
    "\000\006\042\303\062\304\001\002\000\020\033\ufed4\040" +
    "\ufed4\041\ufed4\042\ufed5\050\ufed4\061\352\062\ufed5\001\002" +
    "\000\020\033\ufed6\040\ufed6\041\ufed6\042\ufed6\050\ufed6\061" +
    "\ufed6\062\ufed6\001\002\000\026\006\307\007\201\025\310" +
    "\027\155\030\175\031\166\032\170\043\206\047\200\063" +
    "\203\001\002\000\020\033\ufed7\040\ufed7\041\ufed7\042\ufed7" +
    "\050\ufed7\061\ufed7\062\ufed7\001\002\000\020\033\ufedb\040" +
    "\ufedb\041\ufedb\042\ufedb\050\ufedb\061\ufedb\062\ufedb\001\002" +
    "\000\004\025\235\001\002\000\032\003\ufef5\033\ufef5\035" +
    "\ufef5\040\ufef5\041\ufef5\042\ufef5\043\ufef5\045\ufef5\046\ufef5" +
    "\050\ufef5\061\ufef5\062\ufef5\001\002\000\004\025\235\001" +
    "\002\000\020\033\uff50\040\uff50\041\uff50\042\uff50\050\uff50" +
    "\061\uff50\062\uff50\001\002\000\020\033\uff53\040\uff53\041" +
    "\uff53\042\uff53\050\uff53\061\uff53\062\uff53\001\002\000\004" +
    "\047\u0100\001\002\000\004\047\375\001\002\000\004\047" +
    "\372\001\002\000\032\003\176\006\167\007\201\025\172" +
    "\027\155\030\175\031\166\032\170\043\206\047\200\050" +
    "\ufeee\063\203\001\002\000\004\050\374\001\002\000\020" +
    "\033\uff34\040\uff34\041\uff34\042\uff34\050\uff34\061\uff34\062" +
    "\uff34\001\002\000\032\003\176\006\167\007\201\025\172" +
    "\027\155\030\175\031\166\032\170\043\206\047\200\050" +
    "\ufeee\063\203\001\002\000\004\050\377\001\002\000\020" +
    "\033\uff35\040\uff35\041\uff35\042\uff35\050\uff35\061\uff35\062" +
    "\uff35\001\002\000\004\050\u0101\001\002\000\020\033\uff37" +
    "\040\uff37\041\uff37\042\uff37\050\uff37\061\uff37\062\uff37\001" +
    "\002\000\004\034\u0103\001\002\000\004\025\151\001\002" +
    "\000\004\025\235\001\002\000\010\041\ufee1\050\ufee1\061" +
    "\ufecd\001\002\000\004\025\235\001\002\000\010\041\ufee4" +
    "\050\ufee4\061\ufeca\001\002\000\010\041\ufee2\050\ufee2\061" +
    "\ufecc\001\002\000\004\025\151\001\002\000\006\033\uff2a" +
    "\050\uff2a\001\002\000\004\052\u013a\001\002\000\004\037" +
    "\u0139\001\002\000\062\003\126\006\122\010\u0114\011\u0115" +
    "\012\005\013\007\014\014\015\016\016\107\017\105\020" +
    "\136\021\101\022\124\023\115\024\137\025\102\037\u0111" +
    "\042\143\043\106\051\110\052\131\053\142\054\120\056" +
    "\127\001\002\000\010\037\ufea6\057\ufea6\060\ufea6\001\002" +
    "\000\010\037\ufea4\057\ufea4\060\ufea4\001\002\000\004\033" +
    "\u0138\001\002\000\070\003\ufeaf\006\ufeaf\010\ufeaf\011\ufeaf" +
    "\012\ufeaf\013\ufeaf\014\ufeaf\015\ufeaf\016\ufeaf\017\ufeaf\020" +
    "\ufeaf\021\ufeaf\022\ufeaf\023\ufeaf\024\ufeaf\025\ufeaf\037\ufeaf" +
    "\042\ufeaf\043\ufeaf\051\ufeaf\052\ufeaf\053\ufeaf\054\ufeaf\055" +
    "\ufeaf\056\ufeaf\057\ufeaf\060\ufeaf\001\002\000\010\037\ufeaa" +
    "\057\ufeaa\060\ufeaa\001\002\000\066\003\126\006\122\010" +
    "\u0114\011\u0115\012\005\013\007\014\014\015\016\016\107" +
    "\017\105\020\136\021\101\022\124\023\115\024\137\025" +
    "\102\037\ufeac\042\143\043\106\051\110\052\131\053\142" +
    "\054\120\056\127\057\ufeac\060\ufeac\001\002\000\030\006" +
    "\u0122\007\201\025\u0123\027\155\030\175\031\166\032\170" +
    "\033\ufe98\043\206\047\200\063\203\001\002\000\004\033" +
    "\ufe97\001\002\000\010\037\ufea7\057\ufea7\060\ufea7\001\002" +
    "\000\010\037\ufea3\057\ufea3\060\ufea3\001\002\000\010\037" +
    "\ufea8\057\ufea8\060\ufea8\001\002\000\004\037\u011c\001\002" +
    "\000\010\037\ufea5\057\ufea5\060\ufea5\001\002\000\010\037" +
    "\ufeab\057\ufeab\060\ufeab\001\002\000\070\003\ufeb0\006\ufeb0" +
    "\010\ufeb0\011\ufeb0\012\ufeb0\013\ufeb0\014\ufeb0\015\ufeb0\016" +
    "\ufeb0\017\ufeb0\020\ufeb0\021\ufeb0\022\ufeb0\023\ufeb0\024\ufeb0" +
    "\025\ufeb0\037\ufeb0\042\ufeb0\043\ufeb0\051\ufeb0\052\ufeb0\053" +
    "\ufeb0\054\ufeb0\055\ufeb0\056\ufeb0\057\ufeb0\060\ufeb0\001\002" +
    "\000\006\033\u0135\061\ufece\001\002\000\010\033\u0134\042" +
    "\303\062\304\001\002\000\006\033\u0133\061\ufecf\001\002" +
    "\000\010\037\ufea2\057\ufea2\060\ufea2\001\002\000\006\033" +
    "\u0132\061\ufed1\001\002\000\004\034\u012d\001\002\000\022" +
    "\033\uff48\034\u012a\035\uff48\042\uff48\043\uff48\045\uff48\047" +
    "\313\061\uff48\001\002\000\016\033\u0129\035\215\042\277" +
    "\043\214\045\220\061\ufed2\001\002\000\010\033\u0128\042" +
    "\266\061\ufed0\001\002\000\006\033\u0127\061\ufecb\001\002" +
    "\000\066\003\ufef7\006\ufef7\010\ufef7\011\ufef7\012\ufef7\013" +
    "\ufef7\014\ufef7\015\ufef7\016\ufef7\017\ufef7\020\ufef7\021\ufef7" +
    "\022\ufef7\023\ufef7\024\ufef7\025\ufef7\037\ufef7\042\ufef7\043" +
    "\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\056\ufef7\057\ufef7" +
    "\060\ufef7\001\002\000\010\037\ufe9c\057\ufe9c\060\ufe9c\001" +
    "\002\000\010\037\ufe9e\057\ufe9e\060\ufe9e\001\002\000\004" +
    "\025\235\001\002\000\006\033\u012c\061\ufecd\001\002\000" +
    "\010\037\ufea1\057\ufea1\060\ufea1\001\002\000\004\025\235" +
    "\001\002\000\006\033\u0131\061\ufeca\001\002\000\006\033" +
    "\u0130\061\ufecc\001\002\000\010\037\ufea0\057\ufea0\060\ufea0" +
    "\001\002\000\066\003\ufef6\006\ufef6\010\ufef6\011\ufef6\012" +
    "\ufef6\013\ufef6\014\ufef6\015\ufef6\016\ufef6\017\ufef6\020\ufef6" +
    "\021\ufef6\022\ufef6\023\ufef6\024\ufef6\025\ufef6\037\ufef6\042" +
    "\ufef6\043\ufef6\051\ufef6\052\ufef6\053\ufef6\054\ufef6\056\ufef6" +
    "\057\ufef6\060\ufef6\001\002\000\010\037\ufe9d\057\ufe9d\060" +
    "\ufe9d\001\002\000\010\037\ufe9a\057\ufe9a\060\ufe9a\001\002" +
    "\000\010\037\ufe9b\057\ufe9b\060\ufe9b\001\002\000\010\037" +
    "\ufe99\057\ufe99\060\ufe99\001\002\000\066\003\uff69\006\uff69" +
    "\010\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69\016" +
    "\uff69\017\uff69\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69" +
    "\025\uff69\037\uff69\042\uff69\043\uff69\051\uff69\052\uff69\053" +
    "\uff69\054\uff69\056\uff69\057\uff69\060\uff69\001\002\000\010" +
    "\037\ufead\057\ufead\060\ufead\001\002\000\010\037\ufea9\057" +
    "\ufea9\060\ufea9\001\002\000\070\003\ufeae\006\ufeae\010\ufeae" +
    "\011\ufeae\012\ufeae\013\ufeae\014\ufeae\015\ufeae\016\ufeae\017" +
    "\ufeae\020\ufeae\021\ufeae\022\ufeae\023\ufeae\024\ufeae\025\ufeae" +
    "\037\ufeae\042\ufeae\043\ufeae\051\ufeae\052\ufeae\053\ufeae\054" +
    "\ufeae\055\ufeae\056\ufeae\057\ufeae\060\ufeae\001\002\000\004" +
    "\047\u013b\001\002\000\026\006\252\007\201\025\253\027" +
    "\155\030\175\031\166\032\170\043\206\047\256\063\203" +
    "\001\002\000\010\042\303\050\u0140\062\304\001\002\000" +
    "\004\050\u013e\001\002\000\004\033\u013f\001\002\000\066" +
    "\003\uff13\006\uff13\010\uff13\011\uff13\012\uff13\013\uff13\014" +
    "\uff13\015\uff13\016\uff13\017\uff13\020\uff13\021\uff13\022\uff13" +
    "\023\uff13\024\uff13\025\uff13\037\uff13\042\uff13\043\uff13\051" +
    "\uff13\052\uff13\053\uff13\054\uff13\056\uff13\057\uff13\060\uff13" +
    "\001\002\000\004\033\u0141\001\002\000\066\003\uff14\006" +
    "\uff14\010\uff14\011\uff14\012\uff14\013\uff14\014\uff14\015\uff14" +
    "\016\uff14\017\uff14\020\uff14\021\uff14\022\uff14\023\uff14\024" +
    "\uff14\025\uff14\037\uff14\042\uff14\043\uff14\051\uff14\052\uff14" +
    "\053\uff14\054\uff14\056\uff14\057\uff14\060\uff14\001\002\000" +
    "\006\033\uffbd\041\uffbd\001\002\000\004\025\u0145\001\002" +
    "\000\006\033\uffe0\041\u014c\001\002\000\010\033\uffb9\041" +
    "\uffb9\046\u0146\001\002\000\012\006\233\007\u0147\025\235" +
    "\047\u0149\001\002\000\006\024\370\025\371\001\002\000" +
    "\006\033\uffbb\041\uffbb\001\002\000\012\006\233\007\u0147" +
    "\025\235\047\u0149\001\002\000\006\033\uffba\041\uffba\001" +
    "\002\000\004\050\337\001\002\000\004\025\u0145\001\002" +
    "\000\006\033\uffbe\041\uffbe\001\002\000\006\033\uffbc\041" +
    "\uffbc\001\002\000\004\025\u0152\001\002\000\006\033\uffd6" +
    "\041\uffd6\001\002\000\006\033\uffe4\041\u0156\001\002\000" +
    "\010\033\uffd2\041\uffd2\046\u0153\001\002\000\026\006\252" +
    "\007\201\025\253\027\155\030\175\031\166\032\170\043" +
    "\206\047\256\063\203\001\002\000\010\033\uffd3\041\uffd3" +
    "\061\ufed1\001\002\000\006\033\uffd4\041\uffd4\001\002\000" +
    "\004\025\u0152\001\002\000\006\033\uffd7\041\uffd7\001\002" +
    "\000\006\033\uffd5\041\uffd5\001\002\000\040\003\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\037" +
    "\uffa5\001\002\000\066\003\uff62\006\uff62\010\uff62\011\uff62" +
    "\012\uff62\013\uff62\014\uff62\015\uff62\016\uff62\017\uff62\020" +
    "\uff62\021\uff62\022\uff62\023\uff62\024\uff62\025\uff62\037\uff62" +
    "\042\uff62\043\uff62\051\uff62\052\uff62\053\uff62\054\uff62\056" +
    "\uff62\057\uff62\060\uff62\001\002\000\026\006\252\007\201" +
    "\025\253\027\155\030\175\031\166\032\170\043\206\047" +
    "\256\063\203\001\002\000\010\042\303\050\u0160\062\304" +
    "\001\002\000\004\050\u015e\001\002\000\006\003\u010c\036" +
    "\u010d\001\002\000\066\003\uff15\006\uff15\010\uff15\011\uff15" +
    "\012\uff15\013\uff15\014\uff15\015\uff15\016\uff15\017\uff15\020" +
    "\uff15\021\uff15\022\uff15\023\uff15\024\uff15\025\uff15\037\uff15" +
    "\042\uff15\043\uff15\051\uff15\052\uff15\053\uff15\054\uff15\056" +
    "\uff15\057\uff15\060\uff15\001\002\000\006\003\u010c\036\u010d" +
    "\001\002\000\066\003\uff16\006\uff16\010\uff16\011\uff16\012" +
    "\uff16\013\uff16\014\uff16\015\uff16\016\uff16\017\uff16\020\uff16" +
    "\021\uff16\022\uff16\023\uff16\024\uff16\025\uff16\037\uff16\042" +
    "\uff16\043\uff16\051\uff16\052\uff16\053\uff16\054\uff16\056\uff16" +
    "\057\uff16\060\uff16\001\002\000\030\003\u0168\006\u0165\007" +
    "\201\025\u0166\027\155\030\175\031\166\032\170\043\206" +
    "\047\200\063\203\001\002\000\004\050\u0170\001\002\000" +
    "\010\040\ufeb8\050\ufeb8\061\ufed1\001\002\000\004\034\u016d" +
    "\001\002\000\024\034\u016b\035\uff48\040\uff48\042\uff48\043" +
    "\uff48\045\uff48\047\313\050\uff48\061\uff48\001\002\000\020" +
    "\035\215\040\ufeb7\042\277\043\214\045\220\050\ufeb7\061" +
    "\ufed2\001\002\000\006\040\ufeb1\050\ufeb1\001\002\000\012" +
    "\040\ufeb6\042\266\050\ufeb6\061\ufed0\001\002\000\010\040" +
    "\ufeb2\050\ufeb2\061\ufecb\001\002\000\004\025\235\001\002" +
    "\000\010\040\ufeb4\050\ufeb4\061\ufecd\001\002\000\004\025" +
    "\235\001\002\000\010\040\ufeb3\050\ufeb3\061\ufeca\001\002" +
    "\000\010\040\ufeb5\050\ufeb5\061\ufecc\001\002\000\004\036" +
    "\u0171\001\002\000\012\003\u0174\037\ufeb9\057\u0178\060\u0172" +
    "\001\002\000\004\040\u017f\001\002\000\004\037\ufec1\001" +
    "\002\000\004\037\ufec0\001\002\000\004\037\u017e\001\002" +
    "\000\010\037\ufebe\057\ufebe\060\ufebe\001\002\000\010\037" +
    "\ufeb9\057\u0178\060\u0172\001\002\000\030\003\u0168\006\u0165" +
    "\007\201\025\u0166\027\155\030\175\031\166\032\170\043" +
    "\206\047\200\063\203\001\002\000\004\040\u017a\001\002" +
    "\000\066\003\126\006\122\010\u0114\011\u0115\012\005\013" +
    "\007\014\014\015\016\016\107\017\105\020\136\021\101" +
    "\022\124\023\115\024\137\025\102\037\ufebc\042\143\043" +
    "\106\051\110\052\131\053\142\054\120\056\127\057\ufebc" +
    "\060\ufebc\001\002\000\010\037\ufebd\057\ufebd\060\ufebd\001" +
    "\002\000\004\037\ufec2\001\002\000\010\037\ufebf\057\ufebf" +
    "\060\ufebf\001\002\000\066\003\ufec3\006\ufec3\010\ufec3\011" +
    "\ufec3\012\ufec3\013\ufec3\014\ufec3\015\ufec3\016\ufec3\017\ufec3" +
    "\020\ufec3\021\ufec3\022\ufec3\023\ufec3\024\ufec3\025\ufec3\037" +
    "\ufec3\042\ufec3\043\ufec3\051\ufec3\052\ufec3\053\ufec3\054\ufec3" +
    "\056\ufec3\057\ufec3\060\ufec3\001\002\000\062\003\126\006" +
    "\122\010\u0114\011\u0115\012\005\013\007\014\014\015\016" +
    "\016\107\017\105\020\136\021\101\022\124\023\115\024" +
    "\137\025\102\037\ufeba\042\143\043\106\051\110\052\131" +
    "\053\142\054\120\056\127\001\002\000\004\037\ufebb\001" +
    "\002\000\066\003\uff12\006\uff12\010\uff12\011\uff12\012\uff12" +
    "\013\uff12\014\uff12\015\uff12\016\uff12\017\uff12\020\uff12\021" +
    "\uff12\022\uff12\023\uff12\024\uff12\025\uff12\037\uff12\042\uff12" +
    "\043\uff12\051\uff12\052\uff12\053\uff12\054\uff12\056\uff12\057" +
    "\uff12\060\uff12\001\002\000\004\033\u0193\001\002\000\014" +
    "\033\u0129\035\215\042\216\043\214\045\220\001\002\000" +
    "\004\034\u018c\001\002\000\020\033\uff48\034\u0188\035\uff48" +
    "\042\uff48\043\uff48\045\uff48\047\313\001\002\000\014\025" +
    "\212\030\175\032\170\043\206\047\u0186\001\002\000\004" +
    "\033\u0128\001\002\000\004\025\235\001\002\000\004\033" +
    "\u018a\001\002\000\004\037\u018b\001\002\000\040\003\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\037\uff9f\001\002\000\004\025\235\001\002\000\004\033" +
    "\u0191\001\002\000\004\033\u018f\001\002\000\004\037\u0190" +
    "\001\002\000\040\003\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\037\uffa1\001\002\000\004\037" +
    "\u0192\001\002\000\040\003\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\037\uff9d\001\002\000\004" +
    "\037\u0194\001\002\000\040\003\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\037\uff9b\001\002\000" +
    "\004\025\u0198\001\002\000\006\033\uffca\041\uffca\001\002" +
    "\000\006\033\uffe2\041\u019c\001\002\000\010\033\uffc6\041" +
    "\uffc6\046\u0199\001\002\000\026\006\252\007\201\025\253" +
    "\027\155\030\175\031\166\032\170\043\206\047\256\063" +
    "\203\001\002\000\012\033\uffc7\041\uffc7\042\303\062\304" +
    "\001\002\000\006\033\uffc8\041\uffc8\001\002\000\004\025" +
    "\u0198\001\002\000\006\033\uffcb\041\uffcb\001\002\000\006" +
    "\033\uffc9\041\uffc9\001\002\000\004\025\235\001\002\000" +
    "\004\033\u0131\001\002\000\016\003\u01a6\035\u01a3\042\u01a5" +
    "\043\u01a2\045\u01a9\046\u01a7\001\002\000\006\043\u01cb\046" +
    "\u01cc\001\002\000\004\046\u01c9\001\002\000\006\033\uff22" +
    "\050\uff22\001\002\000\006\042\u01bd\046\u01be\001\002\000" +
    "\006\033\uff18\050\uff18\001\002\000\030\003\u01b4\006\u01b1" +
    "\007\201\025\u01b2\027\155\030\175\031\166\032\170\043" +
    "\206\047\200\063\203\001\002\000\006\033\uff25\050\uff25" +
    "\001\002\000\004\046\u01aa\001\002\000\012\025\212\030" +
    "\175\043\206\047\211\001\002\000\016\033\uff1f\035\215" +
    "\042\216\043\214\045\220\050\uff1f\001\002\000\004\033" +
    "\u01bc\001\002\000\006\033\uff5a\061\ufece\001\002\000\010" +
    "\033\uff5c\042\303\062\304\001\002\000\006\033\uff5b\061" +
    "\ufecf\001\002\000\006\033\uff5e\061\ufed1\001\002\000\004" +
    "\034\u01b9\001\002\000\022\033\uff48\034\u01b7\035\uff48\042" +
    "\uff48\043\uff48\045\uff48\047\313\061\uff48\001\002\000\016" +
    "\033\uff5f\035\215\042\277\043\214\045\220\061\ufed2\001" +
    "\002\000\004\033\uff55\001\002\000\010\033\uff5d\042\266" +
    "\061\ufed0\001\002\000\006\033\uff57\061\ufecb\001\002\000" +
    "\004\025\235\001\002\000\006\033\uff59\061\ufecd\001\002" +
    "\000\004\025\235\001\002\000\006\033\uff56\061\ufeca\001" +
    "\002\000\006\033\uff58\061\ufecc\001\002\000\106\003\uff60" +
    "\006\uff60\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60\014" +
    "\uff60\015\uff60\016\uff60\017\uff60\020\uff60\021\uff60\022\uff60" +
    "\023\uff60\024\uff60\025\uff60\027\uff60\030\uff60\031\uff60\032" +
    "\uff60\033\uff60\037\uff60\042\uff60\043\uff60\047\uff60\051\uff60" +
    "\052\uff60\053\uff60\054\uff60\056\uff60\057\uff60\060\uff60\063" +
    "\uff60\001\002\000\006\033\uff30\050\uff30\001\002\000\026" +
    "\006\u01c0\007\201\025\u01c1\027\155\030\175\031\166\032" +
    "\170\043\206\047\200\063\203\001\002\000\010\033\uff1d" +
    "\050\uff1d\061\ufed1\001\002\000\004\034\u01c6\001\002\000" +
    "\024\033\uff48\034\u01c4\035\uff48\042\uff48\043\uff48\045\uff48" +
    "\047\313\050\uff48\061\uff48\001\002\000\020\033\uff1e\035" +
    "\215\042\277\043\214\045\220\050\uff1e\061\ufed2\001\002" +
    "\000\010\033\uff19\050\uff19\061\ufecb\001\002\000\004\025" +
    "\235\001\002\000\010\033\uff1b\050\uff1b\061\ufecd\001\002" +
    "\000\004\025\235\001\002\000\010\033\uff1a\050\uff1a\061" +
    "\ufeca\001\002\000\010\033\uff1c\050\uff1c\061\ufecc\001\002" +
    "\000\012\025\212\030\175\043\206\047\211\001\002\000" +
    "\016\033\uff20\035\215\042\216\043\214\045\220\050\uff20" +
    "\001\002\000\006\033\uff2d\050\uff2d\001\002\000\012\025" +
    "\212\030\175\043\206\047\211\001\002\000\016\033\uff21" +
    "\035\215\042\216\043\214\045\220\050\uff21\001\002\000" +
    "\026\006\252\007\201\025\253\027\155\030\175\031\166" +
    "\032\170\043\206\047\256\063\203\001\002\000\010\042" +
    "\303\050\u01d3\062\304\001\002\000\004\050\u01d1\001\002" +
    "\000\006\003\u010c\036\u010d\001\002\000\070\003\ufedc\006" +
    "\ufedc\010\ufedc\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015\ufedc" +
    "\016\ufedc\017\ufedc\020\ufedc\021\ufedc\022\ufedc\023\ufedc\024" +
    "\ufedc\025\ufedc\037\ufedc\042\ufedc\043\ufedc\051\ufedc\052\ufedc" +
    "\053\ufedc\054\ufedc\055\ufedc\056\ufedc\057\ufedc\060\ufedc\001" +
    "\002\000\006\003\u010c\036\u010d\001\002\000\070\003\ufedd" +
    "\006\ufedd\010\ufedd\011\ufedd\012\ufedd\013\ufedd\014\ufedd\015" +
    "\ufedd\016\ufedd\017\ufedd\020\ufedd\021\ufedd\022\ufedd\023\ufedd" +
    "\024\ufedd\025\ufedd\037\ufedd\042\ufedd\043\ufedd\051\ufedd\052" +
    "\ufedd\053\ufedd\054\ufedd\055\ufedd\056\ufedd\057\ufedd\060\ufedd" +
    "\001\002\000\004\025\u01d8\001\002\000\006\033\uffc4\041" +
    "\uffc4\001\002\000\006\033\uffe1\041\u01df\001\002\000\010" +
    "\033\uffbf\041\uffbf\046\u01d9\001\002\000\012\006\233\007" +
    "\201\025\235\047\u01dc\001\002\000\006\033\uffc0\041\uffc0" +
    "\001\002\000\006\033\uffc2\041\uffc2\001\002\000\012\006" +
    "\233\007\201\025\235\047\u01dc\001\002\000\006\033\uffc1" +
    "\041\uffc1\001\002\000\004\050\302\001\002\000\004\025" +
    "\u01d8\001\002\000\006\033\uffc5\041\uffc5\001\002\000\006" +
    "\033\uffc3\041\uffc3\001\002\000\006\003\u010c\036\u010d\001" +
    "\002\000\066\003\ufedf\006\ufedf\010\ufedf\011\ufedf\012\ufedf" +
    "\013\ufedf\014\ufedf\015\ufedf\016\ufedf\017\ufedf\020\ufedf\021" +
    "\ufedf\022\ufedf\023\ufedf\024\ufedf\025\ufedf\037\ufedf\042\ufedf" +
    "\043\ufedf\051\ufedf\052\ufedf\053\ufedf\054\ufedf\056\ufedf\057" +
    "\ufedf\060\ufedf\001\002\000\004\037\u01f8\001\002\000\016" +
    "\006\u01e9\025\u01ea\030\175\032\170\043\206\047\u0186\001" +
    "\002\000\004\037\u01e7\001\002\000\040\003\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\037\uffa6" +
    "\001\002\000\004\033\u01f6\001\002\000\004\034\u01ef\001" +
    "\002\000\020\033\uff48\034\u01eb\035\uff48\042\uff48\043\uff48" +
    "\045\uff48\047\313\001\002\000\004\025\235\001\002\000" +
    "\004\033\u01ed\001\002\000\004\037\u01ee\001\002\000\040" +
    "\003\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\037\uffa0\001\002\000\004\025\235\001\002\000" +
    "\004\033\u01f4\001\002\000\004\033\u01f2\001\002\000\004" +
    "\037\u01f3\001\002\000\040\003\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\037\uffa2\001\002\000" +
    "\004\037\u01f5\001\002\000\040\003\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\037\uff9e\001\002" +
    "\000\004\037\u01f7\001\002\000\040\003\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\037\uff9c\001" +
    "\002\000\040\003\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\037\uffa4\001\002\000\004\033\uffde" +
    "\001\002\000\006\003\u0143\025\u0145\001\002\000\004\033" +
    "\u01fc\001\002\000\070\003\uffe8\006\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\037\uffe8\042\uffe8\043\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\001\002\000\006\033\uffdf" +
    "\041\u014c\001\002\000\030\003\u0209\006\u020a\016\u01ff\017" +
    "\u0206\020\u0204\021\u020c\022\u0202\023\u0201\024\u0208\025\u020b" +
    "\033\u0200\001\002\000\004\025\u0258\001\002\000\032\003" +
    "\uff0e\006\uff0e\007\uff0e\025\uff0e\027\uff0e\030\uff0e\031\uff0e" +
    "\032\uff0e\033\uff0e\043\uff0e\047\uff0e\063\uff0e\001\002\000" +
    "\004\025\u0250\001\002\000\004\025\u024a\001\002\000\032" +
    "\003\uff10\006\uff10\007\uff10\025\uff10\027\uff10\030\uff10\031" +
    "\uff10\032\uff10\033\uff10\043\uff10\047\uff10\063\uff10\001\002" +
    "\000\004\025\u0244\001\002\000\032\003\uff0f\006\uff0f\007" +
    "\uff0f\025\uff0f\027\uff0f\030\uff0f\031\uff0f\032\uff0f\033\uff0f" +
    "\043\uff0f\047\uff0f\063\uff0f\001\002\000\004\025\u0240\001" +
    "\002\000\032\003\u0226\006\252\007\201\025\253\027\155" +
    "\030\175\031\166\032\170\033\u0227\043\206\047\256\063" +
    "\203\001\002\000\004\025\u021d\001\002\000\004\033\u021c" +
    "\001\002\000\004\034\u021a\001\002\000\012\025\u0214\034" +
    "\152\046\ufef3\047\153\001\002\000\004\025\u020d\001\002" +
    "\000\004\046\u020e\001\002\000\012\006\233\025\235\032" +
    "\170\047\u0211\001\002\000\004\033\u0213\001\002\000\004" +
    "\033\u0212\001\002\000\012\006\233\025\235\032\170\047" +
    "\u0211\001\002\000\032\003\uff07\006\uff07\007\uff07\025\uff07" +
    "\027\uff07\030\uff07\031\uff07\032\uff07\033\uff07\043\uff07\047" +
    "\uff07\063\uff07\001\002\000\032\003\uff08\006\uff08\007\uff08" +
    "\025\uff08\027\uff08\030\uff08\031\uff08\032\uff08\033\uff08\043" +
    "\uff08\047\uff08\063\uff08\001\002\000\004\046\u0215\001\002" +
    "\000\012\006\233\007\u0147\025\235\047\u0149\001\002\000" +
    "\004\033\u0219\001\002\000\004\033\u0218\001\002\000\032" +
    "\003\uff00\006\uff00\007\uff00\025\uff00\027\uff00\030\uff00\031" +
    "\uff00\032\uff00\033\uff00\043\uff00\047\uff00\063\uff00\001\002" +
    "\000\032\003\ufeff\006\ufeff\007\ufeff\025\ufeff\027\ufeff\030" +
    "\ufeff\031\ufeff\032\ufeff\033\ufeff\043\ufeff\047\ufeff\063\ufeff" +
    "\001\002\000\004\025\151\001\002\000\004\046\u01a7\001" +
    "\002\000\032\003\uff0d\006\uff0d\007\uff0d\025\uff0d\027\uff0d" +
    "\030\uff0d\031\uff0d\032\uff0d\033\uff0d\043\uff0d\047\uff0d\063" +
    "\uff0d\001\002\000\004\046\u021e\001\002\000\012\006\233" +
    "\007\u0147\025\235\047\u0149\001\002\000\004\033\u0222\001" +
    "\002\000\004\033\u0221\001\002\000\032\003\uff02\006\uff02" +
    "\007\uff02\025\uff02\027\uff02\030\uff02\031\uff02\032\uff02\033" +
    "\uff02\043\uff02\047\uff02\063\uff02\001\002\000\032\003\uff01" +
    "\006\uff01\007\uff01\025\uff01\027\uff01\030\uff01\031\uff01\032" +
    "\uff01\033\uff01\043\uff01\047\uff01\063\uff01\001\002\000\010" +
    "\033\u023f\042\303\062\304\001\002\000\016\003\u022b\006" +
    "\u022c\025\u022e\042\143\043\106\050\ufef9\001\002\000\004" +
    "\033\u0229\001\002\000\004\033\u0228\001\002\000\016\003" +
    "\ufefc\006\ufefc\025\ufefc\042\ufefc\043\ufefc\050\ufefc\001\002" +
    "\000\016\003\ufefb\006\ufefb\025\ufefb\042\ufefb\043\ufefb\050" +
    "\ufefb\001\002\000\016\003\ufefd\006\ufefd\025\ufefd\042\ufefd" +
    "\043\ufefd\050\ufefd\001\002\000\004\050\u023d\001\002\000" +
    "\004\050\ufef8\001\002\000\004\034\u023b\001\002\000\004" +
    "\050\ufefa\001\002\000\016\003\u01a6\034\u0230\035\u01a3\042" +
    "\u0231\043\u022f\045\u01a9\001\002\000\006\043\u023a\046\u01cc" +
    "\001\002\000\004\025\151\001\002\000\006\042\u0233\046" +
    "\u01be\001\002\000\006\033\uff23\050\uff23\001\002\000\006" +
    "\033\uff31\050\uff31\001\002\000\014\003\u01a6\035\u01a3\042" +
    "\u0236\043\u0235\045\u01a9\001\002\000\006\043\u0239\046\u01cc" +
    "\001\002\000\006\042\u0238\046\u01be\001\002\000\006\033" +
    "\uff24\050\uff24\001\002\000\006\033\uff2f\050\uff2f\001\002" +
    "\000\006\033\uff2c\050\uff2c\001\002\000\006\033\uff2e\050" +
    "\uff2e\001\002\000\004\025\151\001\002\000\014\003\u01a6" +
    "\035\u01a3\042\u01a5\043\u01a2\045\u01a9\001\002\000\006\003" +
    "\u010c\036\u010d\001\002\000\066\003\uff11\006\uff11\010\uff11" +
    "\011\uff11\012\uff11\013\uff11\014\uff11\015\uff11\016\uff11\017" +
    "\uff11\020\uff11\021\uff11\022\uff11\023\uff11\024\uff11\025\uff11" +
    "\037\uff11\042\uff11\043\uff11\051\uff11\052\uff11\053\uff11\054" +
    "\uff11\056\uff11\057\uff11\060\uff11\001\002\000\016\003\ufefe" +
    "\006\ufefe\025\ufefe\042\ufefe\043\ufefe\050\ufefe\001\002\000" +
    "\004\046\u0241\001\002\000\012\025\212\030\175\043\206" +
    "\047\211\001\002\000\014\033\u0243\035\215\042\216\043" +
    "\214\045\220\001\002\000\032\003\uff0b\006\uff0b\007\uff0b" +
    "\025\uff0b\027\uff0b\030\uff0b\031\uff0b\032\uff0b\033\uff0b\043" +
    "\uff0b\047\uff0b\063\uff0b\001\002\000\004\046\u0245\001\002" +
    "\000\026\006\252\007\201\025\253\027\155\030\175\031" +
    "\166\032\170\043\206\047\256\063\203\001\002\000\006" +
    "\033\u0249\061\ufed1\001\002\000\004\033\u0248\001\002\000" +
    "\032\003\uff09\006\uff09\007\uff09\025\uff09\027\uff09\030\uff09" +
    "\031\uff09\032\uff09\033\uff09\043\uff09\047\uff09\063\uff09\001" +
    "\002\000\032\003\uff0a\006\uff0a\007\uff0a\025\uff0a\027\uff0a" +
    "\030\uff0a\031\uff0a\032\uff0a\033\uff0a\043\uff0a\047\uff0a\063" +
    "\uff0a\001\002\000\004\046\u024b\001\002\000\026\006\252" +
    "\007\201\025\253\027\155\030\175\031\166\032\170\043" +
    "\206\047\256\063\203\001\002\000\010\033\u024f\042\303" +
    "\062\304\001\002\000\004\033\u024e\001\002\000\032\003" +
    "\uff05\006\uff05\007\uff05\025\uff05\027\uff05\030\uff05\031\uff05" +
    "\032\uff05\033\uff05\043\uff05\047\uff05\063\uff05\001\002\000" +
    "\032\003\uff06\006\uff06\007\uff06\025\uff06\027\uff06\030\uff06" +
    "\031\uff06\032\uff06\033\uff06\043\uff06\047\uff06\063\uff06\001" +
    "\002\000\004\046\u0251\001\002\000\012\006\233\007\u0253" +
    "\025\235\047\u0255\001\002\000\004\033\u0257\001\002\000" +
    "\004\023\367\001\002\000\004\033\u0256\001\002\000\012" +
    "\006\233\007\u0253\025\235\047\u0255\001\002\000\032\003" +
    "\uff03\006\uff03\007\uff03\025\uff03\027\uff03\030\uff03\031\uff03" +
    "\032\uff03\033\uff03\043\uff03\047\uff03\063\uff03\001\002\000" +
    "\032\003\uff04\006\uff04\007\uff04\025\uff04\027\uff04\030\uff04" +
    "\031\uff04\032\uff04\033\uff04\043\uff04\047\uff04\063\uff04\001" +
    "\002\000\004\046\u0259\001\002\000\012\025\212\030\175" +
    "\043\206\047\211\001\002\000\014\033\u025b\035\215\042" +
    "\216\043\214\045\220\001\002\000\032\003\uff0c\006\uff0c" +
    "\007\uff0c\025\uff0c\027\uff0c\030\uff0c\031\uff0c\032\uff0c\033" +
    "\uff0c\043\uff0c\047\uff0c\063\uff0c\001\002\000\006\033\uffe6" +
    "\041\u025e\001\002\000\010\033\uffd8\041\uffd8\046\054\001" +
    "\002\000\004\025\u025d\001\002\000\006\033\uffdd\041\uffdd" +
    "\001\002\000\006\006\u0261\025\u0262\001\002\000\004\034" +
    "\u0265\001\002\000\010\033\uff28\034\u0263\050\uff28\001\002" +
    "\000\004\025\151\001\002\000\006\033\uff26\050\uff26\001" +
    "\002\000\004\025\151\001\002\000\006\033\uff27\050\uff27" +
    "\001\002\000\040\003\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\037\uffa3\001\002\000\004\025" +
    "\235\001\002\000\006\025\u0145\033\uff18\001\002\000\016" +
    "\003\u01a6\035\u01a3\042\u0236\043\u0235\045\u01a9\046\ufef5\001" +
    "\002\000\004\025\u026e\001\002\000\006\033\uffd0\041\uffd0" +
    "\001\002\000\006\033\uffe3\041\u0272\001\002\000\010\033" +
    "\uffcc\041\uffcc\046\u026f\001\002\000\012\006\233\025\235" +
    "\032\170\047\u0211\001\002\000\006\033\uffcd\041\uffcd\001" +
    "\002\000\006\033\uffce\041\uffce\001\002\000\004\025\u026e" +
    "\001\002\000\006\033\uffd1\041\uffd1\001\002\000\006\033" +
    "\uffcf\041\uffcf\001\002\000\030\003\u01b4\006\u01b1\007\201" +
    "\025\u01b2\027\155\030\175\031\166\032\170\043\206\047" +
    "\200\063\203\001\002\000\004\033\u0277\001\002\000\106" +
    "\003\uff61\006\uff61\007\uff61\010\uff61\011\uff61\012\uff61\013" +
    "\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61" +
    "\022\uff61\023\uff61\024\uff61\025\uff61\027\uff61\030\uff61\031" +
    "\uff61\032\uff61\033\uff61\037\uff61\042\uff61\043\uff61\047\uff61" +
    "\051\uff61\052\uff61\053\uff61\054\uff61\056\uff61\057\uff61\060" +
    "\uff61\063\uff61\001\002\000\040\003\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\037\uff9a\001\002" +
    "\000\006\041\uff76\050\uff76\001\002\000\006\033\uffd9\041" +
    "\uffd9\001\002\000\016\033\uffda\035\215\041\uffda\042\216" +
    "\043\214\045\220\001\002\000\006\033\uffdb\041\uffdb\001" +
    "\002\000\006\003\u027e\047\u0280\001\002\000\004\037\u028d" +
    "\001\002\000\040\003\uff7c\012\uff7c\013\uff7c\014\uff7c\015" +
    "\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c" +
    "\024\uff7c\025\uff7c\026\uff7c\037\uff7c\001\002\000\030\003" +
    "\065\016\056\017\063\020\062\021\071\022\060\023\057" +
    "\024\064\025\070\041\uff74\050\uff74\001\002\000\006\041" +
    "\073\050\u0282\001\002\000\004\036\u0283\001\002\000\060" +
    "\003\126\006\122\010\u0286\012\005\013\007\014\014\015" +
    "\016\016\107\017\105\020\136\021\101\022\124\023\115" +
    "\024\137\025\102\037\u0284\042\143\043\106\051\110\052" +
    "\131\053\142\054\120\056\127\001\002\000\040\003\uff78" +
    "\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020" +
    "\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78" +
    "\037\uff78\001\002\000\060\003\126\006\122\010\u028a\012" +
    "\005\013\007\014\014\015\016\016\107\017\105\020\136" +
    "\021\101\022\124\023\115\024\137\025\102\037\u0289\042" +
    "\143\043\106\051\110\052\131\053\142\054\120\056\127" +
    "\001\002\000\004\033\u0287\001\002\000\004\037\u0288\001" +
    "\002\000\040\003\uff79\012\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024" +
    "\uff79\025\uff79\026\uff79\037\uff79\001\002\000\040\003\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a" +
    "\037\uff7a\001\002\000\004\033\u028b\001\002\000\004\037" +
    "\u028c\001\002\000\040\003\uff7b\012\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\025\uff7b\026\uff7b\037\uff7b\001\002\000\040" +
    "\003\uff77\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\017" +
    "\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77" +
    "\026\uff77\037\uff77\001\002\000\040\003\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\037\uffb8\001" +
    "\002\000\040\003\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\037\uffec\001\002\000\004\002\uffee" +
    "\001\002\000\012\033\uffb9\041\uffb9\046\u0146\047\u0292\001" +
    "\002\000\030\003\065\016\056\017\063\020\062\021\071" +
    "\022\060\023\057\024\064\025\070\041\uff74\050\uff74\001" +
    "\002\000\006\041\073\050\u0294\001\002\000\006\003\u0295" +
    "\036\u0297\001\002\000\004\037\u02a5\001\002\000\040\003" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\037\uffa7\001\002\000\056\003\126\006\122\010\u029a" +
    "\012\005\013\007\014\014\015\016\016\107\017\105\020" +
    "\136\021\101\022\124\023\115\024\137\025\102\042\143" +
    "\043\106\051\110\052\131\053\142\054\120\056\127\001" +
    "\002\000\056\003\126\006\122\010\u029a\012\005\013\007" +
    "\014\014\015\016\016\107\017\105\020\136\021\101\022" +
    "\124\023\115\024\137\025\102\042\143\043\106\051\110" +
    "\052\131\053\142\054\120\056\127\001\002\000\004\037" +
    "\u02a0\001\002\000\012\006\233\007\u0147\025\235\047\u0149" +
    "\001\002\000\004\037\u029c\001\002\000\040\003\uff7e\012" +
    "\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e" +
    "\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\037" +
    "\uff7e\001\002\000\004\033\u029f\001\002\000\004\033\u0135" +
    "\001\002\000\004\037\ufe9f\001\002\000\040\003\uff80\012" +
    "\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80" +
    "\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\037" +
    "\uff80\001\002\000\004\037\u02a4\001\002\000\004\037\u02a3" +
    "\001\002\000\040\003\uff7f\012\uff7f\013\uff7f\014\uff7f\015" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\026\uff7f\037\uff7f\001\002\000\040\003" +
    "\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81" +
    "\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026" +
    "\uff81\037\uff81\001\002\000\040\003\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\037\uff7d\001\002" +
    "\000\012\033\uffd2\041\uffd2\046\u0153\047\u02a7\001\002\000" +
    "\030\003\065\016\056\017\063\020\062\021\071\022\060" +
    "\023\057\024\064\025\070\041\uff74\050\uff74\001\002\000" +
    "\006\041\073\050\u02a9\001\002\000\006\003\u02aa\036\u02ac" +
    "\001\002\000\004\037\u02b7\001\002\000\040\003\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\037" +
    "\uffac\001\002\000\056\003\126\006\122\010\u02af\012\005" +
    "\013\007\014\014\015\016\016\107\017\105\020\136\021" +
    "\101\022\124\023\115\024\137\025\102\042\143\043\106" +
    "\051\110\052\131\053\142\054\120\056\127\001\002\000" +
    "\056\003\126\006\122\010\u02af\012\005\013\007\014\014" +
    "\015\016\016\107\017\105\020\136\021\101\022\124\023" +
    "\115\024\137\025\102\042\143\043\106\051\110\052\131" +
    "\053\142\054\120\056\127\001\002\000\004\037\u02b2\001" +
    "\002\000\026\006\252\007\201\025\253\027\155\030\175" +
    "\031\166\032\170\043\206\047\256\063\203\001\002\000" +
    "\004\037\u02b1\001\002\000\040\003\uff96\012\uff96\013\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\037\uff96\001\002" +
    "\000\040\003\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\026\uff98\037\uff98\001\002\000\004\037\u02b6\001" +
    "\002\000\004\037\u02b5\001\002\000\040\003\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\037\uff97" +
    "\001\002\000\040\003\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\037\uff99\001\002\000\040\003" +
    "\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95" +
    "\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026" +
    "\uff95\037\uff95\001\002\000\012\033\uffc6\041\uffc6\046\u0199" +
    "\047\u02b9\001\002\000\030\003\065\016\056\017\063\020" +
    "\062\021\071\022\060\023\057\024\064\025\070\041\uff74" +
    "\050\uff74\001\002\000\006\041\073\050\u02bb\001\002\000" +
    "\006\003\u02bd\036\u02be\001\002\000\040\003\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\037\uffaa" +
    "\001\002\000\004\037\u02c9\001\002\000\056\003\126\006" +
    "\122\010\u02c1\012\005\013\007\014\014\015\016\016\107" +
    "\017\105\020\136\021\101\022\124\023\115\024\137\025" +
    "\102\042\143\043\106\051\110\052\131\053\142\054\120" +
    "\056\127\001\002\000\056\003\126\006\122\010\u02c1\012" +
    "\005\013\007\014\014\015\016\016\107\017\105\020\136" +
    "\021\101\022\124\023\115\024\137\025\102\042\143\043" +
    "\106\051\110\052\131\053\142\054\120\056\127\001\002" +
    "\000\004\037\u02c4\001\002\000\026\006\252\007\201\025" +
    "\253\027\155\030\175\031\166\032\170\043\206\047\256" +
    "\063\203\001\002\000\004\037\u02c3\001\002\000\040\003" +
    "\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026" +
    "\uff8c\037\uff8c\001\002\000\040\003\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\037\uff8e\001\002" +
    "\000\004\037\u02c8\001\002\000\004\037\u02c7\001\002\000" +
    "\040\003\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\037\uff8d\001\002\000\040\003\uff8f\012\uff8f" +
    "\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021" +
    "\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\037\uff8f" +
    "\001\002\000\040\003\uff8b\012\uff8b\013\uff8b\014\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\037\uff8b\001\002\000\012\033" +
    "\uffbf\041\uffbf\046\u01d9\047\u02cb\001\002\000\030\003\065" +
    "\016\056\017\063\020\062\021\071\022\060\023\057\024" +
    "\064\025\070\041\uff74\050\uff74\001\002\000\006\041\073" +
    "\050\u02cd\001\002\000\006\003\u02ce\036\u02d0\001\002\000" +
    "\004\037\u02e3\001\002\000\040\003\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\037\uffa9\001\002" +
    "\000\056\003\126\006\122\010\u02d4\012\005\013\007\014" +
    "\014\015\016\016\107\017\105\020\136\021\101\022\124" +
    "\023\115\024\137\025\102\042\143\043\106\051\110\052" +
    "\131\053\142\054\120\056\127\001\002\000\004\037\u02e2" +
    "\001\002\000\056\003\126\006\122\010\u02d4\012\005\013" +
    "\007\014\014\015\016\016\107\017\105\020\136\021\101" +
    "\022\124\023\115\024\137\025\102\042\143\043\106\051" +
    "\110\052\131\053\142\054\120\056\127\001\002\000\004" +
    "\037\u02d9\001\002\000\026\006\252\007\201\025\253\027" +
    "\155\030\175\031\166\032\170\043\206\047\256\063\203" +
    "\001\002\000\004\037\u02d8\001\002\000\004\037\u02d7\001" +
    "\002\000\040\003\uff85\012\uff85\013\uff85\014\uff85\015\uff85" +
    "\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\026\uff85\037\uff85\001\002\000\040\003\uff83" +
    "\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020" +
    "\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83" +
    "\037\uff83\001\002\000\040\003\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\024\uff89\025\uff89\026\uff89\037\uff89\001\002\000" +
    "\004\037\u02e1\001\002\000\004\037\u02e0\001\002\000\004" +
    "\037\u02df\001\002\000\004\037\u02de\001\002\000\040\003" +
    "\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86" +
    "\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\037\uff86\001\002\000\040\003\uff84\012\uff84\013\uff84" +
    "\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\037\uff84\001\002" +
    "\000\040\003\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\037\uff8a\001\002\000\040\003\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\037" +
    "\uff88\001\002\000\040\003\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\024\uff87\025\uff87\026\uff87\037\uff87\001\002\000\040" +
    "\003\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82" +
    "\026\uff82\037\uff82\001\002\000\030\003\065\016\056\017" +
    "\063\020\062\021\071\022\060\023\057\024\064\025\070" +
    "\041\uff74\050\uff74\001\002\000\012\033\uffb9\041\uffb9\046" +
    "\u0146\047\u02e6\001\002\000\030\003\065\016\056\017\063" +
    "\020\062\021\071\022\060\023\057\024\064\025\070\041" +
    "\uff74\050\uff74\001\002\000\006\041\073\050\u02e8\001\002" +
    "\000\006\003\u0295\036\u0297\001\002\000\040\003\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\037" +
    "\uffa8\001\002\000\006\041\073\050\u02eb\001\002\000\006" +
    "\003\u02ec\036\u02ee\001\002\000\004\037\u02f2\001\002\000" +
    "\040\003\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\037\uffb2\001\002\000\056\003\126\006\122" +
    "\012\005\013\007\014\014\015\016\016\107\017\105\020" +
    "\136\021\101\022\124\023\115\024\137\025\102\037\u02ef" +
    "\042\143\043\106\051\110\052\131\053\142\054\120\056" +
    "\127\001\002\000\040\003\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\037\uffb0\001\002\000\056" +
    "\003\126\006\122\012\005\013\007\014\014\015\016\016" +
    "\107\017\105\020\136\021\101\022\124\023\115\024\137" +
    "\025\102\037\u02f1\042\143\043\106\051\110\052\131\053" +
    "\142\054\120\056\127\001\002\000\040\003\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\037\uffb1" +
    "\001\002\000\040\003\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\037\uffaf\001\002\000\012\033" +
    "\uffcc\041\uffcc\046\u026f\047\u02f4\001\002\000\030\003\065" +
    "\016\056\017\063\020\062\021\071\022\060\023\057\024" +
    "\064\025\070\041\uff74\050\uff74\001\002\000\006\041\073" +
    "\050\u02f6\001\002\000\006\003\u02f7\036\u02f9\001\002\000" +
    "\004\037\u0304\001\002\000\040\003\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\037\uffab\001\002" +
    "\000\056\003\126\006\122\010\u02fd\012\005\013\007\014" +
    "\014\015\016\016\107\017\105\020\136\021\101\022\124" +
    "\023\115\024\137\025\102\042\143\043\106\051\110\052" +
    "\131\053\142\054\120\056\127\001\002\000\004\037\u0303" +
    "\001\002\000\056\003\126\006\122\010\u02fd\012\005\013" +
    "\007\014\014\015\016\016\107\017\105\020\136\021\101" +
    "\022\124\023\115\024\137\025\102\042\143\043\106\051" +
    "\110\052\131\053\142\054\120\056\127\001\002\000\004" +
    "\037\u02fe\001\002\000\012\006\233\025\235\032\170\047" +
    "\u0211\001\002\000\040\003\uff93\012\uff93\013\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\037\uff93\001\002\000\004" +
    "\037\u0302\001\002\000\004\037\u0301\001\002\000\040\003" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\037\uff94\001\002\000\040\003\uff92\012\uff92\013\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\037\uff92\001\002" +
    "\000\040\003\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\037\uff91\001\002\000\040\003\uff90\012" +
    "\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\037" +
    "\uff90\001\002\000\012\033\uffd8\041\uffd8\046\054\047\u0306" +
    "\001\002\000\030\003\065\016\056\017\063\020\062\021" +
    "\071\022\060\023\057\024\064\025\070\041\uff74\050\uff74" +
    "\001\002\000\006\041\073\050\u0308\001\002\000\006\003" +
    "\075\036\077\001\002\000\040\003\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\037\uffae\001\002" +
    "\000\070\003\uffe7\006\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\037\uffe7\042" +
    "\uffe7\043\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\001\002\000\020\003\ufffc\004\ufffc\005" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\001\002\000\004" +
    "\002\ufff5\001\002\000\004\033\u0316\001\002\000\004\033" +
    "\ufff8\001\002\000\006\033\ufff9\034\u0313\001\002\000\004" +
    "\034\u0311\001\002\000\004\025\u0312\001\002\000\006\033" +
    "\ufff6\034\ufff6\001\002\000\006\025\u0315\035\u0314\001\002" +
    "\000\004\033\ufffa\001\002\000\006\033\ufff7\034\ufff7\001" +
    "\002\000\020\003\ufffb\004\ufffb\005\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufff3\001\002\000\020\003\ufffe\004\ufffe\005\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0318\000\016\002\005\003\003\004\014\007\010\010" +
    "\016\011\011\001\001\000\012\004\u0318\007\010\010\u0319" +
    "\011\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u030c\006\u030e\001\001\000\004" +
    "\011\u030b\001\001\000\002\001\001\000\004\004\u030a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\041\012\037\013\030\014\027\015\022\032\043" +
    "\033\023\034\036\036\044\045\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u025b\017\047\001\001" +
    "\000\006\022\u026c\023\u026b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\u0143\031\u0141" +
    "\001\001\000\006\026\u01d6\027\u01d5\001\001\000\006\024" +
    "\u0196\025\u0195\001\001\000\006\020\u0150\021\u014f\001\001" +
    "\000\006\030\u01fc\031\u0141\001\001\000\002\001\001\000" +
    "\024\007\041\013\u028e\014\027\015\022\032\043\033\023" +
    "\034\036\036\044\045\026\001\001\000\002\001\001\000" +
    "\014\015\u01fa\033\u028d\034\036\036\044\045\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\051\017\047\001\001\000\002" +
    "\001\001\000\004\017\u027b\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\057\u027a\065\u0279\001\001\000\010" +
    "\047\065\050\060\051\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\u0278\051" +
    "\066\001\001\000\004\037\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\007\110\014\115\015\022\052" +
    "\111\053\122\054\137\071\132\072\127\073\116\076\103" +
    "\077\131\104\134\105\077\106\112\112\140\113\113\114" +
    "\120\134\133\136\102\001\001\000\002\001\001\000\006" +
    "\022\u026c\023\u026b\001\001\000\012\030\u01fc\031\u0141\074" +
    "\u0231\075\u01a3\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\051\017\047\001\001\000\002\001\001\000" +
    "\006\016\u025b\017\047\001\001\000\002\001\001\000\004" +
    "\015\u01fa\001\001\000\046\007\110\014\115\015\022\053" +
    "\u0135\054\137\071\132\072\127\073\116\076\103\077\131" +
    "\104\134\105\077\106\112\112\140\113\113\114\120\134" +
    "\u01e5\136\u01e3\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\u01d6\027\u01d5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\u0196\025\u0195\001" +
    "\001\000\010\057\u0182\065\u0186\106\u0181\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\u0150\021\u014f\001\001\000" +
    "\006\030\u0143\031\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\127\u010a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\105\362\001\001\000\044\057\172\060\163\061\170" +
    "\062\201\064\161\065\176\066\160\067\162\070\156\106" +
    "\206\107\173\110\204\111\153\122\157\124\164\125\155" +
    "\126\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\057\263\060\247\061" +
    "\170\062\201\064\261\065\264\066\260\067\262\070\257" +
    "\106\310\122\157\124\250\125\155\126\203\001\001\000" +
    "\002\001\001\000\004\063\331\001\001\000\002\001\001" +
    "\000\014\056\233\105\230\106\226\124\227\126\236\001" +
    "\001\000\002\001\001\000\004\057\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\223\001\001" +
    "\000\004\057\222\001\001\000\004\057\221\001\001\000" +
    "\002\001\001\000\004\057\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\057\172\060\163\061\170\062\201\064\161\065\176" +
    "\066\160\067\162\070\156\106\206\111\225\122\157\124" +
    "\164\125\155\126\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\056\241\057\253\060\247\061\170\062\201\064" +
    "\161\065\254\066\245\067\246\070\244\105\230\106\256" +
    "\122\157\124\250\125\155\126\203\001\001\000\014\056" +
    "\233\105\230\106\226\124\227\126\236\001\001\000\014" +
    "\056\241\105\230\106\226\124\240\126\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\056\241\057\263\060\247\061\170\062\201\064\261" +
    "\065\264\066\260\067\262\070\257\105\230\106\256\122" +
    "\157\124\250\125\155\126\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\057\270\061\267\062\201\064\161\065\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\057\212\064\273\065\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\057\300\061\277\062\201\064\161\065\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\062\326\064\161\001\001\000\036\057\253\060\247\061" +
    "\170\062\201\064\161\065\254\066\305\067\246\070\244" +
    "\106\310\122\157\124\164\125\155\126\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\322\106\321\001" +
    "\001\000\044\057\172\060\163\061\170\062\201\064\161" +
    "\065\176\066\160\067\162\070\156\106\206\107\313\110" +
    "\204\111\153\122\157\124\164\125\155\126\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\105" +
    "\325\106\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\331\001\001\000\004\064\273\001\001\000" +
    "\036\057\334\060\247\061\170\062\201\064\333\065\335" +
    "\066\332\067\246\070\244\106\310\122\157\124\164\125" +
    "\155\126\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\105\345\106\321\001\001\000\044" +
    "\057\172\060\163\061\170\062\201\064\161\065\176\066" +
    "\160\067\162\070\156\106\206\107\341\110\204\111\153" +
    "\122\157\124\164\125\155\126\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\105\344\106\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\105\350\106" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\057\253\060\247\061\170\062\201\064\161\065\254\066" +
    "\353\067\246\070\244\106\310\122\157\123\355\124\354" +
    "\125\352\126\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\057\253" +
    "\060\247\061\170\062\201\064\161\065\254\066\353\067" +
    "\246\070\244\106\310\122\157\123\357\124\354\125\352" +
    "\126\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\362\106\321\001\001\000\002\001\001\000\006" +
    "\105\365\106\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\057\172\060\163\061\170\062\201\064\161\065" +
    "\176\066\160\067\162\070\156\106\206\107\372\110\204" +
    "\111\153\122\157\124\164\125\155\126\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\057\172\060\163" +
    "\061\170\062\201\064\161\065\176\066\160\067\162\070" +
    "\156\106\206\107\375\110\204\111\153\122\157\124\164" +
    "\125\155\126\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\344\001\001\000\006\105\u0104\106\321\001" +
    "\001\000\002\001\001\000\006\105\u0107\106\u0106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\007\110\014\115\015\022\052\u0112\053\122\054" +
    "\137\071\132\072\127\073\116\076\103\077\131\104\134" +
    "\105\077\106\112\112\140\113\113\114\120\130\u0118\131" +
    "\u011a\132\u0111\134\u0117\135\u0115\136\u010d\137\u0119\140\u010e" +
    "\141\u0116\142\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\007\110\014\115\015\022\053\u0135\054\137\071" +
    "\132\072\127\073\116\076\103\077\131\104\134\105\077" +
    "\106\112\112\140\113\113\114\120\131\u0136\132\u0111\134" +
    "\u0117\135\u0115\136\u010d\137\u0119\140\u010e\141\u0116\142\u010f" +
    "\001\001\000\040\057\u0123\060\u0120\061\170\062\201\064" +
    "\161\065\u0124\066\u011d\067\u011e\070\u011c\104\u011f\106\u0125" +
    "\122\157\124\164\125\155\126\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\105\u012a\106\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\u012e\106\u012d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\056\u013c\057\253\060\247\061\170\062\201" +
    "\064\161\065\254\066\u013b\067\246\070\244\105\230\106" +
    "\256\122\157\124\164\125\155\126\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u014d\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\056\u0147\070\u0149\105\230\106\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\056\241\070" +
    "\u014a\105\230\106\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u014c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u0157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\056\u0154\057" +
    "\253\060\u0153\061\170\062\201\064\161\065\254\066\353" +
    "\067\246\070\244\105\230\106\256\122\157\124\164\125" +
    "\155\126\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\056\u015c" +
    "\057\253\060\247\061\170\062\201\064\161\065\254\066" +
    "\u015b\067\246\070\244\105\230\106\256\122\157\124\164" +
    "\125\155\126\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\127\u015e\001\001\000\002\001\001\000\004" +
    "\127\u0160\001\001\000\002\001\001\000\040\057\u0166\060" +
    "\u0163\061\170\062\201\064\161\065\u0168\066\353\067\246" +
    "\070\244\106\u0169\121\u0162\122\157\124\164\125\155\126" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\u016b" +
    "\106\321\001\001\000\002\001\001\000\006\105\u016e\106" +
    "\u016d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\115\u0174\116\u0176\117\u0175\120\u0172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\117\u017c\120" +
    "\u017b\001\001\000\040\057\u0166\060\u0163\061\170\062\201" +
    "\064\161\065\u0168\066\353\067\246\070\244\106\u0169\121" +
    "\u0178\122\157\124\164\125\155\126\203\001\001\000\002" +
    "\001\001\000\070\007\110\014\115\015\022\052\u0112\053" +
    "\122\054\137\071\132\072\127\073\116\076\103\077\131" +
    "\104\134\105\077\106\112\112\140\113\113\114\120\130" +
    "\u017a\131\u011a\132\u0111\134\u0117\135\u0115\136\u010d\137\u0119" +
    "\140\u010e\141\u0116\142\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\007\110\014\115\015\022\052\u0112\053\122\054\137\071" +
    "\132\072\127\073\116\076\103\077\131\104\134\105\077" +
    "\106\112\112\140\113\113\114\120\130\u017f\131\u011a\132" +
    "\u0111\134\u0117\135\u0115\136\u010d\137\u0119\140\u010e\141\u0116" +
    "\142\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\057\212\065\274\001\001\000\002\001" +
    "\001\000\006\105\u0188\106\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\105\u018d\106" +
    "\u018c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u019d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\056\u019a\057\253\060\247\061\170\062\201" +
    "\064\161\065\254\066\u0199\067\246\070\244\105\230\106" +
    "\256\122\157\124\164\125\155\126\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u019c\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\105\u01a0\106\u019f" +
    "\001\001\000\002\001\001\000\006\074\u01a7\075\u01a3\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\055\u01ab\057" +
    "\u01b2\060\u01af\061\170\062\201\064\161\065\u01b4\066\u01ad" +
    "\067\u01ae\070\u01ac\106\u01b5\122\157\124\164\125\155\126" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\u01aa\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\105\u01b7\106\321\001\001\000\002\001\001\000" +
    "\006\105\u01ba\106\u01b9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\057" +
    "\u01c1\060\u01be\061\170\062\201\064\161\065\254\066\353" +
    "\067\246\070\244\106\u01c2\122\157\124\164\125\155\126" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\105" +
    "\u01c4\106\321\001\001\000\002\001\001\000\006\105\u01c7" +
    "\106\u01c6\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u01c9\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u01cc\001\001\000\002\001\001\000\042\056" +
    "\u01cf\057\253\060\247\061\170\062\201\064\161\065\254" +
    "\066\u01ce\067\246\070\244\105\230\106\256\122\157\124" +
    "\164\125\155\126\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\127\u01d1\001\001\000\002\001\001\000" +
    "\004\127\u01d3\001\001\000\002\001\001\000\004\027\u01e0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\056\u01da\067\u01dc\070\u01d9\105\230\106\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\056" +
    "\241\067\u01dd\070\u014a\105\230\106\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u01df\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\127\u01e2\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\057\u0182\065" +
    "\u0186\106\u01e7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\u01eb\106\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\u01f0\106\u01ef\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\u01fc\031\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\u0204" +
    "\100\u0206\101\u0202\105\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\056\u0224\057\253\060\247\061\170\062\201" +
    "\064\161\065\254\066\u0222\067\246\070\244\102\u0223\105" +
    "\230\106\256\122\157\124\164\125\155\126\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\056\u020f\065\u020e\105\230\106\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\056\241\065\274\105\230" +
    "\106\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\056\u0215\070\u0216\105\230\106\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\105\u021a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\056" +
    "\u021e\070\u021f\105\230\106\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\071\u022c\072\127\073\116\103\u0229" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\074\u0231\075\u01a3\001\001\000\002\001\001\000\004" +
    "\105\u0233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\074\u0236\075\u01a3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\105\u023b" +
    "\001\001\000\006\074\u01a7\075\u01a3\001\001\000\004\127" +
    "\u023d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u0241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\056\u0246\057\253" +
    "\060\u0245\061\170\062\201\064\161\065\254\066\353\067" +
    "\246\070\244\105\230\106\256\122\157\124\164\125\155" +
    "\126\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\056\u024c\057\253\060\247\061\170\062\201\064\161\065" +
    "\254\066\u024b\067\246\070\244\105\230\106\256\122\157" +
    "\124\164\125\155\126\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\056\u0253\067\u0251\105\230\106\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\056\241\067\u01dd\105\230\106\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\u0259\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u025e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\u0263\001\001\000\002\001\001" +
    "\000\004\105\u0265\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\105\u0269\106\321\001\001\000\004\031\u014d" +
    "\001\001\000\006\074\u0236\075\u01a3\001\001\000\004\023" +
    "\u0273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\056\u0270\065\u026f\105\230\106\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0272" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\055" +
    "\u0275\057\u01b2\060\u01af\061\170\062\201\064\161\065\u01b4" +
    "\066\u01ad\067\u01ae\070\u01ac\106\u01b5\122\157\124\164\125" +
    "\155\126\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u027e\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\047\u0280\050" +
    "\060\051\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\007\110\014\115\015\022\052\u0284\053\122\054" +
    "\137\071\132\072\127\073\116\076\103\077\131\104\134" +
    "\105\077\106\112\112\140\113\113\114\120\001\001\000" +
    "\002\001\001\000\042\007\110\014\115\015\022\053\u0135" +
    "\054\137\071\132\072\127\073\116\076\103\077\131\104" +
    "\134\105\077\106\112\112\140\113\113\114\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\u0292" +
    "\050\060\051\066\001\001\000\002\001\001\000\004\044" +
    "\u0295\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\007\110\014\115\015\022\052\u0297\053\122\054\137\071" +
    "\132\072\127\073\116\076\103\077\131\104\134\105\077" +
    "\106\112\112\140\113\113\114\120\133\u0298\141\u029a\001" +
    "\001\000\046\007\110\014\115\015\022\053\u0135\054\137" +
    "\071\132\072\127\073\116\076\103\077\131\104\134\105" +
    "\077\106\112\112\140\113\113\114\120\133\u02a0\141\u02a1" +
    "\001\001\000\002\001\001\000\012\056\u029c\070\u029d\105" +
    "\230\106\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\047\u02a7\050\060\051\066\001\001\000\002" +
    "\001\001\000\004\040\u02aa\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\007\110\014\115\015\022\052\u02ac" +
    "\053\122\054\137\071\132\072\127\073\116\076\103\077" +
    "\131\104\134\105\077\106\112\112\140\113\113\114\120" +
    "\133\u02ad\135\u02af\001\001\000\046\007\110\014\115\015" +
    "\022\053\u0135\054\137\071\132\072\127\073\116\076\103" +
    "\077\131\104\134\105\077\106\112\112\140\113\113\114" +
    "\120\133\u02b2\135\u02b3\001\001\000\002\001\001\000\042" +
    "\056\u029c\057\253\060\u0120\061\170\062\201\064\161\065" +
    "\254\066\353\067\246\070\244\105\230\106\256\122\157" +
    "\124\164\125\155\126\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\047\u02b9\050\060\051\066" +
    "\001\001\000\002\001\001\000\004\042\u02bb\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\007\110\014\115" +
    "\015\022\052\u02be\053\122\054\137\071\132\072\127\073" +
    "\116\076\103\077\131\104\134\105\077\106\112\112\140" +
    "\113\113\114\120\133\u02bf\137\u02c1\001\001\000\046\007" +
    "\110\014\115\015\022\053\u0135\054\137\071\132\072\127" +
    "\073\116\076\103\077\131\104\134\105\077\106\112\112" +
    "\140\113\113\114\120\133\u02c4\137\u02c5\001\001\000\002" +
    "\001\001\000\042\056\u029c\057\253\060\247\061\170\062" +
    "\201\064\161\065\254\066\u011d\067\246\070\244\105\230" +
    "\106\256\122\157\124\164\125\155\126\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\u02cb" +
    "\050\060\051\066\001\001\000\002\001\001\000\004\043" +
    "\u02ce\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\007\110\014\115\015\022\052\u02d1\053\122\054\137\071" +
    "\132\072\127\073\116\076\103\077\131\104\134\105\077" +
    "\106\112\112\140\113\113\114\120\133\u02d2\135\u02d4\140" +
    "\u02d0\141\u02d5\001\001\000\002\001\001\000\052\007\110" +
    "\014\115\015\022\053\u0135\054\137\071\132\072\127\073" +
    "\116\076\103\077\131\104\134\105\077\106\112\112\140" +
    "\113\113\114\120\133\u02da\135\u02db\140\u02d9\141\u02dc\001" +
    "\001\000\002\001\001\000\042\056\u029c\057\253\060\u0120" +
    "\061\170\062\201\064\161\065\254\066\353\067\u011e\070" +
    "\u011c\105\230\106\256\122\157\124\164\125\155\126\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\047" +
    "\u02e9\050\060\051\066\001\001\000\002\001\001\000\010" +
    "\047\u02e6\050\060\051\066\001\001\000\002\001\001\000" +
    "\004\044\u02e8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u02ec\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\007\110\014\115\015\022\052\u02ef\053\122" +
    "\054\137\071\132\072\127\073\116\076\103\077\131\104" +
    "\134\105\077\106\112\112\140\113\113\114\120\001\001" +
    "\000\002\001\001\000\042\007\110\014\115\015\022\053" +
    "\u0135\054\137\071\132\072\127\073\116\076\103\077\131" +
    "\104\134\105\077\106\112\112\140\113\113\114\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\047\u02f4\050\060\051\066\001\001\000\002\001" +
    "\001\000\004\041\u02f7\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\007\110\014\115\015\022\052\u02fa\053" +
    "\122\054\137\071\132\072\127\073\116\076\103\077\131" +
    "\104\134\105\077\106\112\112\140\113\113\114\120\133" +
    "\u02fb\136\u02f9\001\001\000\002\001\001\000\046\007\110" +
    "\014\115\015\022\053\u0135\054\137\071\132\072\127\073" +
    "\116\076\103\077\131\104\134\105\077\106\112\112\140" +
    "\113\113\114\120\133\u02ff\136\u02fe\001\001\000\002\001" +
    "\001\000\012\056\u029c\065\u0186\105\230\106\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\047\u0306\050\060\051" +
    "\066\001\001\000\002\001\001\000\004\037\u0308\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/*código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    */
    private ManejadorErrores manejadorErrores;
    private RESULT resultParcial;
    private ArrayList<Variable> listaParametros = new ArrayList<>();

    public Parser(Lexer lexer, RESULT resultadoLexer, ManejadorErrores manejadorErroresLex){/*nuevo constructor*/
        super(lexer);        

        manejadorErrores = manejadorErroresLex;
        resultParcial = resultadoLexer;//ya tiene el listado de comentarios y clase [que tiene 1 sola clase xD], agregados... aunque quizá halla un poco de riesgo, al establecer la clase en el lexer, nec que sea allá para que así se seteen sin tantas vueltas el campo función de las clases globales... de todos modos en un caso en el que todo está bien, el searlo en el lexer está bien, lo raro sucedería al haber errores xD
    }    

    public void report_fatal_error(String message, Object info){
        manejadorErrores.setError(new Error(resultParcial.getClase(0).getNombre(), ((info != null)?info.toString():""), -1, 
        -1, SintaxError.FATAL_ERROR));
    }

    protected int error_sync_size(){
        return 1;
    }/*para que establezca que con un token bien leido basta para recuperarse...   */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    int numeroVarsNumericas = 0;
    int numeroVarsObjetoCreadas;//lo add con tal de que se muestre el tipo y no la palabra objeto, para ser más específica y yo diría que eso es lo que querrían ver...
    int numeroVarCreadas = 0;    

    private void addInfoMetodo(String tipo, Object nombre){
        addInfoRestanteVariables(((tipo.equals("constructor"))?tipo:"metodo")+" "+Token.parseToken(nombre).getLexema());
        resultParcial.addMetodo(new Metodo(tipo, Token.parseToken(nombre).getLexema(), listaParametros));
        listaParametros = new ArrayList<>();//puesto que si quiero usar el clear, lo que debo hacer es tener una copia del contenido de la lista en una aux, de lo contrario tb se perderá el contenido que se recibió en el parámetro
    }

    private void addInfoVariables(String tipo, Object nombre){
        if(tipo != null){
            resultParcial.addVariable(new Variable(tipo, Token.parseToken(nombre).getLexema()));
        }else{
            resultParcial.addVariable(new Variable(Token.parseToken(nombre).getLexema()));            
        }  
        numeroVarCreadas++;      
    }

    private void addTipoNumericoVars(String tipo){
        ArrayList<Variable> variables = resultParcial.getVariables();

        for(int actual = (variables.size()-numeroVarsNumericas); actual < variables.size(); actual++){            
            variables.get(actual).setTipo(tipo);                                
        }
        numeroVarsNumericas = 0;
    }

    private void addTipoObjetoVars(String tipo){
        ArrayList<Variable> variables = resultParcial.getVariables();

        for(int actual = (variables.size()-numeroVarsObjetoCreadas); actual < variables.size(); actual++){            
            variables.get(actual).setTipo(tipo);                                
        }
        numeroVarsObjetoCreadas = 0;
    }

    private void addInfoRestanteVariables(String funcion){
        ArrayList<Variable> variables = resultParcial.getVariables();

        for(int actual = (variables.size()-numeroVarCreadas); actual < variables.size(); actual++){         
            variables.get(actual).setFuncion(" ", funcion);
        }
        
        numeroVarCreadas = 0;
    }//este se invoca en las def_var de los bloques: clase y método, puesto que ahí se completa la info...

    private void addError(Token token, int linea, int columna, SintaxError error){//tipoReporte = operacion o error                
        manejadorErrores.setError(new Error(resultParcial.getClase(0).getNombre(), ((token != null)?token.getLexema():""), linea, columna, error));
        
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= imports clase 
            {
              Object RESULT =null;
		System.out.println("[S] clase con imports analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= clase 
            {
              Object RESULT =null;
		System.out.println("[S] clase analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // imports ::= imports iimport 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: import [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // imports ::= iimport 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: import [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // imports ::= error iimport 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: SECTION OF IMPORTS WITH ERRORS");
                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.IMPORT_SECTION_WITH_ERRORS);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // iimport ::= IIMPORT direccion_import PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: iimport");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // direccion_import ::= direccion PUNTO ASTERISCO 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: direccion_import [con *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // direccion_import ::= direccion 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: direccion_import [sin *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // direccion_import ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: MALFORMED IMPORT");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.IMPORT_MALFORMED);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // direccion ::= direccion PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: direccion: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // direccion ::= NOMBRE PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: direccion: PAREJA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // clase ::= visibilidad def_clase 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: CLASE [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // clase ::= def_clase 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: CLASE [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // clase ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: STRUCT OF CLASS EXPECTED: <visibilidad> CLASS <class_name> { <body> }");
                                                                             addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CLASS_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PUBLIC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PROTECTED");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PRIVATE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // visibilidad ::= FINAL 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: FINAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_clase ::= CLASS OBJETO LLAVE_A bloque_clase LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_clase: CB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_clase ::= CLASS OBJETO LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_clase: SB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_clase ::= bloque_clase sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("[S] bloque clases: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque_clase ::= sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("[S] bloque clases: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias_clase ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("[S] sentencia clases: def_var");
                                                                             addInfoRestanteVariables("clase "+resultParcial.getClase(0).getNombre());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencias_clase ::= def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] sentencia clases: def_metodo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_variable ::= visibilidad def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_variable [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_variable ::= def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_variable [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_tipo_variable ::= INT creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [INT]");
                                                                                              addTipoNumericoVars("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // def_tipo_variable ::= DOUBLE creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [DOUBLE]");
                                                                                              addTipoNumericoVars("double");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // def_tipo_variable ::= STRING creacion_variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [STRING]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // def_tipo_variable ::= CHAR creacion_variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [CHAR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // def_tipo_variable ::= BOOLEAN creacion_variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [BOOLEAN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // def_tipo_variable ::= OBJECT creacion_variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [OBJECT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // def_tipo_variable ::= OBJETO creacion_variable_objeto 
            {
              Object RESULT =null;
		int tipoObjetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipoObjetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipoObjeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] estructura: def_tipoVar [OBJETO_interno]");
                                                                                              addTipoObjetoVars(Token.parseToken(tipoObjeto).getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // def_tipo_variable ::= NOMBRE creacion_variable_objeto 
            {
              Object RESULT =null;
		int tipoObjetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipoObjetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipoObjeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] estructura: def_tipoVar [OBJETO_externo]");
                                                                                              addTipoObjetoVars(Token.parseToken(tipoObjeto).getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // def_tipo_variable ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: VARIABLE CREATION EXPECTED <tipo> <list-vars>");
                                                                                              addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_VARIABLE_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacion_variable_numero ::= creacion_variable_numero COMA variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_numero: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacion_variable_numero ::= variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_numero: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creacion_variable_numero ::= error variable_numero 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD NUMBER VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_NUMBER_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_numero ::= NOMBRE IGUAL contenido_numero 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_numero: con INI [cont_#]");
                                                                                 addInfoVariables(null, nombre);
                                                                                 numeroVarsNumericas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_numero ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_numero: con INI [cont_C]");
                                                                                 addInfoVariables(null, nombre);
                                                                                 numeroVarsNumericas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_numero ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_numero: sin INI");
                                                                                 addInfoVariables(null, nombre);
                                                                                 numeroVarsNumericas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacion_variable_string ::= creacion_variable_string COMA variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_string: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creacion_variable_string ::= variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_string: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creacion_variable_string ::= error variable_string 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD STRING VAR CREATION");
                                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_STRING_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable_string ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_string: con INI [cont_V]");
                                                                                  addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable_string ::= NOMBRE IGUAL contenido_string 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_string: con INI [cont_S]");
                                                                                  addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_string ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_string: sin INI");
                                                                                  addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // creacion_variable_char ::= creacion_variable_char COMA variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_char: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // creacion_variable_char ::= variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_char: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // creacion_variable_char ::= error variable_char 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD CHAR VAR CREATION");
                                                                                                    addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CHAR_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_char ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_char: con INI [cont_V]");
                                                                                   addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_char ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_char: con INI [cont_C]");
                                                                                   addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_char ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_char: sin INI");
                                                                                   addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // creacion_variable_boolean ::= creacion_variable_boolean COMA variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_boolean: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // creacion_variable_boolean ::= variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_boolean: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // creacion_variable_boolean ::= error variable_boolean 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD BOOLEAN VAR CREATION");
                                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BOOLEAN_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_boolean ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_boolean: con INI [cont_V]");
                                                                                    addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_boolean ::= NOMBRE IGUAL contenido_boolean 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_boolean: con INI [cont_B]");
                                                                                    addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable_boolean ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_boolean: sin Ini");
                                                                                    addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // creacion_variable_object ::= creacion_variable_object COMA variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_object: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // creacion_variable_object ::= variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_object: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // creacion_variable_object ::= error variable_object 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD OBJECT VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJECT_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_object ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_object: con INI [cont_V]");
                                                                                     addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_object ::= NOMBRE IGUAL contenido_object 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_object: con INI [cont_Oc]");
                                                                                     addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_object ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_object: con INI [cont_O]");
                                                                                     addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_object ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_object: sin Ini");
                                                                                     addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // creacion_variable_objeto ::= creacion_variable_objeto COMA variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_objetO: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // creacion_variable_objeto ::= variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_objetO: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // creacion_variable_objeto ::= error variable_objeto 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD CUSTOM OBJECT VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CUSTOM_OBJECT_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable_objeto ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_objetO: con INI [cont_V");
                                                                                     addInfoVariables(null, nombre);
                                                                                     numeroVarsObjetoCreadas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable_objeto ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_objetO: con INI [cont_O");
                                                                                     addInfoVariables(null, nombre);
                                                                                     numeroVarsObjetoCreadas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variable_objeto ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_objetO: sin Ini");
                                                                                     addInfoVariables(null, nombre);
                                                                                     numeroVarsObjetoCreadas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // def_metodo ::= visibilidad cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_metodo [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // def_metodo ::= cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_metodo [invisible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_def_metodo ::= def_metodo_constructor 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_def_metodo: def_metodo_constructor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_def_metodo ::= def_metodo_tipo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_def_metodo: def_metodo_TIPO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpo_def_metodo ::= def_metodo_void 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_def_metodo: def_metodo_VOID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpo_def_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: METHOD CREATION EXPECTED constructor|method [INT, DOUBLE, STRING, BOOLEAN, CHAR|OBJECT|OBJETO|VOID]");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_METHOD_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // def_metodo_constructor ::= OBJETO PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_constructor 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_constructor");
                                                                                                                              addInfoMetodo("constructor", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_constructor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpo_metodo_constructor ::= LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: no_void [cuerpo_cnstrct [CB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_constructor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpo_metodo_constructor ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: no_void [cuerpo_cnstrct [SB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_constructor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cuerpo_metodo_constructor ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: NO CONSTRUCTOR BODY DEFINED");
                                                                                    addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CONSTRUCTOR_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_constructor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // def_metodo_tipo ::= INT NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: INT");
                                                                                                                               addInfoMetodo("int", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // def_metodo_tipo ::= DOUBLE NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: DOUBLE");
                                                                                                                               addInfoMetodo("double", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // def_metodo_tipo ::= STRING NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_string 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: STRING");
                                                                                                                               addInfoMetodo("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // def_metodo_tipo ::= CHAR NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_char 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: CHAR");
                                                                                                                               addInfoMetodo("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // def_metodo_tipo ::= BOOLEAN NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_boolean 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: BOOLEAN");
                                                                                                                               addInfoMetodo("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // def_metodo_tipo ::= OBJECT NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_object 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: OBJECT");
                                                                                                                               addInfoMetodo("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // def_metodo_tipo ::= OBJETO NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_objeto 
            {
              Object RESULT =null;
		int tipoObjetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tipoObjetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipoObjeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: OBJETO_interno");
                                                                                                                               addInfoMetodo(Token.parseToken(tipoObjeto).getLexema(), nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // def_metodo_tipo ::= NOMBRE NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_objeto 
            {
              Object RESULT =null;
		int tipoObjetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tipoObjetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipoObjeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: OBJETO_externo");
                                                                                                                               addInfoMetodo(Token.parseToken(tipoObjeto).getLexema(), nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_metodo_numero ::= LLAVE_A retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo_metodo_numero ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_metodo_numero ::= LLAVE_A bloque RETURN THIS PUNTO cuerpo_invocacion_var PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_metodo_numero ::= LLAVE_A RETURN THIS PUNTO cuerpo_invocacion_var PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_metodo_numero ::= LLAVE_A bloque RETURN NOMBRE PUNTO cuerpo_invocacion_var PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_metodo_numero ::= LLAVE_A RETURN NOMBRE PUNTO cuerpo_invocacion_var PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_metodo_numero ::= LLAVE_A bloque RETURN THIS PUNTO cuerpo_invocacion_metodo PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_metodo_numero ::= LLAVE_A RETURN THIS PUNTO cuerpo_invocacion_metodo PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_metodo_numero ::= LLAVE_A bloque RETURN cuerpo_invocacion_metodo PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_metodo_numero ::= LLAVE_A RETURN cuerpo_invocacion_metodo PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo_metodo_numero ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF NUMBER [INT|DOUBLE] METHOD BODY");
                                                                                                                               addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_NUMBER_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo_metodo_string ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo_metodo_string ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpo_metodo_string ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION STRING OF METHOD BODY");
                                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_STRING_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpo_metodo_char ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cuerpo_metodo_char ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpo_metodo_char ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION CHAR OF METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CHAR_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cuerpo_metodo_boolean ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cuerpo_metodo_boolean ::= LLAVE_A retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cuerpo_metodo_boolean ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF BOOLEAN METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BOOLEAN_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cuerpo_metodo_object ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpo_metodo_object ::= LLAVE_A retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cuerpo_metodo_object ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cuerpo_metodo_object ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cuerpo_metodo_object ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF OBJECT METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJECT_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cuerpo_metodo_objeto ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cuerpo_metodo_objeto ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // cuerpo_metodo_objeto ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF CUSTOM OBJECT METHOD BODY");
                                                                                    addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJETO_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // def_metodo_void ::= VOID NOMBRE cuerpo_metodo_void 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] substruct: cuerpo_def_metodo: def_metodo_VOID");
                                                                                      addInfoMetodo("void", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cuerpo_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [CB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cuerpo_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [CB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cuerpo_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [SB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cuerpo_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [SB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cuerpo_metodo_void ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF VOID METHOD BODY");
                                                                                                                             addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_VOID_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parametros ::= parametro 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: UNICO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parametros ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: ninguno");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parametros ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: PARAM OR LIST OF THEM WITH ERRORS");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_PARAM_LIST);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parametro ::= tipo NOMBRE 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: parametro");
                                                                         listaParametros.add(new Variable(tipo,Token.parseToken(nombre).getLexema()));
                                                                         addInfoVariables(tipo, nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipo ::= INT 
            {
              String RESULT =null;
		System.out.println("[S] tipo: INT");
                                          RESULT = "int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo ::= DOUBLE 
            {
              String RESULT =null;
		System.out.println("[S] tipo: DOUBLE");
                                          RESULT = "double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipo ::= STRING 
            {
              String RESULT =null;
		System.out.println("[S] tipo: STRING");
                                          RESULT = "String";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipo ::= CHAR 
            {
              String RESULT =null;
		System.out.println("[S] tipo: CHAR");
                                          RESULT = "char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		System.out.println("[S] tipo: BOOLEAN");
                                          RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tipo ::= OBJECT 
            {
              String RESULT =null;
		System.out.println("[S] tipo: OBJECT");
                                          RESULT = "Object";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tipo ::= OBJETO 
            {
              String RESULT =null;
		int objetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] tipo: OBJETO_interno");
                                          RESULT = (Token.parseToken(objeto).getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tipo ::= NOMBRE 
            {
              String RESULT =null;
		int objetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] tipo: OBJETO_externo");
                                          RESULT = (Token.parseToken(objeto).getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // bloque ::= bloque sentencias 
            {
              Object RESULT =null;
		System.out.println("[S] bloque: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bloque ::= sentencias 
            {
              Object RESULT =null;
		System.out.println("[S] bloque: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentencias ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: def_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentencias ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentencias ::= ciclo 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: ciclo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentencias ::= invocacion 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: invocacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentencias ::= sentencia_control 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: sentencia_control");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentencias ::= operacion_unaria PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: operacion_unaria");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // asignacion ::= cuerpo_invocacion_var IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // asignacion ::= THIS PUNTO cuerpo_invocacion_var IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // tipos_asignacion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipos_asig: cont_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // tipos_asignacion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipos_asig: cont_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // tipos_asignacion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // tipos_asignacion ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // tipos_asignacion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // tipos_asignacion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // tipos_asignacion ::= NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: IV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // tipos_asignacion ::= THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: THIS. IV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // tipos_asignacion ::= cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: IM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // tipos_asignacion ::= THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: THIS. IM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // tipos_asignacion ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: BAD ASSIGNED CONTENT");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_ASSGINED_CONTENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // contenido_variable ::= PARENTESIS_A contenido_variable PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: ( cont_var )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // contenido_variable ::= THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: THIS . IV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // contenido_variable ::= cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: ( IV )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // contenido_variable ::= cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: IM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // contenido_variable ::= THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: THIS . IM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // contenido_numero ::= contenido_numero MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // contenido_numero ::= contenido_numero RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: RESTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // contenido_numero ::= contenido_numero ASTERISCO contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ASTERISCO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // contenido_numero ::= contenido_numero DIV contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: DIV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // contenido_numero ::= RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MENOS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // contenido_numero ::= PARENTESIS_A contenido_numero PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ( cont_# )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // contenido_numero ::= NUMERO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: NUMERO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // contenido_numero ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: NOMBRE [var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // contenido_string ::= contenido_boolean MAS cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_S [ cont_boolean + cc ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // contenido_string ::= permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_S [ permitidos ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // permitidos ::= contenido_numero MAS permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cont_# + permitidos]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // permitidos ::= contenido_char MAS permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cont_C + permitidos]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // permitidos ::= cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // cualquier_contenido ::= cualquier_contenido opciones_cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cualq_cont: [cc o_cc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cualquier_contenido",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // cualquier_contenido ::= strings 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cualq_cont: [strings]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cualquier_contenido",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // opciones_cualquier_contenido ::= MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // opciones_cualquier_contenido ::= MAS contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // opciones_cualquier_contenido ::= MAS contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // opciones_cualquier_contenido ::= MAS strings 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ strings]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // strings ::= PARENTESIS_A strings PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: strings: ( strings )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // strings ::= CADENA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: strings: CADENA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // contenido_char ::= PARENTESIS_A contenido_char PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_C: ( cont_C )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // contenido_char ::= CARACTER 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_C: CARACTER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // contenido_object ::= PARENTESIS_A contenido_object PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_Oc: ( cont_Oc )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // contenido_object ::= NEW OBJECT PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_Oc: NEW Oc()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // contenido_objeto ::= PARENTESIS_A contenido_objeto PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: ( cont_O )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // contenido_objeto ::= NEW OBJETO PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: NEW O( argucion )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // contenido_objeto ::= NEW NOMBRE PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: NEW NOMBRE( argucion )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // operacion_unaria ::= incremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_unaria: INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // operacion_unaria ::= autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_unaria: AUTO_INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // incremento ::= NOMBRE MAS MAS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: NOMBRE ++");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // incremento ::= THIS PUNTO cuerpo_invocacion_var MAS MAS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: THIS . IV ++");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // incremento ::= NOMBRE PUNTO cuerpo_invocacion_var MAS MAS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: NOMBRE . IV ++");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // incremento ::= NOMBRE RESTA RESTA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: NOMBRE --");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // incremento ::= THIS PUNTO cuerpo_invocacion_var RESTA RESTA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: THIS . IV --");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // incremento ::= NOMBRE PUNTO cuerpo_invocacion_var RESTA RESTA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: NOMBRE . IV --");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // incremento ::= MAS MAS NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // incremento ::= MAS MAS THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ THIS . IV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // incremento ::= MAS MAS NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ NOMBRE . IV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // incremento ::= RESTA RESTA NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // incremento ::= RESTA RESTA THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- THIS . IV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // incremento ::= RESTA RESTA NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- NOMBRE . IV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // autoincremento ::= THIS PUNTO cuerpo_invocacion_var opciones_autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: THIS . IV ops_autoi");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("autoincremento",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // autoincremento ::= NOMBRE PUNTO cuerpo_invocacion_var opciones_autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: NOMBRE . IV ops_autoi");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("autoincremento",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // autoincremento ::= NOMBRE opciones_autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: NOMBRE ops_autoi");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("autoincremento",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // opciones_autoincremento ::= opciones_autoIncreMas 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ops_autoincre: +=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // opciones_autoincremento ::= RESTA IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ops_autoincre: -=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // opciones_autoincremento ::= ASTERISCO IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ops_autoincre: *=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // opciones_autoincremento ::= DIV IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ops_autoincre: /=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // opciones_autoIncreMas ::= MAS IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // opciones_autoIncreMas ::= MAS IGUAL contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // opciones_autoIncreMas ::= MAS IGUAL THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [THIS . IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // opciones_autoIncreMas ::= MAS IGUAL NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [NOMBRE . IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // opciones_autoIncreMas ::= MAS IGUAL THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [THIS . IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // opciones_autoIncreMas ::= MAS IGUAL cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // opciones_autoIncreMas ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: += ONLY IS APLICABE TO STRINGs AND NUMBERs");
                                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_AUTINCREMENT_CONTENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // ciclo ::= ciclo_for 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // ciclo ::= WHILE PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: WHILE [cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ciclo ::= WHILE PARENTESIS_A contenido_variable PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: WHILE [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_boolean PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: DO-WHILE [cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_variable PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: DO-WHILE [cont_V] ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // ciclo ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: LOOP [FOR|WHILE|DO WHILE] MALFORMED");
                                                                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_LOOP_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ciclo_for ::= FOR PARENTESIS_A asignacion_for condiciones_for incremento_for PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // asignacion_for ::= asignacion_completa_for 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [completa]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // asignacion_for ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [parcial]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // asignacion_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // asignacion_for ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: \"FOR\" ASSIGNATION MALFORMED");
                                                                                                 addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_ASSIGNATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // asignacion_completa_for ::= INT NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [INT]");
                                                                                                       addInfoVariables("int", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // asignacion_completa_for ::= DOUBLE NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [DOUBLE]");
                                                                                                       addInfoVariables("double", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [STRING-CS]");
                                                                                                       addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [STRING-CV]");
                                                                                                       addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [CHAR-CC]");
                                                                                                       addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [CHAR-CV]");
                                                                                                       addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [BOOLEAN-CB]");
                                                                                                       addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [BOOLEAN-CV]");
                                                                                                       addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJECT-COc]");
                                                                                                       addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETC-CV]");
                                                                                                       addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoObjetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipoObjetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tipoObjeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO_interno-CO]");
                                                                                                       addInfoVariables(Token.parseToken(tipoObjeto).getLexema(), nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoObjetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipoObjetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tipoObjeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO_interno-CV]");
                                                                                                       addInfoVariables(Token.parseToken(tipoObjeto).getLexema(), nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // asignacion_completa_for ::= NOMBRE NOMBRE IGUAL contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoObjetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipoObjetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tipoObjeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO_externo-CO]");
                                                                                                       addInfoVariables(Token.parseToken(tipoObjeto).getLexema(), nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // asignacion_completa_for ::= NOMBRE NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoObjetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipoObjetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tipoObjeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO_externo-CV]");
                                                                                                       addInfoVariables(Token.parseToken(tipoObjeto).getLexema(), nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // condiciones_for ::= contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // condiciones_for ::= contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // condiciones_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // condiciones_for ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: \"FOR\" CONDITIONS MALFORMED");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_CONDITION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // incremento_for ::= operacion_unaria 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: incremento [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // incremento_for ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: incremento [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // incremento_for ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: \"FOR\" INCREMENT MALFORMED");
                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_INCREMENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // invocacion ::= cuerpo_invocacion_metodo PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: invocacion [tradicional]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // invocacion ::= THIS PUNTO cuerpo_invocacion_metodo PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: invocacion [this]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // cuerpo_invocacion_var ::= NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [recursi var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // cuerpo_invocacion_var ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [recursi met]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // cuerpo_invocacion_var ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [only var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // cuerpo_invocacion_metodo ::= NOMBRE PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [recursi var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // cuerpo_invocacion_metodo ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [recursi met]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // cuerpo_invocacion_metodo ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [only metodo]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // argumentacion ::= argumentos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentacion [min 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // argumentacion ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentacion [0 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // argumentos ::= argumentos COMA argumento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentos [+ 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // argumentos ::= argumento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentos [1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // argumentos ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: EXPECTED 1 OR ARGUMENTS LIST");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.ARGUMENTS_SECTION_WITH_ERRORS);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // argumento ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // argumento ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // argumento ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // argumento ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // argumento ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // argumento ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // argumento ::= THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [THIS . IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // argumento ::= cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // argumento ::= THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [THIS . IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // argumento ::= NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [NOMBRE . IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // sentencia_control ::= sentencia_if 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // sentencia_control ::= sentencia_if ELSE cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: IF-ELSE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // sentencia_control ::= sentencia_switch 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // sentencia_if ::= IF PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_if [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // sentencia_if ::= IF PARENTESIS_A contenido_variable PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_if [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // contenido_boolean ::= negaciones PARENTESIS_A contenido_boolean PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [! ( MC ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // contenido_boolean ::= PARENTESIS_A contenido_boolean PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [( MC )]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // contenido_boolean ::= contenido_boolean OPERADOR_LOGICO contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [ cont_boolean OL cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // contenido_boolean ::= condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [condicion]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // condicion ::= contenido_condicion OPERADOR_RELACIONAL opcion_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [contCondi OR op_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // condicion ::= contenido_bool OPERADOR_RELACIONAL opcion_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [cont_bool OR op_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // condicion ::= contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [cont_bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // opcion_condicion ::= contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_condicion [cont_bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_condicion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // opcion_condicion ::= contenido_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_condicion [cont_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_condicion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // contenido_condicion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [con_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // contenido_condicion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // contenido_condicion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // contenido_condicion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // contenido_condicion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // contenido_condicion ::= NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [NOMBRE . IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // contenido_condicion ::= THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [THIS . IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // contenido_condicion ::= cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // contenido_condicion ::= THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [THIS . IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // contenido_bool ::= PARENTESIS_A contenido_bool PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ( cont_bool ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // contenido_bool ::= negaciones contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ! cont_bool ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // contenido_bool ::= negaciones contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ! cont_var ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // contenido_bool ::= BOOLEANO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ BOOLEANO ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // negaciones ::= negaciones NO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: negaciones [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // negaciones ::= NO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: negaciones [UNICA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // sentencia_switch ::= SWITCH PARENTESIS_A contenido_switch PARENTESIS_C LLAVE_A cuerpo_switch LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // cuerpo_switch ::= casos_normales caso_default 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_switch [CN + posible CD]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // cuerpo_switch ::= caso_default 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_switch [posible CD o nada]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // cuerpo_switch ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: SWITCH's BODY MALDORMED");
                                                                              addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_SWITCHs_BODY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // casos_normales ::= casos_normales caso 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: casos_normales [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // casos_normales ::= caso 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: casos_normales [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // caso ::= CASE contenido_switch DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso (CB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // caso ::= CASE contenido_switch DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso (SB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // caso_default ::= DEFAULT DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [existente (CB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // caso_default ::= DEFAULT DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [existente (SB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // caso_default ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [ausente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // contenido_switch ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // contenido_switch ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // contenido_switch ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // contenido_switch ::= THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [THIS . IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // contenido_switch ::= NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [NOMBRE . IV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // contenido_switch ::= THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [THIS . IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // contenido_switch ::= cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [IM]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // contenido_switch ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: A SWITCH MUST RECEIVED A STRING|NUMBER|CHAR TYPE TO EVALUATE");
                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_TYPE_TO_EVALUATE_ON_SWITCH);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // cuerpo_estructuras ::= LLAVE_A bloque_general LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_estructuras [CB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // cuerpo_estructuras ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_estructuras [SB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // cuerpo_estructuras ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: LOOP OR CONTROL STATEMENT BODY WITH ERRORS");
                                                                                     addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BODY_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // bloque_general ::= bloque retorno 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [CR [comp o parada]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // bloque_general ::= bloque 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // bloque_general ::= retorno 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [SB y CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // retorno ::= retorno_compuesto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno [compuesto]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // retorno ::= parada PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno [parada [simple]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // retorno_compuesto ::= retorno_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // retorno_compuesto ::= retorno_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // retorno_compuesto ::= retorno_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // retorno_compuesto ::= retorno_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // retorno_compuesto ::= retorno_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // retorno_compuesto ::= retorno_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // retorno_compuesto ::= RETURN invocacion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: RETURN invocacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // retorno_compuesto ::= RETURN NOMBRE PUNTO cuerpo_invocacion_var PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: RETURN IV ;");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // retorno_compuesto ::= RETURN THIS PUNTO cuerpo_invocacion_var PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: RETURN IV ;");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // retorno_variable ::= RETURN contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_V");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_variable",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // retorno_numero ::= RETURN contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_numero",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // retorno_string ::= RETURN contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_string",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // retorno_char ::= RETURN contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_char",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // retorno_boolean ::= RETURN contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_boolean",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // retorno_object ::= RETURN contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_object",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // retorno_objeto ::= RETURN contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_objeto",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // parada ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parada [RETURN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // parada ::= BREAK 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parada [BREAK]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
