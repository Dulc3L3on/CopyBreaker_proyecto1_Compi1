
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import Backend.Objetos.Token;
import Backend.Manejadores.ManejadorErrores;
import Backend.Objetos.Error;
import Backend.Objetos.Enums.SintaxError;
import Backend.Analizadores.ParserSym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\005\000\002\003\003" +
    "\000\002\004\005\000\002\004\003\000\002\004\004\000" +
    "\002\005\005\000\002\005\005\000\002\007\004\000\002" +
    "\007\003\000\002\007\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\010\007" +
    "\000\002\010\006\000\002\011\004\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\005\000\002" +
    "\013\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\015\004\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\017\005\000\002\017" +
    "\003\000\002\017\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\021\003\000" +
    "\002\021\004\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\003\000\002\023" +
    "\004\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\003\000\002\025\004\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\003\000\002\027\005\000\002\027\003\000\002\027" +
    "\004\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\031\004\000\002\031\003\000\002\031\003\000" +
    "\002\032\007\000\002\032\003\000\002\032\005\000\002" +
    "\033\005\000\002\033\004\000\002\034\010\000\002\034" +
    "\010\000\002\034\010\000\002\034\010\000\002\034\010" +
    "\000\002\034\010\000\002\034\010\000\002\035\006\000" +
    "\002\035\005\000\002\035\006\000\002\035\005\000\002" +
    "\035\004\000\002\036\006\000\002\036\005\000\002\036" +
    "\006\000\002\036\005\000\002\036\004\000\002\037\006" +
    "\000\002\037\005\000\002\037\006\000\002\037\005\000" +
    "\002\037\004\000\002\040\006\000\002\040\005\000\002" +
    "\040\006\000\002\040\005\000\002\040\004\000\002\041" +
    "\006\000\002\041\005\000\002\041\006\000\002\041\005" +
    "\000\002\041\006\000\002\041\005\000\002\041\006\000" +
    "\002\041\005\000\002\041\004\000\002\042\006\000\002" +
    "\042\005\000\002\042\006\000\002\042\005\000\002\042" +
    "\004\000\002\043\012\000\002\043\010\000\002\043\011" +
    "\000\002\043\007\000\002\043\004\000\002\044\005\000" +
    "\002\044\003\000\002\044\002\000\002\044\004\000\002" +
    "\045\004\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\047\004\000\002\047\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\004\000\002\051" +
    "\006\000\002\051\010\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\005\000\002\052\003\000\002" +
    "\052\005\000\002\052\003\000\002\053\005\000\002\053" +
    "\003\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\004\000\002\054\005\000" +
    "\002\054\003\000\002\054\003\000\002\055\005\000\002" +
    "\055\003\000\002\056\005\000\002\056\005\000\002\056" +
    "\003\000\002\057\004\000\002\057\003\000\002\060\004" +
    "\000\002\060\004\000\002\060\004\000\002\060\004\000" +
    "\002\061\005\000\002\061\003\000\002\062\005\000\002" +
    "\062\003\000\002\064\005\000\002\064\006\000\002\065" +
    "\005\000\002\065\007\000\002\066\003\000\002\066\003" +
    "\000\002\067\005\000\002\067\005\000\002\067\005\000" +
    "\002\067\005\000\002\070\004\000\002\071\003\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\072" +
    "\005\000\002\072\005\000\002\072\003\000\002\073\003" +
    "\000\002\073\007\000\002\073\007\000\002\073\011\000" +
    "\002\073\011\000\002\073\004\000\002\074\011\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\004\000\002\076\007\000\002\076\007\000\002\076\007" +
    "\000\002\076\007\000\002\076\007\000\002\076\007\000" +
    "\002\076\007\000\002\076\007\000\002\076\007\000\002" +
    "\076\007\000\002\076\007\000\002\076\007\000\002\077" +
    "\004\000\002\077\004\000\002\077\003\000\002\077\004" +
    "\000\002\100\003\000\002\100\002\000\002\100\003\000" +
    "\002\101\004\000\002\101\006\000\002\102\005\000\002" +
    "\102\010\000\002\102\003\000\002\102\003\000\002\103" +
    "\005\000\002\103\010\000\002\103\006\000\002\104\003" +
    "\000\002\104\002\000\002\105\005\000\002\105\003\000" +
    "\002\105\004\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\107\003\000\002\107\005\000\002\107\003" +
    "\000\002\110\007\000\002\110\007\000\002\063\006\000" +
    "\002\063\005\000\002\063\005\000\002\063\003\000\002" +
    "\117\005\000\002\117\005\000\002\117\003\000\002\120" +
    "\003\000\002\120\003\000\002\122\003\000\002\122\003" +
    "\000\002\122\003\000\002\122\003\000\002\122\003\000" +
    "\002\121\005\000\002\121\004\000\002\121\004\000\002" +
    "\121\003\000\002\123\004\000\002\123\003\000\002\111" +
    "\011\000\002\112\004\000\002\112\003\000\002\112\003" +
    "\000\002\113\004\000\002\113\003\000\002\114\006\000" +
    "\002\114\005\000\002\115\005\000\002\115\004\000\002" +
    "\115\002\000\002\116\003\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\124\005\000\002\124\004" +
    "\000\002\124\004\000\002\125\004\000\002\125\003\000" +
    "\002\125\003\000\002\126\003\000\002\126\004\000\002" +
    "\127\003\000\002\127\003\000\002\127\003\000\002\127" +
    "\003\000\002\127\003\000\002\127\003\000\002\130\005" +
    "\000\002\131\005\000\002\132\005\000\002\133\005\000" +
    "\002\134\005\000\002\135\005\000\002\136\005\000\002" +
    "\137\003\000\002\137\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u028d\000\020\003\013\004\010\005\017\012\005\013" +
    "\007\014\014\015\016\001\002\000\020\003\u028c\004\u028b" +
    "\005\017\012\005\013\007\014\014\015\016\001\002\000" +
    "\026\003\ufff3\005\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\026\ufff3\001\002\000\004\002" +
    "\u028a\001\002\000\026\003\ufff2\005\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2\001" +
    "\002\000\006\003\u0280\025\u0282\001\002\000\004\005\017" +
    "\001\002\000\004\002\ufff5\001\002\000\022\002\ufff4\003" +
    "\ufffc\004\ufffc\005\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\001\002\000\026\003\ufff1\005\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\001\002" +
    "\000\004\002\uffff\001\002\000\026\003\ufff0\005\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\026\ufff0\001\002\000\004\024\020\001\002\000\004\036" +
    "\021\001\002\000\036\003\035\012\005\013\007\014\014" +
    "\015\016\016\024\017\043\020\033\021\025\022\032\023" +
    "\031\024\030\026\042\037\037\001\002\000\004\033\u027d" +
    "\001\002\000\036\003\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\026\uffb9\037\uffb9\001\002\000\006\003\044\025" +
    "\u0278\001\002\000\006\003\u01e4\025\u0266\001\002\000\036" +
    "\003\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb" +
    "\037\uffeb\001\002\000\036\003\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\026\uffec\037\uffec\001\002\000\010\003" +
    "\366\025\u024c\047\u024b\001\002\000\006\003\u0166\025\u0231" +
    "\001\002\000\006\003\u0130\025\u021f\001\002\000\006\003" +
    "\u0102\025\u020b\001\002\000\036\003\035\012\005\013\007" +
    "\014\014\015\016\016\024\017\043\020\033\021\025\022" +
    "\032\023\031\024\030\026\042\037\u020a\001\002\000\040" +
    "\003\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8" +
    "\033\uffe0\037\uffb8\001\002\000\024\003\u017a\016\024\017" +
    "\043\020\033\021\025\022\032\023\031\024\030\026\042" +
    "\001\002\000\004\002\uffee\001\002\000\036\003\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\037\uffea\001" +
    "\002\000\036\003\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\026\uffb6\037\uffb6\001\002\000\004\025\u01f7\001\002" +
    "\000\006\003\044\025\047\001\002\000\004\033\u01f6\001" +
    "\002\000\006\033\uffde\041\uffde\001\002\000\006\033\uffe6" +
    "\041\u01de\001\002\000\012\033\uffda\041\uffda\046\050\047" +
    "\051\001\002\000\014\025\176\030\200\032\174\043\207" +
    "\047\u012f\001\002\000\026\003\061\016\052\017\057\020" +
    "\056\021\064\022\054\023\053\024\060\041\uff82\050\uff82" +
    "\001\002\000\004\025\uff7f\001\002\000\004\025\uff7a\001" +
    "\002\000\004\025\uff7b\001\002\000\006\041\uff83\050\uff83" +
    "\001\002\000\004\025\uff7d\001\002\000\004\025\uff7e\001" +
    "\002\000\004\025\uff79\001\002\000\004\041\u01f3\001\002" +
    "\000\004\025\u01f2\001\002\000\006\041\065\050\066\001" +
    "\002\000\004\025\uff7c\001\002\000\020\016\052\017\057" +
    "\020\056\021\064\022\054\023\053\024\060\001\002\000" +
    "\006\003\067\036\071\001\002\000\004\037\u01f0\001\002" +
    "\000\036\003\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\026\uffb1\037\uffb1\001\002\000\056\003\120\006\114\010" +
    "\117\012\005\013\007\014\014\015\016\016\101\017\077" +
    "\020\130\021\073\022\116\023\107\024\131\025\074\042" +
    "\135\043\100\051\102\052\123\053\134\054\112\056\121" +
    "\001\002\000\004\046\u01ed\001\002\000\006\003\u01e4\025" +
    "\u01e6\001\002\000\022\003\u01ab\034\u013f\035\u01a9\042\u01aa" +
    "\043\u01a7\045\u01ad\046\uff17\047\u0140\001\002\000\004\037" +
    "\u01e2\001\002\000\066\003\uff74\006\uff74\010\uff74\011\uff74" +
    "\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020" +
    "\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\037\uff74" +
    "\042\uff74\043\uff74\051\uff74\052\uff74\053\uff74\054\uff74\056" +
    "\uff74\057\uff74\060\uff74\001\002\000\006\003\044\025\u01dd" +
    "\001\002\000\004\043\u01e0\001\002\000\006\003\044\025" +
    "\u01dd\001\002\000\004\047\u017d\001\002\000\022\003\u017a" +
    "\016\101\017\077\020\130\021\073\022\116\023\107\024" +
    "\131\001\002\000\056\003\120\006\114\010\117\012\005" +
    "\013\007\014\014\015\016\016\101\017\077\020\130\021" +
    "\073\022\116\023\107\024\131\025\074\042\135\043\100" +
    "\051\102\052\123\053\134\054\112\056\121\001\002\000" +
    "\004\033\u0175\001\002\000\070\003\uff07\006\uff07\010\uff07" +
    "\011\uff07\012\uff07\013\uff07\014\uff07\015\uff07\016\uff07\017" +
    "\uff07\020\uff07\021\uff07\022\uff07\023\uff07\024\uff07\025\uff07" +
    "\037\uff07\042\uff07\043\uff07\051\uff07\052\uff07\053\uff07\054" +
    "\uff07\055\u0173\056\uff07\057\uff07\060\uff07\001\002\000\006" +
    "\003\u0166\025\u0169\001\002\000\066\003\uff76\006\uff76\010" +
    "\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76" +
    "\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\037\uff76\042\uff76\043\uff76\051\uff76\052\uff76\053\uff76" +
    "\054\uff76\056\uff76\057\uff76\060\uff76\001\002\000\006\033" +
    "\uff46\050\uff46\001\002\000\004\047\u015f\001\002\000\066" +
    "\003\uff05\006\uff05\010\uff05\011\uff05\012\uff05\013\uff05\014" +
    "\uff05\015\uff05\016\uff05\017\uff05\020\uff05\021\uff05\022\uff05" +
    "\023\uff05\024\uff05\025\uff05\037\uff05\042\uff05\043\uff05\051" +
    "\uff05\052\uff05\053\uff05\054\uff05\056\uff05\057\uff05\060\uff05" +
    "\001\002\000\004\034\u013a\001\002\000\066\003\uff77\006" +
    "\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77\015\uff77" +
    "\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\037\uff77\042\uff77\043\uff77\051\uff77\052\uff77" +
    "\053\uff77\054\uff77\056\uff77\057\uff77\060\uff77\001\002\000" +
    "\006\003\u0130\025\u0133\001\002\000\014\025\176\030\200" +
    "\032\174\043\207\047\u012f\001\002\000\010\033\uffe0\046" +
    "\uff16\050\u012c\001\002\000\004\047\u0115\001\002\000\006" +
    "\033\uff47\050\uff47\001\002\000\004\047\u010e\001\002\000" +
    "\004\033\u010d\001\002\000\066\003\uff39\006\uff39\010\uff39" +
    "\011\uff39\012\uff39\013\uff39\014\uff39\015\uff39\016\uff39\017" +
    "\uff39\020\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025\uff39" +
    "\037\uff39\042\uff39\043\uff39\051\uff39\052\uff39\053\uff39\054" +
    "\uff39\056\uff39\057\uff39\060\uff39\001\002\000\004\037\u010c" +
    "\001\002\000\066\003\uff73\006\uff73\010\uff73\011\uff73\012" +
    "\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73" +
    "\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\037\uff73\042" +
    "\uff73\043\uff73\051\uff73\052\uff73\053\uff73\054\uff73\056\uff73" +
    "\057\uff73\060\uff73\001\002\000\006\003\u0102\025\u0105\001" +
    "\002\000\006\003\366\025\370\001\002\000\066\003\uff75" +
    "\006\uff75\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015" +
    "\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75" +
    "\024\uff75\025\uff75\037\uff75\042\uff75\043\uff75\051\uff75\052" +
    "\uff75\053\uff75\054\uff75\056\uff75\057\uff75\060\uff75\001\002" +
    "\000\066\003\uff72\006\uff72\010\uff72\011\uff72\012\uff72\013" +
    "\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72" +
    "\022\uff72\023\uff72\024\uff72\025\uff72\037\uff72\042\uff72\043" +
    "\uff72\051\uff72\052\uff72\053\uff72\054\uff72\056\uff72\057\uff72" +
    "\060\uff72\001\002\000\006\003\141\036\142\001\002\000" +
    "\004\042\136\001\002\000\004\025\137\001\002\000\006" +
    "\033\uff43\050\uff43\001\002\000\004\052\355\001\002\000" +
    "\004\037\354\001\002\000\062\003\120\006\114\010\151" +
    "\011\152\012\005\013\007\014\014\015\016\016\101\017" +
    "\077\020\130\021\073\022\116\023\107\024\131\025\074" +
    "\037\146\042\135\043\100\051\102\052\123\053\134\054" +
    "\112\056\121\001\002\000\010\037\ufed5\057\ufed5\060\ufed5" +
    "\001\002\000\010\037\ufed3\057\ufed3\060\ufed3\001\002\000" +
    "\004\033\353\001\002\000\070\003\ufede\006\ufede\010\ufede" +
    "\011\ufede\012\ufede\013\ufede\014\ufede\015\ufede\016\ufede\017" +
    "\ufede\020\ufede\021\ufede\022\ufede\023\ufede\024\ufede\025\ufede" +
    "\037\ufede\042\ufede\043\ufede\051\ufede\052\ufede\053\ufede\054" +
    "\ufede\055\ufede\056\ufede\057\ufede\060\ufede\001\002\000\010" +
    "\037\ufed9\057\ufed9\060\ufed9\001\002\000\066\003\120\006" +
    "\114\010\151\011\152\012\005\013\007\014\014\015\016" +
    "\016\101\017\077\020\130\021\073\022\116\023\107\024" +
    "\131\025\074\037\ufedb\042\135\043\100\051\102\052\123" +
    "\053\134\054\112\056\121\057\ufedb\060\ufedb\001\002\000" +
    "\026\007\203\025\176\027\162\030\200\031\173\032\174" +
    "\033\ufeca\043\207\047\202\063\205\001\002\000\004\033" +
    "\ufec9\001\002\000\010\037\ufed2\057\ufed2\060\ufed2\001\002" +
    "\000\010\037\ufed6\057\ufed6\060\ufed6\001\002\000\010\037" +
    "\ufed7\057\ufed7\060\ufed7\001\002\000\004\037\161\001\002" +
    "\000\010\037\ufed4\057\ufed4\060\ufed4\001\002\000\010\037" +
    "\ufeda\057\ufeda\060\ufeda\001\002\000\070\003\ufedf\006\ufedf" +
    "\010\ufedf\011\ufedf\012\ufedf\013\ufedf\014\ufedf\015\ufedf\016" +
    "\ufedf\017\ufedf\020\ufedf\021\ufedf\022\ufedf\023\ufedf\024\ufedf" +
    "\025\ufedf\037\ufedf\042\ufedf\043\ufedf\051\ufedf\052\ufedf\053" +
    "\ufedf\054\ufedf\055\ufedf\056\ufedf\057\ufedf\060\ufedf\001\002" +
    "\000\020\033\uff4e\040\uff4e\041\uff4e\042\uff4e\050\uff4e\061" +
    "\uff4e\062\uff4e\001\002\000\004\061\313\001\002\000\010" +
    "\033\350\042\270\062\271\001\002\000\020\033\ufeff\040" +
    "\ufeff\041\ufeff\042\ufeff\050\ufeff\061\ufeff\062\ufeff\001\002" +
    "\000\006\033\347\061\ufef5\001\002\000\020\033\uff54\040" +
    "\uff54\041\uff54\042\uff54\050\uff54\061\uff54\062\uff54\001\002" +
    "\000\006\033\346\061\ufef6\001\002\000\006\033\345\061" +
    "\ufef8\001\002\000\020\033\ufefc\040\ufefc\041\ufefc\042\ufefc" +
    "\050\ufefc\061\306\062\ufefc\001\002\000\020\033\ufef1\040" +
    "\ufef1\041\ufef1\042\ufef1\050\ufef1\061\ufef1\062\ufef1\001\002" +
    "\000\020\033\uff4c\040\uff4c\041\uff4c\042\uff4c\050\uff4c\061" +
    "\uff4c\062\uff4c\001\002\000\020\033\uff59\040\uff59\041\uff59" +
    "\042\uff59\050\uff59\061\uff59\062\uff59\001\002\000\026\033" +
    "\uff5b\035\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\045\uff5b" +
    "\050\uff5b\061\uff5b\062\uff5b\001\002\000\016\033\344\035" +
    "\214\042\263\043\213\045\217\061\ufef9\001\002\000\026" +
    "\033\uff5c\035\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\045" +
    "\uff5c\050\uff5c\061\uff5c\062\uff5c\001\002\000\010\033\343" +
    "\042\252\061\ufef7\001\002\000\024\007\203\025\176\027" +
    "\162\030\200\031\173\032\174\043\207\047\202\063\205" +
    "\001\002\000\006\023\320\024\321\001\002\000\020\033" +
    "\uff56\040\uff56\041\uff56\042\276\050\uff56\061\uff56\062\uff56" +
    "\001\002\000\012\025\ufeef\031\ufeef\047\ufeef\063\ufeef\001" +
    "\002\000\012\025\227\031\173\047\226\063\231\001\002" +
    "\000\012\025\176\030\200\043\207\047\211\001\002\000" +
    "\026\033\uff5e\035\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e" +
    "\045\uff5e\050\uff5e\061\uff5e\062\uff5e\001\002\000\012\025" +
    "\176\030\200\043\207\047\211\001\002\000\014\035\214" +
    "\042\215\043\213\045\217\050\216\001\002\000\012\025" +
    "\176\030\200\043\207\047\211\001\002\000\012\025\176" +
    "\030\200\043\207\047\211\001\002\000\012\025\176\030" +
    "\200\043\207\047\211\001\002\000\026\033\uff5d\035\uff5d" +
    "\040\uff5d\041\uff5d\042\uff5d\043\uff5d\045\uff5d\050\uff5d\061" +
    "\uff5d\062\uff5d\001\002\000\012\025\176\030\200\043\207" +
    "\047\211\001\002\000\026\033\uff5f\035\uff5f\040\uff5f\041" +
    "\uff5f\042\uff5f\043\uff5f\045\uff5f\050\uff5f\061\uff5f\062\uff5f" +
    "\001\002\000\026\033\uff62\035\214\040\uff62\041\uff62\042" +
    "\uff62\043\uff62\045\217\050\uff62\061\uff62\062\uff62\001\002" +
    "\000\026\033\uff60\035\uff60\040\uff60\041\uff60\042\uff60\043" +
    "\uff60\045\uff60\050\uff60\061\uff60\062\uff60\001\002\000\026" +
    "\033\uff61\035\214\040\uff61\041\uff61\042\uff61\043\uff61\045" +
    "\217\050\uff61\061\uff61\062\uff61\001\002\000\012\025\227" +
    "\031\173\047\316\063\231\001\002\000\020\033\ufef2\040" +
    "\ufef2\041\ufef2\042\ufef2\050\ufef2\061\ufef2\062\ufef2\001\002" +
    "\000\024\007\203\025\237\027\162\030\200\031\173\032" +
    "\174\043\207\047\243\063\205\001\002\000\020\033\uff63" +
    "\040\uff63\041\uff63\042\uff63\050\uff63\061\uff63\062\uff63\001" +
    "\002\000\020\033\ufef3\040\ufef3\041\ufef3\042\ufef3\050\ufef3" +
    "\061\ufef3\062\ufef3\001\002\000\012\025\ufef0\031\ufef0\047" +
    "\ufef0\063\ufef0\001\002\000\010\042\270\050\315\062\271" +
    "\001\002\000\020\033\ufef5\040\ufef5\041\ufef5\042\ufef5\050" +
    "\ufef5\061\ufef5\062\ufef5\001\002\000\020\033\ufef6\040\ufef6" +
    "\041\ufef6\042\ufef6\050\ufef6\061\ufef6\062\ufef6\001\002\000" +
    "\020\033\ufef8\040\ufef8\041\ufef8\042\ufef8\050\ufef8\061\ufef8" +
    "\062\ufef8\001\002\000\012\042\ufefc\050\305\061\306\062" +
    "\ufefc\001\002\000\022\033\uff63\035\uff5b\041\uff63\042\uff5b" +
    "\043\uff5b\045\uff5b\050\uff63\061\uff5b\001\002\000\026\033" +
    "\ufef9\035\214\040\ufef9\041\ufef9\042\263\043\213\045\217" +
    "\050\ufef9\061\ufef9\062\ufef9\001\002\000\004\050\304\001" +
    "\002\000\020\033\ufef7\040\ufef7\041\ufef7\042\252\050\ufef7" +
    "\061\ufef7\062\ufef7\001\002\000\024\007\203\025\237\027" +
    "\162\030\200\031\173\032\174\043\207\047\243\063\205" +
    "\001\002\000\010\042\270\050\272\062\271\001\002\000" +
    "\006\050\267\061\ufef5\001\002\000\010\042\uff54\050\262" +
    "\061\uff54\001\002\000\006\050\266\061\ufef6\001\002\000" +
    "\016\035\214\042\263\043\213\045\217\050\216\061\ufef9" +
    "\001\002\000\010\042\252\050\253\061\ufef7\001\002\000" +
    "\016\025\176\027\162\030\200\032\174\043\207\047\256" +
    "\001\002\000\020\033\uff4d\040\uff4d\041\uff4d\042\uff4d\050" +
    "\uff4d\061\uff4d\062\uff4d\001\002\000\020\033\uff57\040\uff57" +
    "\041\uff57\042\uff57\050\uff57\061\uff57\062\uff57\001\002\000" +
    "\012\035\214\042\263\043\213\045\217\001\002\000\016" +
    "\025\176\027\162\030\200\032\174\043\207\047\256\001" +
    "\002\000\004\042\252\001\002\000\004\050\262\001\002" +
    "\000\004\050\253\001\002\000\020\033\uff4f\040\uff4f\041" +
    "\uff4f\042\uff4f\050\uff4f\061\uff4f\062\uff4f\001\002\000\016" +
    "\025\176\027\162\030\200\032\174\043\207\047\256\001" +
    "\002\000\020\033\uff58\040\uff58\041\uff58\042\uff58\050\uff58" +
    "\061\uff58\062\uff58\001\002\000\026\033\uff62\035\214\040" +
    "\uff62\041\uff62\042\uff62\043\uff62\045\217\050\uff62\061\uff62" +
    "\062\uff62\001\002\000\020\033\uff4b\040\uff4b\041\uff4b\042" +
    "\uff4b\050\uff4b\061\uff4b\062\uff4b\001\002\000\020\033\uff49" +
    "\040\uff49\041\uff49\042\uff49\050\uff49\061\uff49\062\uff49\001" +
    "\002\000\006\027\162\047\275\001\002\000\024\007\203" +
    "\025\176\027\162\030\200\031\173\032\174\043\207\047" +
    "\202\063\205\001\002\000\020\033\uff01\040\uff01\041\uff01" +
    "\042\uff01\050\uff01\061\uff01\062\uff01\001\002\000\020\033" +
    "\uff00\040\uff00\041\uff00\042\uff00\050\uff00\061\uff00\062\uff00" +
    "\001\002\000\020\033\uff5a\040\uff5a\041\uff5a\042\uff5a\050" +
    "\uff5a\061\uff5a\062\uff5a\001\002\000\006\027\162\047\275" +
    "\001\002\000\024\007\203\025\176\027\162\030\200\031" +
    "\173\032\174\043\207\047\202\063\205\001\002\000\020" +
    "\033\uff55\040\uff55\041\uff55\042\uff55\050\uff55\061\uff55\062" +
    "\uff55\001\002\000\020\033\uff51\040\uff51\041\uff51\042\uff51" +
    "\050\uff51\061\uff51\062\271\001\002\000\020\033\uff50\040" +
    "\uff50\041\uff50\042\uff54\050\uff50\061\uff54\062\uff50\001\002" +
    "\000\026\033\uff53\035\214\040\uff53\041\uff53\042\uff53\043" +
    "\213\045\217\050\uff53\061\uff53\062\uff53\001\002\000\020" +
    "\033\uff52\040\uff52\041\uff52\042\uff52\050\uff52\061\uff52\062" +
    "\uff52\001\002\000\020\033\uff64\040\uff64\041\uff64\042\uff64" +
    "\050\uff64\061\uff64\062\uff64\001\002\000\020\033\ufef4\040" +
    "\ufef4\041\ufef4\042\ufef4\050\ufef4\061\ufef4\062\ufef4\001\002" +
    "\000\024\007\203\025\176\027\162\030\200\031\173\032" +
    "\174\043\207\047\202\063\205\001\002\000\020\033\ufefa" +
    "\040\ufefa\041\ufefa\042\ufefa\050\ufefa\061\313\062\ufefa\001" +
    "\002\000\006\042\270\062\271\001\002\000\020\033\ufefb" +
    "\040\ufefb\041\ufefb\042\ufefc\050\ufefb\061\306\062\ufefc\001" +
    "\002\000\020\033\ufefd\040\ufefd\041\ufefd\042\ufefd\050\ufefd" +
    "\061\ufefd\062\ufefd\001\002\000\024\007\203\025\176\027" +
    "\162\030\200\031\173\032\174\043\207\047\202\063\205" +
    "\001\002\000\020\033\ufefe\040\ufefe\041\ufefe\042\ufefe\050" +
    "\ufefe\061\ufefe\062\ufefe\001\002\000\020\033\uff02\040\uff02" +
    "\041\uff02\042\uff02\050\uff02\061\uff02\062\uff02\001\002\000" +
    "\012\025\227\031\173\047\316\063\205\001\002\000\004" +
    "\050\305\001\002\000\004\047\341\001\002\000\004\047" +
    "\322\001\002\000\030\003\332\007\203\025\176\027\162" +
    "\030\200\031\173\032\174\043\207\047\202\050\uff11\063" +
    "\205\001\002\000\006\041\uff0f\050\uff0f\001\002\000\012" +
    "\041\uff0a\042\270\050\uff0a\062\271\001\002\000\010\041" +
    "\uff08\050\uff08\061\ufef5\001\002\000\010\041\uff09\050\uff09" +
    "\061\ufef6\001\002\000\010\041\uff0c\050\uff0c\061\ufef8\001" +
    "\002\000\020\035\214\041\uff0d\042\263\043\213\045\217" +
    "\050\uff0d\061\ufef9\001\002\000\004\050\340\001\002\000" +
    "\004\041\337\001\002\000\012\041\uff0b\042\252\050\uff0b" +
    "\061\ufef7\001\002\000\006\041\335\050\uff12\001\002\000" +
    "\024\007\203\025\176\027\162\030\200\031\173\032\174" +
    "\043\207\047\202\063\205\001\002\000\006\041\uff10\050" +
    "\uff10\001\002\000\006\041\uff0e\050\uff0e\001\002\000\020" +
    "\033\uff48\040\uff48\041\uff48\042\uff48\050\uff48\061\uff48\062" +
    "\uff48\001\002\000\004\050\342\001\002\000\020\033\uff4a" +
    "\040\uff4a\041\uff4a\042\uff4a\050\uff4a\061\uff4a\062\uff4a\001" +
    "\002\000\010\037\ufece\057\ufece\060\ufece\001\002\000\010" +
    "\037\ufed0\057\ufed0\060\ufed0\001\002\000\010\037\ufecf\057" +
    "\ufecf\060\ufecf\001\002\000\010\037\ufecc\057\ufecc\060\ufecc" +
    "\001\002\000\010\037\ufecb\057\ufecb\060\ufecb\001\002\000" +
    "\010\037\ufecd\057\ufecd\060\ufecd\001\002\000\066\003\uff78" +
    "\006\uff78\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015" +
    "\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78" +
    "\024\uff78\025\uff78\037\uff78\042\uff78\043\uff78\051\uff78\052" +
    "\uff78\053\uff78\054\uff78\056\uff78\057\uff78\060\uff78\001\002" +
    "\000\010\037\ufedc\057\ufedc\060\ufedc\001\002\000\010\037" +
    "\ufed8\057\ufed8\060\ufed8\001\002\000\070\003\ufedd\006\ufedd" +
    "\010\ufedd\011\ufedd\012\ufedd\013\ufedd\014\ufedd\015\ufedd\016" +
    "\ufedd\017\ufedd\020\ufedd\021\ufedd\022\ufedd\023\ufedd\024\ufedd" +
    "\025\ufedd\037\ufedd\042\ufedd\043\ufedd\051\ufedd\052\ufedd\053" +
    "\ufedd\054\ufedd\055\ufedd\056\ufedd\057\ufedd\060\ufedd\001\002" +
    "\000\004\047\356\001\002\000\024\007\203\025\237\027" +
    "\162\030\200\031\173\032\174\043\207\047\243\063\205" +
    "\001\002\000\010\042\270\050\363\062\271\001\002\000" +
    "\004\050\361\001\002\000\004\033\362\001\002\000\066" +
    "\003\uff35\006\uff35\010\uff35\011\uff35\012\uff35\013\uff35\014" +
    "\uff35\015\uff35\016\uff35\017\uff35\020\uff35\021\uff35\022\uff35" +
    "\023\uff35\024\uff35\025\uff35\037\uff35\042\uff35\043\uff35\051" +
    "\uff35\052\uff35\053\uff35\054\uff35\056\uff35\057\uff35\060\uff35" +
    "\001\002\000\004\033\364\001\002\000\066\003\uff36\006" +
    "\uff36\010\uff36\011\uff36\012\uff36\013\uff36\014\uff36\015\uff36" +
    "\016\uff36\017\uff36\020\uff36\021\uff36\022\uff36\023\uff36\024" +
    "\uff36\025\uff36\037\uff36\042\uff36\043\uff36\051\uff36\052\uff36" +
    "\053\uff36\054\uff36\056\uff36\057\uff36\060\uff36\001\002\000" +
    "\006\033\uffbf\041\uffbf\001\002\000\004\033\u0101\001\002" +
    "\000\006\033\uffe1\041\377\001\002\000\010\033\uffbb\041" +
    "\uffbb\046\371\001\002\000\010\007\372\025\227\047\374" +
    "\001\002\000\004\024\321\001\002\000\006\033\uffbd\041" +
    "\uffbd\001\002\000\010\007\372\025\227\047\374\001\002" +
    "\000\006\033\uffbc\041\uffbc\001\002\000\004\050\267\001" +
    "\002\000\004\025\370\001\002\000\006\033\uffc0\041\uffc0" +
    "\001\002\000\006\033\uffbe\041\uffbe\001\002\000\004\033" +
    "\u010b\001\002\000\006\033\uffd8\041\uffd8\001\002\000\006" +
    "\033\uffe5\041\u0109\001\002\000\010\033\uffd4\041\uffd4\046" +
    "\u0106\001\002\000\024\007\203\025\237\027\162\030\200" +
    "\031\173\032\174\043\207\047\243\063\205\001\002\000" +
    "\010\033\uffd5\041\uffd5\061\ufef8\001\002\000\006\033\uffd6" +
    "\041\uffd6\001\002\000\004\025\u0105\001\002\000\006\033" +
    "\uffd9\041\uffd9\001\002\000\006\033\uffd7\041\uffd7\001\002" +
    "\000\036\003\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\026\uffaa\037\uffaa\001\002\000\066\003\uff71\006\uff71\010" +
    "\uff71\011\uff71\012\uff71\013\uff71\014\uff71\015\uff71\016\uff71" +
    "\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025" +
    "\uff71\037\uff71\042\uff71\043\uff71\051\uff71\052\uff71\053\uff71" +
    "\054\uff71\056\uff71\057\uff71\060\uff71\001\002\000\024\007" +
    "\203\025\237\027\162\030\200\031\173\032\174\043\207" +
    "\047\243\063\205\001\002\000\010\042\270\050\u0113\062" +
    "\271\001\002\000\004\050\u0111\001\002\000\006\003\141" +
    "\036\142\001\002\000\066\003\uff37\006\uff37\010\uff37\011" +
    "\uff37\012\uff37\013\uff37\014\uff37\015\uff37\016\uff37\017\uff37" +
    "\020\uff37\021\uff37\022\uff37\023\uff37\024\uff37\025\uff37\037" +
    "\uff37\042\uff37\043\uff37\051\uff37\052\uff37\053\uff37\054\uff37" +
    "\056\uff37\057\uff37\060\uff37\001\002\000\006\003\141\036" +
    "\142\001\002\000\066\003\uff38\006\uff38\010\uff38\011\uff38" +
    "\012\uff38\013\uff38\014\uff38\015\uff38\016\uff38\017\uff38\020" +
    "\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38\037\uff38" +
    "\042\uff38\043\uff38\051\uff38\052\uff38\053\uff38\054\uff38\056" +
    "\uff38\057\uff38\060\uff38\001\002\000\026\003\u0119\007\203" +
    "\025\176\027\162\030\200\031\173\032\174\043\207\047" +
    "\202\063\205\001\002\000\004\050\u011b\001\002\000\010" +
    "\040\ufee3\050\ufee3\061\ufef8\001\002\000\020\035\214\040" +
    "\ufee2\042\263\043\213\045\217\050\ufee2\061\ufef9\001\002" +
    "\000\006\040\ufee0\050\ufee0\001\002\000\012\040\ufee1\042" +
    "\252\050\ufee1\061\ufef7\001\002\000\004\036\u011c\001\002" +
    "\000\012\003\u011f\037\ufee4\057\u0123\060\u011d\001\002\000" +
    "\004\040\u012a\001\002\000\004\037\ufeec\001\002\000\004" +
    "\037\ufeeb\001\002\000\004\037\u0129\001\002\000\010\037" +
    "\ufee4\057\u0123\060\u011d\001\002\000\010\037\ufee9\057\ufee9" +
    "\060\ufee9\001\002\000\026\003\u0119\007\203\025\176\027" +
    "\162\030\200\031\173\032\174\043\207\047\202\063\205" +
    "\001\002\000\004\040\u0125\001\002\000\066\003\120\006" +
    "\114\010\151\011\152\012\005\013\007\014\014\015\016" +
    "\016\101\017\077\020\130\021\073\022\116\023\107\024" +
    "\131\025\074\037\ufee7\042\135\043\100\051\102\052\123" +
    "\053\134\054\112\056\121\057\ufee7\060\ufee7\001\002\000" +
    "\010\037\ufee8\057\ufee8\060\ufee8\001\002\000\004\037\ufeed" +
    "\001\002\000\010\037\ufeea\057\ufeea\060\ufeea\001\002\000" +
    "\066\003\ufeee\006\ufeee\010\ufeee\011\ufeee\012\ufeee\013\ufeee" +
    "\014\ufeee\015\ufeee\016\ufeee\017\ufeee\020\ufeee\021\ufeee\022" +
    "\ufeee\023\ufeee\024\ufeee\025\ufeee\037\ufeee\042\ufeee\043\ufeee" +
    "\051\ufeee\052\ufeee\053\ufeee\054\ufeee\056\ufeee\057\ufeee\060" +
    "\ufeee\001\002\000\062\003\120\006\114\010\151\011\152" +
    "\012\005\013\007\014\014\015\016\016\101\017\077\020" +
    "\130\021\073\022\116\023\107\024\131\025\074\037\ufee5" +
    "\042\135\043\100\051\102\052\123\053\134\054\112\056" +
    "\121\001\002\000\004\037\ufee6\001\002\000\066\003\uff34" +
    "\006\uff34\010\uff34\011\uff34\012\uff34\013\uff34\014\uff34\015" +
    "\uff34\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023\uff34" +
    "\024\uff34\025\uff34\037\uff34\042\uff34\043\uff34\051\uff34\052" +
    "\uff34\053\uff34\054\uff34\056\uff34\057\uff34\060\uff34\001\002" +
    "\000\014\033\344\035\214\042\215\043\213\045\217\001" +
    "\002\000\004\033\343\001\002\000\014\025\176\030\200" +
    "\032\174\043\207\047\u012f\001\002\000\004\033\u0139\001" +
    "\002\000\006\033\uffcc\041\uffcc\001\002\000\006\033\uffe3" +
    "\041\u0137\001\002\000\010\033\uffc8\041\uffc8\046\u0134\001" +
    "\002\000\024\007\203\025\237\027\162\030\200\031\173" +
    "\032\174\043\207\047\243\063\205\001\002\000\012\033" +
    "\uffc9\041\uffc9\042\270\062\271\001\002\000\006\033\uffca" +
    "\041\uffca\001\002\000\004\025\u0133\001\002\000\006\033" +
    "\uffcd\041\uffcd\001\002\000\006\033\uffcb\041\uffcb\001\002" +
    "\000\006\003\u013c\025\u013e\001\002\000\004\033\u015e\001" +
    "\002\000\006\033\uff16\046\uff16\001\002\000\004\046\u0148" +
    "\001\002\000\012\033\uff17\034\u013f\046\uff17\047\u0140\001" +
    "\002\000\006\003\u013c\025\u013e\001\002\000\030\003\332" +
    "\007\203\025\176\027\162\030\200\031\173\032\174\043" +
    "\207\047\202\050\uff11\063\205\001\002\000\004\050\u0142" +
    "\001\002\000\006\033\uff13\034\u0143\001\002\000\006\003" +
    "\u013c\025\u013e\001\002\000\004\033\uff14\001\002\000\006" +
    "\033\uff18\046\uff18\001\002\000\004\033\uff15\001\002\000" +
    "\006\033\uff19\046\uff19\001\002\000\030\003\u0151\006\u014e" +
    "\007\203\025\u014f\027\162\030\200\031\173\032\174\043" +
    "\207\047\202\063\205\001\002\000\004\033\u015d\001\002" +
    "\000\010\033\uff6b\042\270\062\271\001\002\000\006\033" +
    "\uff69\061\ufef5\001\002\000\006\033\uff6a\061\ufef6\001\002" +
    "\000\006\033\uff6d\061\ufef8\001\002\000\004\034\u015a\001" +
    "\002\000\022\033\uff5b\034\u0154\035\uff5b\042\uff5b\043\uff5b" +
    "\045\uff5b\047\u0155\061\uff5b\001\002\000\016\033\uff6e\035" +
    "\214\042\263\043\213\045\217\061\ufef9\001\002\000\004" +
    "\033\uff65\001\002\000\010\033\uff6c\042\252\061\ufef7\001" +
    "\002\000\004\033\uff67\001\002\000\004\025\u0159\001\002" +
    "\000\030\003\332\007\203\025\176\027\162\030\200\031" +
    "\173\032\174\043\207\047\202\050\uff11\063\205\001\002" +
    "\000\004\050\u0157\001\002\000\006\033\uff13\034\u0158\001" +
    "\002\000\004\025\u0159\001\002\000\006\034\u0154\047\u0155" +
    "\001\002\000\006\003\u013c\025\u013e\001\002\000\004\033" +
    "\uff66\001\002\000\004\033\uff68\001\002\000\106\003\uff6f" +
    "\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014" +
    "\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f" +
    "\023\uff6f\024\uff6f\025\uff6f\027\uff6f\030\uff6f\031\uff6f\032" +
    "\uff6f\033\uff6f\037\uff6f\042\uff6f\043\uff6f\047\uff6f\051\uff6f" +
    "\052\uff6f\053\uff6f\054\uff6f\056\uff6f\057\uff6f\060\uff6f\063" +
    "\uff6f\001\002\000\066\003\uff1a\006\uff1a\010\uff1a\011\uff1a" +
    "\012\uff1a\013\uff1a\014\uff1a\015\uff1a\016\uff1a\017\uff1a\020" +
    "\uff1a\021\uff1a\022\uff1a\023\uff1a\024\uff1a\025\uff1a\037\uff1a" +
    "\042\uff1a\043\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\056" +
    "\uff1a\057\uff1a\060\uff1a\001\002\000\024\007\203\025\237" +
    "\027\162\030\200\031\173\032\174\043\207\047\243\063" +
    "\205\001\002\000\010\042\270\050\u0164\062\271\001\002" +
    "\000\004\050\u0162\001\002\000\006\003\141\036\142\001" +
    "\002\000\070\003\uff03\006\uff03\010\uff03\011\uff03\012\uff03" +
    "\013\uff03\014\uff03\015\uff03\016\uff03\017\uff03\020\uff03\021" +
    "\uff03\022\uff03\023\uff03\024\uff03\025\uff03\037\uff03\042\uff03" +
    "\043\uff03\051\uff03\052\uff03\053\uff03\054\uff03\055\uff03\056" +
    "\uff03\057\uff03\060\uff03\001\002\000\006\003\141\036\142" +
    "\001\002\000\070\003\uff04\006\uff04\010\uff04\011\uff04\012" +
    "\uff04\013\uff04\014\uff04\015\uff04\016\uff04\017\uff04\020\uff04" +
    "\021\uff04\022\uff04\023\uff04\024\uff04\025\uff04\037\uff04\042" +
    "\uff04\043\uff04\051\uff04\052\uff04\053\uff04\054\uff04\055\uff04" +
    "\056\uff04\057\uff04\060\uff04\001\002\000\004\033\u0172\001" +
    "\002\000\006\033\uffc6\041\uffc6\001\002\000\006\033\uffe2" +
    "\041\u0170\001\002\000\010\033\uffc1\041\uffc1\046\u016a\001" +
    "\002\000\010\007\203\025\227\047\u016d\001\002\000\006" +
    "\033\uffc3\041\uffc3\001\002\000\006\033\uffc4\041\uffc4\001" +
    "\002\000\010\007\203\025\227\047\u016d\001\002\000\006" +
    "\033\uffc2\041\uffc2\001\002\000\004\050\266\001\002\000" +
    "\004\025\u0169\001\002\000\006\033\uffc7\041\uffc7\001\002" +
    "\000\006\033\uffc5\041\uffc5\001\002\000\006\003\141\036" +
    "\142\001\002\000\066\003\uff06\006\uff06\010\uff06\011\uff06" +
    "\012\uff06\013\uff06\014\uff06\015\uff06\016\uff06\017\uff06\020" +
    "\uff06\021\uff06\022\uff06\023\uff06\024\uff06\025\uff06\037\uff06" +
    "\042\uff06\043\uff06\051\uff06\052\uff06\053\uff06\054\uff06\056" +
    "\uff06\057\uff06\060\uff06\001\002\000\066\003\uff1b\006\uff1b" +
    "\010\uff1b\011\uff1b\012\uff1b\013\uff1b\014\uff1b\015\uff1b\016" +
    "\uff1b\017\uff1b\020\uff1b\021\uff1b\022\uff1b\023\uff1b\024\uff1b" +
    "\025\uff1b\037\uff1b\042\uff1b\043\uff1b\051\uff1b\052\uff1b\053" +
    "\uff1b\054\uff1b\056\uff1b\057\uff1b\060\uff1b\001\002\000\004" +
    "\037\u0179\001\002\000\004\037\u0178\001\002\000\036\003" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\026\uffab\037" +
    "\uffab\001\002\000\036\003\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\026\uffa9\037\uffa9\001\002\000\004\033\uffe0" +
    "\001\002\000\004\033\u017c\001\002\000\070\003\uffe9\006" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\037\uffe9\042\uffe9\043\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\056\uffe9\057\uffe9\060\uffe9\001" +
    "\002\000\030\003\u0188\006\u0189\016\u017e\017\u0185\020\u0183" +
    "\021\u018b\022\u0181\023\u017f\024\u0186\025\u018a\033\u0180\001" +
    "\002\000\004\025\u01d8\001\002\000\004\025\u01d0\001\002" +
    "\000\030\003\uff30\007\uff30\025\uff30\027\uff30\030\uff30\031" +
    "\uff30\032\uff30\033\uff30\043\uff30\047\uff30\063\uff30\001\002" +
    "\000\004\025\u01ca\001\002\000\030\003\uff32\007\uff32\025" +
    "\uff32\027\uff32\030\uff32\031\uff32\032\uff32\033\uff32\043\uff32" +
    "\047\uff32\063\uff32\001\002\000\004\025\u01c4\001\002\000" +
    "\030\003\uff31\007\uff31\025\uff31\027\uff31\030\uff31\031\uff31" +
    "\032\uff31\033\uff31\043\uff31\047\uff31\063\uff31\001\002\000" +
    "\004\025\u01c0\001\002\000\004\025\u01ba\001\002\000\030" +
    "\003\u019d\007\203\025\237\027\162\030\200\031\173\032" +
    "\174\033\u019e\043\207\047\243\063\205\001\002\000\006" +
    "\033\u0199\046\uff16\001\002\000\004\034\u0198\001\002\000" +
    "\010\034\u0193\046\uff17\047\u0194\001\002\000\004\025\u018c" +
    "\001\002\000\004\046\u018d\001\002\000\010\025\227\032" +
    "\174\047\u018f\001\002\000\004\033\u0192\001\002\000\010" +
    "\025\227\032\174\047\u018f\001\002\000\004\033\u0191\001" +
    "\002\000\030\003\uff29\007\uff29\025\uff29\027\uff29\030\uff29" +
    "\031\uff29\032\uff29\033\uff29\043\uff29\047\uff29\063\uff29\001" +
    "\002\000\030\003\uff2a\007\uff2a\025\uff2a\027\uff2a\030\uff2a" +
    "\031\uff2a\032\uff2a\033\uff2a\043\uff2a\047\uff2a\063\uff2a\001" +
    "\002\000\006\003\u013c\025\u018a\001\002\000\030\003\332" +
    "\007\203\025\176\027\162\030\200\031\173\032\174\043" +
    "\207\047\202\050\uff11\063\205\001\002\000\004\050\u0196" +
    "\001\002\000\004\034\u0197\001\002\000\006\003\u013c\025" +
    "\u018a\001\002\000\006\003\u013c\025\u018a\001\002\000\030" +
    "\003\uff2f\007\uff2f\025\uff2f\027\uff2f\030\uff2f\031\uff2f\032" +
    "\uff2f\033\uff2f\043\uff2f\047\uff2f\063\uff2f\001\002\000\010" +
    "\033\u01b9\042\270\062\271\001\002\000\014\003\u01a1\025" +
    "\u01a3\042\135\043\100\050\uff1d\001\002\000\004\033\u01a0" +
    "\001\002\000\004\033\u019f\001\002\000\014\003\uff20\025" +
    "\uff20\042\uff20\043\uff20\050\uff20\001\002\000\014\003\uff1f" +
    "\025\uff1f\042\uff1f\043\uff1f\050\uff1f\001\002\000\014\003" +
    "\uff21\025\uff21\042\uff21\043\uff21\050\uff21\001\002\000\004" +
    "\050\uff1c\001\002\000\004\050\uff1e\001\002\000\014\003" +
    "\u01ab\035\u01a9\042\u01aa\043\u01a7\045\u01ad\001\002\000\004" +
    "\050\u01a5\001\002\000\006\003\141\036\142\001\002\000" +
    "\066\003\uff33\006\uff33\010\uff33\011\uff33\012\uff33\013\uff33" +
    "\014\uff33\015\uff33\016\uff33\017\uff33\020\uff33\021\uff33\022" +
    "\uff33\023\uff33\024\uff33\025\uff33\037\uff33\042\uff33\043\uff33" +
    "\051\uff33\052\uff33\053\uff33\054\uff33\056\uff33\057\uff33\060" +
    "\uff33\001\002\000\006\043\u01b6\046\u01b7\001\002\000\006" +
    "\033\uff40\050\uff40\001\002\000\004\046\u01b4\001\002\000" +
    "\006\042\u01b0\046\u01b1\001\002\000\006\033\uff3a\050\uff3a" +
    "\001\002\000\006\033\uff41\050\uff41\001\002\000\004\046" +
    "\u01ae\001\002\000\012\025\176\030\200\043\207\047\211" +
    "\001\002\000\016\033\uff3d\035\214\042\215\043\213\045" +
    "\217\050\uff3d\001\002\000\006\033\uff45\050\uff45\001\002" +
    "\000\024\007\203\025\176\027\162\030\200\031\173\032" +
    "\174\043\207\047\202\063\205\001\002\000\010\033\uff3b" +
    "\050\uff3b\061\ufef8\001\002\000\020\033\uff3c\035\214\042" +
    "\263\043\213\045\217\050\uff3c\061\ufef9\001\002\000\012" +
    "\025\176\030\200\043\207\047\211\001\002\000\016\033" +
    "\uff3e\035\214\042\215\043\213\045\217\050\uff3e\001\002" +
    "\000\006\033\uff44\050\uff44\001\002\000\012\025\176\030" +
    "\200\043\207\047\211\001\002\000\016\033\uff3f\035\214" +
    "\042\215\043\213\045\217\050\uff3f\001\002\000\014\003" +
    "\uff22\025\uff22\042\uff22\043\uff22\050\uff22\001\002\000\004" +
    "\046\u01bb\001\002\000\010\007\372\025\227\047\374\001" +
    "\002\000\004\033\u01bf\001\002\000\004\033\u01be\001\002" +
    "\000\030\003\uff24\007\uff24\025\uff24\027\uff24\030\uff24\031" +
    "\uff24\032\uff24\033\uff24\043\uff24\047\uff24\063\uff24\001\002" +
    "\000\030\003\uff23\007\uff23\025\uff23\027\uff23\030\uff23\031" +
    "\uff23\032\uff23\033\uff23\043\uff23\047\uff23\063\uff23\001\002" +
    "\000\004\046\u01c1\001\002\000\012\025\176\030\200\043" +
    "\207\047\211\001\002\000\014\033\u01c3\035\214\042\215" +
    "\043\213\045\217\001\002\000\030\003\uff2d\007\uff2d\025" +
    "\uff2d\027\uff2d\030\uff2d\031\uff2d\032\uff2d\033\uff2d\043\uff2d" +
    "\047\uff2d\063\uff2d\001\002\000\004\046\u01c5\001\002\000" +
    "\024\007\203\025\237\027\162\030\200\031\173\032\174" +
    "\043\207\047\243\063\205\001\002\000\006\033\u01c9\061" +
    "\ufef8\001\002\000\004\033\u01c8\001\002\000\030\003\uff2b" +
    "\007\uff2b\025\uff2b\027\uff2b\030\uff2b\031\uff2b\032\uff2b\033" +
    "\uff2b\043\uff2b\047\uff2b\063\uff2b\001\002\000\030\003\uff2c" +
    "\007\uff2c\025\uff2c\027\uff2c\030\uff2c\031\uff2c\032\uff2c\033" +
    "\uff2c\043\uff2c\047\uff2c\063\uff2c\001\002\000\004\046\u01cb" +
    "\001\002\000\024\007\203\025\237\027\162\030\200\031" +
    "\173\032\174\043\207\047\243\063\205\001\002\000\010" +
    "\033\u01cf\042\270\062\271\001\002\000\004\033\u01ce\001" +
    "\002\000\030\003\uff27\007\uff27\025\uff27\027\uff27\030\uff27" +
    "\031\uff27\032\uff27\033\uff27\043\uff27\047\uff27\063\uff27\001" +
    "\002\000\030\003\uff28\007\uff28\025\uff28\027\uff28\030\uff28" +
    "\031\uff28\032\uff28\033\uff28\043\uff28\047\uff28\063\uff28\001" +
    "\002\000\004\046\u01d1\001\002\000\010\007\u01d2\025\227" +
    "\047\u01d4\001\002\000\004\023\320\001\002\000\004\033" +
    "\u01d7\001\002\000\010\007\u01d2\025\227\047\u01d4\001\002" +
    "\000\004\033\u01d6\001\002\000\030\003\uff25\007\uff25\025" +
    "\uff25\027\uff25\030\uff25\031\uff25\032\uff25\033\uff25\043\uff25" +
    "\047\uff25\063\uff25\001\002\000\030\003\uff26\007\uff26\025" +
    "\uff26\027\uff26\030\uff26\031\uff26\032\uff26\033\uff26\043\uff26" +
    "\047\uff26\063\uff26\001\002\000\004\046\u01d9\001\002\000" +
    "\012\025\176\030\200\043\207\047\211\001\002\000\014" +
    "\033\u01db\035\214\042\215\043\213\045\217\001\002\000" +
    "\030\003\uff2e\007\uff2e\025\uff2e\027\uff2e\030\uff2e\031\uff2e" +
    "\032\uff2e\033\uff2e\043\uff2e\047\uff2e\063\uff2e\001\002\000" +
    "\006\033\uffe7\041\u01de\001\002\000\010\033\uffda\041\uffda" +
    "\046\050\001\002\000\004\025\u01dd\001\002\000\006\033" +
    "\uffdf\041\uffdf\001\002\000\004\025\u01e1\001\002\000\006" +
    "\033\uff42\050\uff42\001\002\000\036\003\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\026\uffa8\037\uffa8\001\002\000" +
    "\006\033\uffd2\041\uffd2\001\002\000\004\033\u01ec\001\002" +
    "\000\006\033\uffe4\041\u01ea\001\002\000\010\033\uffce\041" +
    "\uffce\046\u01e7\001\002\000\010\025\227\032\174\047\u018f" +
    "\001\002\000\006\033\uffcf\041\uffcf\001\002\000\006\033" +
    "\uffd0\041\uffd0\001\002\000\004\025\u01e6\001\002\000\006" +
    "\033\uffd3\041\uffd3\001\002\000\006\033\uffd1\041\uffd1\001" +
    "\002\000\030\003\u0151\006\u014e\007\203\025\u014f\027\162" +
    "\030\200\031\173\032\174\043\207\047\202\063\205\001" +
    "\002\000\004\033\u01ef\001\002\000\106\003\uff70\006\uff70" +
    "\007\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70\015" +
    "\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70" +
    "\024\uff70\025\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033" +
    "\uff70\037\uff70\042\uff70\043\uff70\047\uff70\051\uff70\052\uff70" +
    "\053\uff70\054\uff70\056\uff70\057\uff70\060\uff70\063\uff70\001" +
    "\002\000\036\003\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\026\uffa7\037\uffa7\001\002\000\006\041\uff84\050\uff84" +
    "\001\002\000\006\041\uff80\050\uff80\001\002\000\006\041" +
    "\uff81\050\uff81\001\002\000\006\033\uffdb\041\uffdb\001\002" +
    "\000\016\033\uffdc\035\214\041\uffdc\042\215\043\213\045" +
    "\217\001\002\000\006\033\uffdd\041\uffdd\001\002\000\006" +
    "\003\u01f8\047\u01fa\001\002\000\004\037\u0207\001\002\000" +
    "\036\003\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\026" +
    "\uffb5\037\uffb5\001\002\000\026\003\061\016\052\017\057" +
    "\020\056\021\064\022\054\023\053\024\060\041\uff82\050" +
    "\uff82\001\002\000\006\041\065\050\u01fc\001\002\000\004" +
    "\036\u01fd\001\002\000\060\003\120\006\114\010\u0200\012" +
    "\005\013\007\014\014\015\016\016\101\017\077\020\130" +
    "\021\073\022\116\023\107\024\131\025\074\037\u01fe\042" +
    "\135\043\100\051\102\052\123\053\134\054\112\056\121" +
    "\001\002\000\036\003\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86" +
    "\024\uff86\026\uff86\037\uff86\001\002\000\060\003\120\006" +
    "\114\010\u0204\012\005\013\007\014\014\015\016\016\101" +
    "\017\077\020\130\021\073\022\116\023\107\024\131\025" +
    "\074\037\u0203\042\135\043\100\051\102\052\123\053\134" +
    "\054\112\056\121\001\002\000\004\033\u0201\001\002\000" +
    "\004\037\u0202\001\002\000\036\003\uff87\012\uff87\013\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\026\uff87\037\uff87\001\002\000\036" +
    "\003\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\026\uff88" +
    "\037\uff88\001\002\000\004\033\u0205\001\002\000\004\037" +
    "\u0206\001\002\000\036\003\uff89\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\026\uff89\037\uff89\001\002\000\036\003\uff85" +
    "\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\026\uff85\037\uff85" +
    "\001\002\000\036\003\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\026\uffba\037\uffba\001\002\000\036\003\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\026\uffed\037\uffed\001" +
    "\002\000\004\002\uffef\001\002\000\012\033\uffd4\041\uffd4" +
    "\046\u0106\047\u020c\001\002\000\026\003\061\016\052\017" +
    "\057\020\056\021\064\022\054\023\053\024\060\041\uff82" +
    "\050\uff82\001\002\000\006\041\065\050\u020e\001\002\000" +
    "\006\003\u020f\036\u0211\001\002\000\004\037\u021e\001\002" +
    "\000\036\003\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\026\uffb0\037\uffb0\001\002\000\056\003\120\006\114\010" +
    "\u0214\012\005\013\007\014\014\015\016\016\101\017\077" +
    "\020\130\021\073\022\116\023\107\024\131\025\074\042" +
    "\135\043\100\051\102\052\123\053\134\054\112\056\121" +
    "\001\002\000\056\003\120\006\114\010\u0214\012\005\013" +
    "\007\014\014\015\016\016\101\017\077\020\130\021\073" +
    "\022\116\023\107\024\131\025\074\042\135\043\100\051" +
    "\102\052\123\053\134\054\112\056\121\001\002\000\004" +
    "\037\u0219\001\002\000\024\007\203\025\237\027\162\030" +
    "\200\031\173\032\174\043\207\047\243\063\205\001\002" +
    "\000\004\037\u0216\001\002\000\036\003\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\026\uffa3\037\uffa3\001\002\000" +
    "\004\033\u0218\001\002\000\004\037\ufed1\001\002\000\036" +
    "\003\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5" +
    "\037\uffa5\001\002\000\004\037\u021d\001\002\000\004\037" +
    "\u021c\001\002\000\036\003\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\026\uffa4\037\uffa4\001\002\000\036\003\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\037\uffa6" +
    "\001\002\000\036\003\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\026\uffa2\037\uffa2\001\002\000\012\033\uffc8\041" +
    "\uffc8\046\u0134\047\u0220\001\002\000\026\003\061\016\052" +
    "\017\057\020\056\021\064\022\054\023\053\024\060\041" +
    "\uff82\050\uff82\001\002\000\006\041\065\050\u0222\001\002" +
    "\000\006\003\u0224\036\u0225\001\002\000\036\003\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae\037\uffae\001" +
    "\002\000\004\037\u0230\001\002\000\056\003\120\006\114" +
    "\010\u0228\012\005\013\007\014\014\015\016\016\101\017" +
    "\077\020\130\021\073\022\116\023\107\024\131\025\074" +
    "\042\135\043\100\051\102\052\123\053\134\054\112\056" +
    "\121\001\002\000\056\003\120\006\114\010\u0228\012\005" +
    "\013\007\014\014\015\016\016\101\017\077\020\130\021" +
    "\073\022\116\023\107\024\131\025\074\042\135\043\100" +
    "\051\102\052\123\053\134\054\112\056\121\001\002\000" +
    "\004\037\u022b\001\002\000\024\007\203\025\237\027\162" +
    "\030\200\031\173\032\174\043\207\047\243\063\205\001" +
    "\002\000\004\037\u022a\001\002\000\036\003\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\026\uff99\037\uff99\001\002" +
    "\000\036\003\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\026\uff9b\037\uff9b\001\002\000\004\037\u022f\001\002\000" +
    "\004\037\u022e\001\002\000\036\003\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\026\uff9a\037\uff9a\001\002\000\036" +
    "\003\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c" +
    "\037\uff9c\001\002\000\036\003\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\026\uff98\037\uff98\001\002\000\012\033" +
    "\uffc1\041\uffc1\046\u016a\047\u0232\001\002\000\026\003\061" +
    "\016\052\017\057\020\056\021\064\022\054\023\053\024" +
    "\060\041\uff82\050\uff82\001\002\000\006\041\065\050\u0234" +
    "\001\002\000\006\003\u0235\036\u0237\001\002\000\004\037" +
    "\u024a\001\002\000\036\003\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\026\uffad\037\uffad\001\002\000\056\003\120" +
    "\006\114\010\u023b\012\005\013\007\014\014\015\016\016" +
    "\101\017\077\020\130\021\073\022\116\023\107\024\131" +
    "\025\074\042\135\043\100\051\102\052\123\053\134\054" +
    "\112\056\121\001\002\000\004\037\u0249\001\002\000\056" +
    "\003\120\006\114\010\u023b\012\005\013\007\014\014\015" +
    "\016\016\101\017\077\020\130\021\073\022\116\023\107" +
    "\024\131\025\074\042\135\043\100\051\102\052\123\053" +
    "\134\054\112\056\121\001\002\000\004\037\u0240\001\002" +
    "\000\024\007\203\025\237\027\162\030\200\031\173\032" +
    "\174\043\207\047\243\063\205\001\002\000\004\037\u023f" +
    "\001\002\000\004\037\u023e\001\002\000\036\003\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92" +
    "\021\uff92\022\uff92\023\uff92\024\uff92\026\uff92\037\uff92\001" +
    "\002\000\036\003\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024" +
    "\uff90\026\uff90\037\uff90\001\002\000\036\003\uff96\012\uff96" +
    "\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\026\uff96\037\uff96\001\002" +
    "\000\004\037\u0248\001\002\000\004\037\u0247\001\002\000" +
    "\004\037\u0246\001\002\000\004\037\u0245\001\002\000\036" +
    "\003\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017" +
    "\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\026\uff93" +
    "\037\uff93\001\002\000\036\003\uff91\012\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91" +
    "\023\uff91\024\uff91\026\uff91\037\uff91\001\002\000\036\003" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\026\uff97\037" +
    "\uff97\001\002\000\036\003\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\026\uff95\037\uff95\001\002\000\036\003\uff94" +
    "\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\023\uff94\024\uff94\026\uff94\037\uff94" +
    "\001\002\000\036\003\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\026\uff8f\037\uff8f\001\002\000\026\003\061\016" +
    "\052\017\057\020\056\021\064\022\054\023\053\024\060" +
    "\041\uff82\050\uff82\001\002\000\012\033\uffbb\041\uffbb\046" +
    "\371\047\u024d\001\002\000\026\003\061\016\052\017\057" +
    "\020\056\021\064\022\054\023\053\024\060\041\uff82\050" +
    "\uff82\001\002\000\006\041\065\050\u024f\001\002\000\006" +
    "\003\u0250\036\u0252\001\002\000\004\037\u025e\001\002\000" +
    "\036\003\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026" +
    "\uffac\037\uffac\001\002\000\056\003\120\006\114\010\u0255" +
    "\012\005\013\007\014\014\015\016\016\101\017\077\020" +
    "\130\021\073\022\116\023\107\024\131\025\074\042\135" +
    "\043\100\051\102\052\123\053\134\054\112\056\121\001" +
    "\002\000\056\003\120\006\114\010\u0255\012\005\013\007" +
    "\014\014\015\016\016\101\017\077\020\130\021\073\022" +
    "\116\023\107\024\131\025\074\042\135\043\100\051\102" +
    "\052\123\053\134\054\112\056\121\001\002\000\004\037" +
    "\u0259\001\002\000\010\007\372\025\227\047\374\001\002" +
    "\000\004\037\u0257\001\002\000\036\003\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\026\uff8b\037\uff8b\001\002\000" +
    "\004\033\347\001\002\000\036\003\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022" +
    "\uff8d\023\uff8d\024\uff8d\026\uff8d\037\uff8d\001\002\000\004" +
    "\037\u025d\001\002\000\004\037\u025c\001\002\000\036\003" +
    "\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\026\uff8c\037" +
    "\uff8c\001\002\000\036\003\uff8e\012\uff8e\013\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\026\uff8e\037\uff8e\001\002\000\036\003\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\026\uff8a\037\uff8a" +
    "\001\002\000\006\041\065\050\u0260\001\002\000\004\036" +
    "\u0262\001\002\000\036\003\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\026\uffb7\037\uffb7\001\002\000\056\003\120" +
    "\006\114\012\005\013\007\014\014\015\016\016\101\017" +
    "\077\020\130\021\073\022\116\023\107\024\131\025\074" +
    "\037\u0263\042\135\043\100\051\102\052\123\053\134\054" +
    "\112\056\121\001\002\000\036\003\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\026\uffb3\037\uffb3\001\002\000\056" +
    "\003\120\006\114\012\005\013\007\014\014\015\016\016" +
    "\101\017\077\020\130\021\073\022\116\023\107\024\131" +
    "\025\074\037\u0265\042\135\043\100\051\102\052\123\053" +
    "\134\054\112\056\121\001\002\000\036\003\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\037\uffb4\001\002" +
    "\000\012\033\uffce\041\uffce\046\u01e7\047\u0267\001\002\000" +
    "\026\003\061\016\052\017\057\020\056\021\064\022\054" +
    "\023\053\024\060\041\uff82\050\uff82\001\002\000\006\041" +
    "\065\050\u0269\001\002\000\006\003\u026a\036\u026c\001\002" +
    "\000\004\037\u0277\001\002\000\036\003\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\026\uffaf\037\uffaf\001\002\000" +
    "\056\003\120\006\114\010\u0270\012\005\013\007\014\014" +
    "\015\016\016\101\017\077\020\130\021\073\022\116\023" +
    "\107\024\131\025\074\042\135\043\100\051\102\052\123" +
    "\053\134\054\112\056\121\001\002\000\004\037\u0276\001" +
    "\002\000\056\003\120\006\114\010\u0270\012\005\013\007" +
    "\014\014\015\016\016\101\017\077\020\130\021\073\022" +
    "\116\023\107\024\131\025\074\042\135\043\100\051\102" +
    "\052\123\053\134\054\112\056\121\001\002\000\004\037" +
    "\u0271\001\002\000\010\025\227\032\174\047\u018f\001\002" +
    "\000\036\003\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\026\uffa0\037\uffa0\001\002\000\004\037\u0275\001\002\000" +
    "\004\037\u0274\001\002\000\036\003\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\026\uffa1\037\uffa1\001\002\000\036" +
    "\003\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f" +
    "\037\uff9f\001\002\000\036\003\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\026\uff9e\037\uff9e\001\002\000\036\003" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d\037" +
    "\uff9d\001\002\000\012\033\uffda\041\uffda\046\050\047\u0279" +
    "\001\002\000\026\003\061\016\052\017\057\020\056\021" +
    "\064\022\054\023\053\024\060\041\uff82\050\uff82\001\002" +
    "\000\006\041\065\050\u027b\001\002\000\006\003\067\036" +
    "\071\001\002\000\036\003\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\026\uffb2\037\uffb2\001\002\000\070\003\uffe8" +
    "\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\037\uffe8\042\uffe8\043\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\001\002\000\004\002\ufff6\001\002\000\004\033\u0289\001" +
    "\002\000\004\004\u0288\001\002\000\006\033\ufffa\034\u0285" +
    "\001\002\000\004\034\u0283\001\002\000\004\025\u0284\001" +
    "\002\000\006\033\ufff7\034\ufff7\001\002\000\006\025\u0287" +
    "\035\u0286\001\002\000\004\033\ufffb\001\002\000\006\033" +
    "\ufff8\034\ufff8\001\002\000\004\033\ufff9\001\002\000\020" +
    "\003\ufffd\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\001\002\000\004\002\001\001\002\000\006\003\u0280" +
    "\025\u0282\001\002\000\004\002\ufff4\001\002\000\004\002" +
    "\000\001\002\000\004\033\u028f\001\002\000\020\003\ufffe" +
    "\004\ufffe\005\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u028d\000\014\002\005\003\003\006\010\007\014\010" +
    "\011\001\001\000\010\006\010\007\u028c\010\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\u027e\005\u0280\001\001\000\004\010\u027d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\035\011\033\012\026\013\025\014" +
    "\021\031\037\032\022\034\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u01db\016\044\001\001\000" +
    "\006\021\u01e4\022\u01e2\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\366\030\364\001\001\000\006\025" +
    "\u0167\026\u0166\001\001\000\006\023\u0131\024\u0130\001\001" +
    "\000\006\017\u0103\020\u0102\001\001\000\020\006\035\012" +
    "\u0208\013\025\014\021\031\037\032\022\034\040\001\001" +
    "\000\002\001\001\000\010\014\u017a\032\u0207\034\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\045\016\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\054\u01f4\062\u01f3\001\001\000\010\044" +
    "\062\045\054\046\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\u01f0\046\061\001\001\000\004\035\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\102\013" +
    "\107\014\021\047\103\050\114\051\131\066\123\067\121" +
    "\070\110\073\075\074\124\101\126\102\071\103\104\107" +
    "\132\110\105\111\112\131\125\133\074\001\001\000\002" +
    "\001\001\000\006\021\u01e4\022\u01e2\001\001\000\006\071" +
    "\u01ab\072\u01a7\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\045\016\044\001\001\000\002\001\001\000" +
    "\006\015\u01db\016\044\001\001\000\002\001\001\000\004" +
    "\014\u017a\001\001\000\046\006\102\013\107\014\021\050" +
    "\350\051\131\066\123\067\121\070\110\073\075\074\124" +
    "\101\126\102\071\103\104\107\132\110\105\111\112\131" +
    "\u0176\133\u0175\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\u0167\026\u0166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\u0131\024\u0130\001" +
    "\001\000\006\054\u012c\062\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u0103\020\u0102\001\001\000\006\027" +
    "\366\030\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\124\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\006\102\013\107\014\021\047\147\050\114\051" +
    "\131\066\123\067\121\070\110\073\075\074\124\101\126" +
    "\102\071\103\104\107\132\110\105\111\112\125\155\126" +
    "\157\127\146\131\154\132\153\133\142\134\156\135\143" +
    "\136\152\137\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\006\102\013\107\014\021\050\350\051\131\066" +
    "\123\067\121\070\110\073\075\074\124\101\126\102\071" +
    "\103\104\107\132\110\105\111\112\126\351\127\146\131" +
    "\154\132\153\133\142\134\156\135\143\136\152\137\144" +
    "\001\001\000\034\054\176\055\170\056\174\057\203\061" +
    "\166\062\200\063\163\064\167\065\165\117\164\121\171" +
    "\122\162\123\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\054\247\055\234\056\174\057\203\061\245\062\250\063" +
    "\243\064\246\065\244\117\164\121\235\122\162\123\205" +
    "\001\001\000\002\001\001\000\004\060\276\001\001\000" +
    "\002\001\001\000\010\053\224\121\227\123\223\001\001" +
    "\000\004\054\207\001\001\000\002\001\001\000\004\054" +
    "\211\001\001\000\002\001\001\000\004\054\222\001\001" +
    "\000\004\054\221\001\001\000\004\054\220\001\001\000" +
    "\002\001\001\000\004\054\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\053\224\121\227\123\223\001\001\000\002\001\001" +
    "\000\036\053\240\054\237\055\234\056\174\057\203\061" +
    "\166\062\241\063\231\064\233\065\232\117\164\121\235" +
    "\122\162\123\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\053\240\054\247\055\234\056\174\057" +
    "\203\061\245\062\250\063\243\064\246\065\244\117\164" +
    "\121\235\122\162\123\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\054\254\056\253\057" +
    "\203\061\166\062\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\054\211\061\257\062" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\054\264\056\263\057" +
    "\203\061\166\062\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\057" +
    "\273\061\166\001\001\000\034\054\237\055\234\056\174" +
    "\057\203\061\166\062\241\063\272\064\233\065\232\117" +
    "\164\121\171\122\162\123\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\276\001\001\000\004\061" +
    "\257\001\001\000\034\054\301\055\234\056\174\057\203" +
    "\061\300\062\302\063\277\064\233\065\232\117\164\121" +
    "\171\122\162\123\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\054\237" +
    "\055\234\056\174\057\203\061\166\062\241\063\307\064" +
    "\233\065\232\117\164\120\311\121\310\122\306\123\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\054\237\055\234\056\174" +
    "\057\203\061\166\062\241\063\307\064\233\065\232\117" +
    "\164\120\313\121\310\122\306\123\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\053\240\121\316\123" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\054\327\055\326\056\174\057\203\061" +
    "\166\062\332\063\323\064\325\065\324\104\330\105\333" +
    "\106\322\117\164\121\171\122\162\123\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\054\327\055\326\056\174\057\203\061\166\062" +
    "\332\063\323\064\325\065\324\106\335\117\164\121\171" +
    "\122\162\123\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\053\357\054\237\055\234" +
    "\056\174\057\203\061\166\062\241\063\356\064\233\065" +
    "\232\117\164\121\171\122\162\123\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\053\372\065\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\240\065\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\377\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\053\u0107" +
    "\054\237\055\u0106\056\174\057\203\061\166\062\241\063" +
    "\307\064\233\065\232\117\164\121\171\122\162\123\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\053\u010f\054\237\055" +
    "\234\056\174\057\203\061\166\062\241\063\u010e\064\233" +
    "\065\232\117\164\121\171\122\162\123\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\124\u0111\001\001" +
    "\000\002\001\001\000\004\124\u0113\001\001\000\002\001" +
    "\001\000\036\054\u0117\055\u0116\056\174\057\203\061\166" +
    "\062\u0119\063\307\064\233\065\232\116\u0115\117\164\121" +
    "\171\122\162\123\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\112\u011f\113\u0120\114\u0121" +
    "\115\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\114\u0127\115\u0126" +
    "\001\001\000\002\001\001\000\036\054\u0117\055\u0116\056" +
    "\174\057\203\061\166\062\u0119\063\307\064\233\065\232" +
    "\116\u0123\117\164\121\171\122\162\123\205\001\001\000" +
    "\002\001\001\000\070\006\102\013\107\014\021\047\147" +
    "\050\114\051\131\066\123\067\121\070\110\073\075\074" +
    "\124\101\126\102\071\103\104\107\132\110\105\111\112" +
    "\125\u0125\126\157\127\146\131\154\132\153\133\142\134" +
    "\156\135\143\136\152\137\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\006\102\013\107\014\021\047\147\050\114\051\131" +
    "\066\123\067\121\070\110\073\075\074\124\101\126\102" +
    "\071\103\104\107\132\110\105\111\112\125\u012a\126\157" +
    "\127\146\131\154\132\153\133\142\134\156\135\143\136" +
    "\152\137\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\054\211\062" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\053\u0135\054\237\055" +
    "\234\056\174\057\203\061\166\062\241\063\u0134\064\233" +
    "\065\232\117\164\121\171\122\162\123\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u0137\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\102\u013c\103" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\102\u0146\103\u0145\001" +
    "\001\000\042\054\327\055\326\056\174\057\203\061\166" +
    "\062\332\063\323\064\325\065\324\104\u0140\105\333\106" +
    "\322\117\164\121\171\122\162\123\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\102\u0144\103\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\052\u0148\054\u014f\055\u014c\056" +
    "\174\057\203\061\166\062\u0151\063\u0149\064\u014b\065\u014a" +
    "\103\u0152\117\164\121\171\122\162\123\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\u0145\001\001\000\042\054" +
    "\327\055\326\056\174\057\203\061\166\062\332\063\323" +
    "\064\325\065\324\104\u0155\105\333\106\322\117\164\121" +
    "\171\122\162\123\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\u0143\001\001\000\002\001\001\000" +
    "\006\102\u015b\103\u015a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\053" +
    "\u0160\054\237\055\234\056\174\057\203\061\166\062\241" +
    "\063\u015f\064\233\065\232\117\164\121\171\122\162\123" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\124\u0162\001\001\000\002\001\001\000\004\124\u0164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\u016b\064" +
    "\u016a\065\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\053\240\064\u016e\065\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u0170\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\124\u0173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\051\u0183" +
    "\075\u0186\076\u0181\102\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\053\u019b\054\237\055\234" +
    "\056\174\057\203\061\166\062\241\063\u0199\064\233\065" +
    "\232\077\u019a\117\164\121\171\122\162\123\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\053\u018f\062\u018d" +
    "\001\001\000\002\001\001\000\006\053\240\062\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0146\001\001\000\042\054\327\055\326\056" +
    "\174\057\203\061\166\062\332\063\323\064\325\065\324" +
    "\104\u0194\105\333\106\322\117\164\121\171\122\162\123" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u0144\001\001\000\004\102\u013c\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\066\u01a1\067\121\070\110" +
    "\100\u01a3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\071\u01ab\072\u01a7\001" +
    "\001\000\002\001\001\000\004\124\u01a5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\u01ae\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\054\u01b2\055\u01b1\056\174" +
    "\057\203\061\166\062\241\063\307\064\233\065\232\117" +
    "\164\121\171\122\162\123\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\u01b4\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u01b7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\053" +
    "\u01bb\065\u01bc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u01c1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\053\u01c6\054\237\055\u01c5\056" +
    "\174\057\203\061\166\062\241\063\307\064\233\065\232" +
    "\117\164\121\171\122\162\123\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\053\u01cc\054\237\055\234\056" +
    "\174\057\203\061\166\062\241\063\u01cb\064\233\065\232" +
    "\117\164\121\171\122\162\123\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\053\u01d4\064\u01d2\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\053\240\064\u016e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u01d9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u01de\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\u01e8\062\u01e7\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u01ea\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\052\u01ed\054\u014f\055\u014c\056" +
    "\174\057\203\061\166\062\u0151\063\u0149\064\u014b\065\u014a" +
    "\103\u0152\117\164\121\171\122\162\123\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u01f8" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\u01fa\045\054\046\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\006\102\013\107\014\021\047\u01fe\050" +
    "\114\051\131\066\123\067\121\070\110\073\075\074\124" +
    "\101\126\102\071\103\104\107\132\110\105\111\112\001" +
    "\001\000\002\001\001\000\042\006\102\013\107\014\021" +
    "\050\350\051\131\066\123\067\121\070\110\073\075\074" +
    "\124\101\126\102\071\103\104\107\132\110\105\111\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\044\u020c\045\054\046\061\001\001\000\002\001\001\000" +
    "\004\036\u020f\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\006\102\013\107\014\021\047\u0211\050\114\051" +
    "\131\066\123\067\121\070\110\073\075\074\124\101\126" +
    "\102\071\103\104\107\132\110\105\111\112\130\u0212\132" +
    "\u0214\001\001\000\046\006\102\013\107\014\021\050\350" +
    "\051\131\066\123\067\121\070\110\073\075\074\124\101" +
    "\126\102\071\103\104\107\132\110\105\111\112\130\u0219" +
    "\132\u021a\001\001\000\002\001\001\000\036\053\u0216\054" +
    "\237\055\170\056\174\057\203\061\166\062\241\063\307" +
    "\064\233\065\232\117\164\121\171\122\162\123\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\u0220\045\054\046" +
    "\061\001\001\000\002\001\001\000\004\040\u0222\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\102\013" +
    "\107\014\021\047\u0225\050\114\051\131\066\123\067\121" +
    "\070\110\073\075\074\124\101\126\102\071\103\104\107" +
    "\132\110\105\111\112\130\u0226\134\u0228\001\001\000\046" +
    "\006\102\013\107\014\021\050\350\051\131\066\123\067" +
    "\121\070\110\073\075\074\124\101\126\102\071\103\104" +
    "\107\132\110\105\111\112\130\u022b\134\u022c\001\001\000" +
    "\002\001\001\000\036\053\u0216\054\237\055\234\056\174" +
    "\057\203\061\166\062\241\063\163\064\233\065\232\117" +
    "\164\121\171\122\162\123\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\u0232\045\054\046" +
    "\061\001\001\000\002\001\001\000\004\041\u0235\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\006\102\013" +
    "\107\014\021\047\u0238\050\114\051\131\066\123\067\121" +
    "\070\110\073\075\074\124\101\126\102\071\103\104\107" +
    "\132\110\105\111\112\130\u0239\132\u023b\135\u0237\136\u023c" +
    "\001\001\000\002\001\001\000\052\006\102\013\107\014" +
    "\021\050\350\051\131\066\123\067\121\070\110\073\075" +
    "\074\124\101\126\102\071\103\104\107\132\110\105\111" +
    "\112\130\u0241\132\u0242\135\u0240\136\u0243\001\001\000\002" +
    "\001\001\000\036\053\u0216\054\237\055\170\056\174\057" +
    "\203\061\166\062\241\063\307\064\167\065\165\117\164" +
    "\121\171\122\162\123\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\044\u025e\045\054\046\061\001\001" +
    "\000\002\001\001\000\010\044\u024d\045\054\046\061\001" +
    "\001\000\002\001\001\000\004\042\u0250\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\102\013\107\014" +
    "\021\047\u0252\050\114\051\131\066\123\067\121\070\110" +
    "\073\075\074\124\101\126\102\071\103\104\107\132\110" +
    "\105\111\112\130\u0253\136\u0255\001\001\000\046\006\102" +
    "\013\107\014\021\050\350\051\131\066\123\067\121\070" +
    "\110\073\075\074\124\101\126\102\071\103\104\107\132" +
    "\110\105\111\112\130\u0259\136\u025a\001\001\000\002\001" +
    "\001\000\006\053\u0216\065\u0257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u0260\001\001\000\002\001\001\000\044\006\102\013\107" +
    "\014\021\047\u0263\050\114\051\131\066\123\067\121\070" +
    "\110\073\075\074\124\101\126\102\071\103\104\107\132" +
    "\110\105\111\112\001\001\000\002\001\001\000\042\006" +
    "\102\013\107\014\021\050\350\051\131\066\123\067\121" +
    "\070\110\073\075\074\124\101\126\102\071\103\104\107" +
    "\132\110\105\111\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\044\u0267\045\054\046\061\001\001\000" +
    "\002\001\001\000\004\037\u026a\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\006\102\013\107\014\021\047" +
    "\u026d\050\114\051\131\066\123\067\121\070\110\073\075" +
    "\074\124\101\126\102\071\103\104\107\132\110\105\111" +
    "\112\130\u026e\133\u026c\001\001\000\002\001\001\000\046" +
    "\006\102\013\107\014\021\050\350\051\131\066\123\067" +
    "\121\070\110\073\075\074\124\101\126\102\071\103\104" +
    "\107\132\110\105\111\112\130\u0272\133\u0271\001\001\000" +
    "\002\001\001\000\006\053\u0216\062\u012d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\u0279\045\054\046\061\001" +
    "\001\000\002\001\001\000\004\035\u027b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\u028d\005\u0280\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/*código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    */
    private ManejadorErrores manejadorErrores;

    public Parser(Lexer lexer){/*nuevo constructor*/
        super(lexer);        

        manejadorErrores = new ManejadorErrores();
    }    

    public void report_fatal_error(String message, Object info){
        manejadorErrores.setError(new Error(info.toString(), -1, 
        -1, SintaxError.FATAL_ERROR));
    }

    protected int error_sync_size(){
        return 2;
    }/*para que establezca que con un token bien leido basta para recuperarse...   */

    public ArrayList<Error> getListaErrores(){
        return manejadorErrores.getListaErrores();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    private void addError(Token token, int linea, int columna, SintaxError error){//tipoReporte = operacion o error        
        if(token == null){//quiere decir que no existe el T que se esperaba
            manejadorErrores.setError(new Error("", linea, columna, SintaxError.PARSER_EXPECTED, "concatExpected()"));
        }else{                
            manejadorErrores.setError(new Error(Token.parseToken(token).getLexema(), linea, columna, error));
        }                    
    }

    private String concatExpected(){
        List<Integer> expected = expected_token_ids();
        int tokensAMostrar = ((expected.size()>3)?3:expected.size());
        String lista = "";

        for(int idActual = 0; idActual < tokensAMostrar; idActual++){
            lista += symbl_name_from_id(expected.get(idActual)) + " ";
        }
        return lista;
    }  

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= imports clase 
            {
              Object RESULT =null;
		System.out.println("[S] clase con imports analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= clase 
            {
              Object RESULT =null;
		System.out.println("[S] clase analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // imports ::= imports IIMPORT iimport PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: import [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // imports ::= IIMPORT iimport PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: import [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // imports ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: SECTION OF IMPORTS WITH ERRORS");
                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.IMPORT_SECTION_WITH_ERRORS);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // iimport ::= direccion PUNTO ASTERISCO 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: direccion [con *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // iimport ::= direccion 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: direccion [sin *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // iimport ::= error IIMPORT 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: MALFORMED IMPORT");
                                                                addError(Token.parseToken(err), errleft, errright, SintaxError.IMPORT_MALFORMED);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // direccion ::= direccion PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: direccion: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // direccion ::= NOMBRE PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: direccion: PAREJA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // clase ::= visibilidad def_clase 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: CLASE [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // clase ::= def_clase 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: CLASE [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // clase ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: STRUCT OF CLASS EXPECTED: <visibilidad> CLASS <class_name> { <body> }");
                                                                             addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CLASS_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PUBLIC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PROTECTED");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PRIVATE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // visibilidad ::= FINAL 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: FINAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_clase ::= CLASS OBJETO LLAVE_A bloque_clase LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_clase: CB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_clase ::= CLASS OBJETO LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_clase: SB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_clase ::= bloque_clase sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("[S] bloque clases: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_clase ::= sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("[S] bloque clases: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencias_clase ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("[S] sentencia clases: def_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias_clase ::= def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] sentencia clases: def_metodo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_variable ::= visibilidad def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_variable [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_variable ::= def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_variable [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_tipo_variable ::= INT creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [INT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_tipo_variable ::= DOUBLE creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [DOUBLE]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // def_tipo_variable ::= STRING creacion_variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [STRING]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // def_tipo_variable ::= CHAR creacion_variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [CHAR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // def_tipo_variable ::= BOOLEAN creacion_variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [BOOLEAN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // def_tipo_variable ::= OBJECT creacion_variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [OBJECT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // def_tipo_variable ::= OBJETO creacion_variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [OBJETO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // def_tipo_variable ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: VARIABLE CREATION EXPECTED <tipo> <list-vars>");
                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_VARIABLE_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // creacion_variable_numero ::= creacion_variable_numero COMA variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_numero: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacion_variable_numero ::= variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_numero: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacion_variable_numero ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD NUMBER VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_NUMBER_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable_numero ::= NOMBRE IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_numero: con INI [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_numero ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_numero: con INI [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_numero ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_numero: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creacion_variable_string ::= creacion_variable_string COMA variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_string: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacion_variable_string ::= variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_string: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacion_variable_string ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD STRING VAR CREATION");
                                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_STRING_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable_string ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_string: con INI [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable_string ::= NOMBRE IGUAL contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_string: con INI [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable_string ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_string: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // creacion_variable_char ::= creacion_variable_char COMA variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_char: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // creacion_variable_char ::= variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_char: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // creacion_variable_char ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD CHAR VAR CREATION");
                                                                                                    addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CHAR_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_char ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_char: con INI [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_char ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_char: con INI [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_char ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_char: sin INI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // creacion_variable_boolean ::= creacion_variable_boolean COMA variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_boolean: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // creacion_variable_boolean ::= variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_boolean: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // creacion_variable_boolean ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD BOOLEAN VAR CREATION");
                                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BOOLEAN_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable_boolean ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_boolean: con INI [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable_boolean ::= NOMBRE IGUAL contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_boolean: con INI [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_boolean ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_boolean: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // creacion_variable_object ::= creacion_variable_object COMA variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_object: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // creacion_variable_object ::= variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_object: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // creacion_variable_object ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD OBJECT VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJECT_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_object ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_object: con INI [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_object ::= NOMBRE IGUAL contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_object: con INI [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_object ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_object: con INI [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_object ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_object: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // creacion_variable_objeto ::= creacion_variable_objeto COMA variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_objetO: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // creacion_variable_objeto ::= variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_objetO: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // creacion_variable_objeto ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD CUSTOM OBJECT VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CUSTOM_OBJECT_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_objeto ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_objetO: con INI [cont_V");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_objeto ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_objetO: con INI [cont_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable_objeto ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: variable_objetO: sin Ini");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // def_metodo ::= visibilidad cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_metodo [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // def_metodo ::= cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_metodo [invisible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // def_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: BAD METHOD|CONSTRUCTOR DEFINITION");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_METHOD_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cuerpo_def_metodo ::= OBJETO PARENTESIS_A parametros PARENTESIS_C def_metodo_constructor 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_constructor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_def_metodo ::= def_metodo_tipo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_TIPO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_def_metodo ::= VOID NOMBRE def_metodo_void 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_VOID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // def_metodo_constructor ::= LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: no_void [cuerpo_cnstrct [CB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_constructor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // def_metodo_constructor ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: no_void [cuerpo_cnstrct [SB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_constructor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // def_metodo_tipo ::= INT NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: INT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // def_metodo_tipo ::= DOUBLE NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: DOUBLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // def_metodo_tipo ::= STRING NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: STRING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // def_metodo_tipo ::= CHAR NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // def_metodo_tipo ::= BOOLEAN NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: BOOLEAN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // def_metodo_tipo ::= OBJECT NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: OBJECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // def_metodo_tipo ::= OBJETO NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_tipo: OBJETO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_metodo_numero ::= LLAVE_A retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo_metodo_numero ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpo_metodo_numero ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF NUMBER [INT|DOUBLE] METHOD BODY");
                                                                                               addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_NUMBER_METHOD_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_metodo_string ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo_metodo_string ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_metodo_string ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION STRING OF METHOD BODY");
                                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_STRING_METHOD_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_metodo_char ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_metodo_char ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_metodo_char ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION CHAR OF METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CHAR_METHOD_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_metodo_boolean ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpo_metodo_boolean ::= LLAVE_A retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo_metodo_boolean ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF BOOLEAN METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BOOLEAN_METHOD_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo_metodo_object ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpo_metodo_object ::= LLAVE_A retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpo_metodo_object ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpo_metodo_object ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cuerpo_metodo_object ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF OBJECT METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJECT_METHOD_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cuerpo_metodo_objeto ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cuerpo_metodo_objeto ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpo_metodo_objeto ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF CUSTOM OBJECT METHOD BODY");
                                                                                    addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJETO_METHOD_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [CB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [CB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [SB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // def_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [SB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // def_metodo_void ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF VOID METHOD BODY");
                                                                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_VOID_METHOD_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametros ::= parametro 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: UNICO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: ninguno");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametros ::= error COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: PARAM OR LIST OF THEM WITH ERRORS");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_PARAM_LIST);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametro ::= tipo NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametro");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipo ::= INT 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: INT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: DOUBLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipo ::= STRING 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: STRING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tipo ::= CHAR 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: BOOLEAN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tipo ::= OBJECT 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: OBJECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipo ::= OBJETO 
            {
              Object RESULT =null;
		System.out.println("[S] tipo: OBJETO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // bloque ::= bloque sentencias 
            {
              Object RESULT =null;
		System.out.println("[S] bloque: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // bloque ::= sentencias 
            {
              Object RESULT =null;
		System.out.println("[S] bloque: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencias ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: def_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencias ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencias ::= ciclo 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: ciclo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencias ::= invocacion 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: invocacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencias ::= sentencia_control 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: sentencia_control");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencias ::= operacion_unaria PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: operacion_unaria");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignacion ::= cuerpo_invocacion_var IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asignacion ::= THIS PUNTO cuerpo_invocacion_var IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipos_asignacion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipos_asig: cont_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tipos_asignacion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipos_asig: cont_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tipos_asignacion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tipos_asignacion ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tipos_asignacion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tipos_asignacion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tipos_asignacion ::= THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: THIS. invoc_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipos_asignacion ::= cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: invoc_met");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tipos_asignacion ::= THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: THIS. invoc_met");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipos_asignacion ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: BAD ASSIGNED CONTENT");
                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_ASSGINED_CONTENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // contenido_variable ::= PARENTESIS_A contenido_variable PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: ( cont_var )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // contenido_variable ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // contenido_numero ::= contenido_numero MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // contenido_numero ::= contenido_numero RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: RESTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // contenido_numero ::= contenido_numero ASTERISCO contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ASTERISCO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // contenido_numero ::= contenido_numero DIV contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: DIV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // contenido_numero ::= RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MENOS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // contenido_numero ::= PARENTESIS_A contenido_numero PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ( cont_# )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // contenido_numero ::= NUMERO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: NUMERO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // contenido_numero ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // contenido_string ::= contenido_boolean MAS cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_S [ cont_boolean + cc ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // contenido_string ::= permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_S [ permitidos ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // permitidos ::= contenido_numero MAS permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cont_# + permitidos]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // permitidos ::= contenido_char MAS permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cont_C + permitidos]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // permitidos ::= cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // cualquier_contenido ::= cualquier_contenido opciones_cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cualq_cont: [cc o_cc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cualquier_contenido",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // cualquier_contenido ::= strings 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cualq_cont: [strings]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cualquier_contenido",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // opciones_cualquier_contenido ::= MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // opciones_cualquier_contenido ::= MAS contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // opciones_cualquier_contenido ::= MAS contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // opciones_cualquier_contenido ::= MAS strings 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ strings]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // strings ::= PARENTESIS_A strings PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: strings: ( strings )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // strings ::= CADENA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: strings: CADENA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // contenido_char ::= PARENTESIS_A contenido_char PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_C: ( cont_C )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // contenido_char ::= CARACTER 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_C: CARACTER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // contenido_object ::= PARENTESIS_A contenido_object PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_Oc: ( cont_Oc )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // contenido_object ::= NEW OBJECT PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_Oc: NEW Oc()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // contenido_objeto ::= PARENTESIS_A contenido_objeto PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: ( cont_O )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // contenido_objeto ::= NEW OBJETO PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: NEW O( argucion )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // operacion_unaria ::= incremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_unaria: INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // operacion_unaria ::= autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_unaria: AUTO_INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // incremento ::= NOMBRE MAS MAS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ [der]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // incremento ::= NOMBRE RESTA RESTA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- [der]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // incremento ::= MAS MAS NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ [izq]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // incremento ::= RESTA RESTA NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- [izq]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // autoincremento ::= NOMBRE opciones_autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("autoincremento",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // opciones_autoincremento ::= opciones_autoIncreMas 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: +=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // opciones_autoincremento ::= RESTA IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: -=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // opciones_autoincremento ::= ASTERISCO IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: *=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // opciones_autoincremento ::= DIV IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: /=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // opciones_autoIncreMas ::= MAS IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [val#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // opciones_autoIncreMas ::= MAS IGUAL contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // opciones_autoIncreMas ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: += ONLY IS APLICABE TO STRINGs AND NUMBERs");
                                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_AUTINCREMENT_CONTENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ciclo ::= ciclo_for 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ciclo ::= WHILE PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: WHILE [cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ciclo ::= WHILE PARENTESIS_A contenido_variable PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: WHILE [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_boolean PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: DO-WHILE [cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_variable PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: DO-WHILE [cont_V] ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ciclo ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: LOOP [FOR|WHILE|DO WHILE] MALFORMED");
                                                                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_LOOP_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ciclo_for ::= FOR PARENTESIS_A asignacion_for condiciones_for incremento_for PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // asignacion_for ::= asignacion_completa_for 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [completa]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // asignacion_for ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [parcial]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // asignacion_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // asignacion_for ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: \"FOR\" ASSIGNATION MALFORMED");
                                                                                                 addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_ASSIGNATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // asignacion_completa_for ::= INT NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [INT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // asignacion_completa_for ::= DOUBLE NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [DOUBLE]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [STRING-CS]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [STRING-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [CHAR-CC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [CHAR-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [BOOLEAN-CB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [BOOLEAN-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJECT-COc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETC-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO-CO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO-CV]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // condiciones_for ::= contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // condiciones_for ::= contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // condiciones_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // condiciones_for ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: \"FOR\" CONDITIONS MALFORMED");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_CONDITION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // incremento_for ::= operacion_unaria 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: incremento [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // incremento_for ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: incremento [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // incremento_for ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: \"FOR\" INCREMENT MALFORMED");
                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_INCREMENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // invocacion ::= cuerpo_invocacion_metodo PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: invocacion [tradicional]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // invocacion ::= THIS PUNTO cuerpo_invocacion_metodo PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: invocacion [this]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // cuerpo_invocacion_var ::= NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [recursi var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // cuerpo_invocacion_var ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [recursi met]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // cuerpo_invocacion_var ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [only var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // cuerpo_invocacion_var ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: INVOCATION OF VAR MALFORMED");
                                                                                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_VAR_INVOCATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // cuerpo_invocacion_metodo ::= NOMBRE PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [recursi var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cuerpo_invocacion_metodo ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [recursi met]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // cuerpo_invocacion_metodo ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [only metodo]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // argumentacion ::= argumentos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentacion [min 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // argumentacion ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentacion [0 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // argumentos ::= argumentos COMA argumento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentos [+ 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // argumentos ::= argumento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentos [1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // argumentos ::= error COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: EXPECTED 1 OR ARGUMENTS LIST");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.ARGUMENTS_SECTION_WITH_ERRORS);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // argumento ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // argumento ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // argumento ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // argumento ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // argumento ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // argumento ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // sentencia_control ::= sentencia_if 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // sentencia_control ::= sentencia_if ELSE cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: IF-ELSE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // sentencia_control ::= sentencia_switch 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // sentencia_if ::= IF PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_if [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // sentencia_if ::= IF PARENTESIS_A contenido_variable PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_if [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // contenido_boolean ::= negaciones PARENTESIS_A contenido_boolean PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [! ( MC ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // contenido_boolean ::= PARENTESIS_A contenido_boolean PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [( MC )]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // contenido_boolean ::= contenido_boolean OPERADOR_LOGICO contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [ cont_boolean OL cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // contenido_boolean ::= condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [condicion]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // condicion ::= contenido_condicion OPERADOR_RELACIONAL opcion_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [contCondi OR op_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // condicion ::= contenido_bool OPERADOR_RELACIONAL opcion_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [cont_bool OR op_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // condicion ::= contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [cont_bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // opcion_condicion ::= contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_condicion [cont_bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // opcion_condicion ::= contenido_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_condicion [cont_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_condicion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // contenido_condicion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [con_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // contenido_condicion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // contenido_condicion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // contenido_condicion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // contenido_condicion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // contenido_bool ::= PARENTESIS_A contenido_bool PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ( cont_bool ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // contenido_bool ::= negaciones contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ! cont_bool ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // contenido_bool ::= negaciones contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ! cont_var ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // contenido_bool ::= BOOLEANO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ BOOLEANO ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // negaciones ::= negaciones NO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: negaciones [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // negaciones ::= NO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: negaciones [UNICA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // sentencia_switch ::= SWITCH PARENTESIS_A contenido_switch PARENTESIS_C LLAVE_A cuerpo_switch LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // cuerpo_switch ::= casos_normales caso_default 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_switch [CN + posible CD]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // cuerpo_switch ::= caso_default 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_switch [posible CD o nada]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // cuerpo_switch ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: SWITCH's BODY MALDORMED");
                                                                              addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_SWITCHs_BODY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // casos_normales ::= casos_normales caso 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: casos_normales [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // casos_normales ::= caso 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: casos_normales [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // caso ::= CASE contenido_switch DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso (CB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // caso ::= CASE contenido_switch DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso (SB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // caso_default ::= DEFAULT DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [existente (CB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // caso_default ::= DEFAULT DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [existente (SB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // caso_default ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [ausente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // contenido_switch ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // contenido_switch ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // contenido_switch ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // contenido_switch ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: A SWITCH MUST RECEIVED A STRING|NUMBER|CHAR TYPE TO EVALUATE");
                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_TYPE_TO_EVALUATE_ON_SWITCH);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // cuerpo_estructuras ::= LLAVE_A bloque_general LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_estructuras [CB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // cuerpo_estructuras ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_estructuras [SB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // cuerpo_estructuras ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: LOOP OR CONTROL STATEMENT BODY WITH ERRORS");
                                                                                     addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BODY_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // bloque_general ::= bloque retorno 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [CR [comp o parada]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // bloque_general ::= bloque 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // bloque_general ::= retorno 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [SB y CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // retorno ::= retorno_compuesto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno [compuesto]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // retorno ::= parada PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno [parada [simple]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // retorno_compuesto ::= retorno_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // retorno_compuesto ::= retorno_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // retorno_compuesto ::= retorno_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // retorno_compuesto ::= retorno_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // retorno_compuesto ::= retorno_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // retorno_compuesto ::= retorno_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // retorno_variable ::= RETURN contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_V");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_variable",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // retorno_numero ::= RETURN contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_numero",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // retorno_string ::= RETURN contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_string",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // retorno_char ::= RETURN contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_char",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // retorno_boolean ::= RETURN contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_boolean",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // retorno_object ::= RETURN contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_object",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // retorno_objeto ::= RETURN contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_objeto",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // parada ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parada [RETURN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // parada ::= BREAK 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parada [BREAK]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
