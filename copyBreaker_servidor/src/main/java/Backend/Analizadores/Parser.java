
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import Backend.Objetos.Resultado.RESULT;
import Backend.Objetos.Resultado.Metodo;
import Backend.Objetos.Resultado.Variable;
import Backend.Objetos.Token;
import Backend.Manejadores.ManejadorErrores;
import Backend.Objetos.Error;
import Backend.Objetos.Enums.SintaxError;
import Backend.Analizadores.ParserSym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\004\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\011\007\000\002\011\006\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\005\000\002\014\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\003\000" +
    "\002\016\005\000\002\016\003\000\002\016\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\020\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\003\000\002\022\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\003\000\002\024\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\003\000" +
    "\002\026\004\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\030\005\000\002\030" +
    "\003\000\002\030\004\000\002\031\005\000\002\031\005" +
    "\000\002\031\003\000\002\032\004\000\002\032\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\007\000\002\035\005\000\002\035" +
    "\004\000\002\035\004\000\002\036\010\000\002\036\010" +
    "\000\002\036\010\000\002\036\010\000\002\036\010\000" +
    "\002\036\010\000\002\036\010\000\002\037\006\000\002" +
    "\037\005\000\002\037\006\000\002\037\005\000\002\037" +
    "\004\000\002\040\006\000\002\040\005\000\002\040\006" +
    "\000\002\040\005\000\002\040\004\000\002\041\006\000" +
    "\002\041\005\000\002\041\006\000\002\041\005\000\002" +
    "\041\004\000\002\042\006\000\002\042\005\000\002\042" +
    "\006\000\002\042\005\000\002\042\004\000\002\043\006" +
    "\000\002\043\005\000\002\043\006\000\002\043\005\000" +
    "\002\043\006\000\002\043\005\000\002\043\006\000\002" +
    "\043\005\000\002\043\004\000\002\044\006\000\002\044" +
    "\005\000\002\044\006\000\002\044\005\000\002\044\004" +
    "\000\002\045\005\000\002\046\012\000\002\046\010\000" +
    "\002\046\011\000\002\046\007\000\002\046\004\000\002" +
    "\047\005\000\002\047\003\000\002\047\002\000\002\047" +
    "\003\000\002\050\004\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\052\004\000\002" +
    "\052\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\004" +
    "\000\002\054\006\000\002\054\010\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\005\000\002\055" +
    "\003\000\002\055\005\000\002\055\003\000\002\056\005" +
    "\000\002\056\003\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\004\000\002" +
    "\057\005\000\002\057\003\000\002\057\003\000\002\060" +
    "\005\000\002\060\003\000\002\061\005\000\002\061\005" +
    "\000\002\061\003\000\002\062\004\000\002\062\003\000" +
    "\002\063\004\000\002\063\004\000\002\063\004\000\002" +
    "\063\004\000\002\064\005\000\002\064\003\000\002\065" +
    "\005\000\002\065\003\000\002\067\005\000\002\067\006" +
    "\000\002\070\005\000\002\070\007\000\002\071\003\000" +
    "\002\071\003\000\002\072\005\000\002\072\005\000\002" +
    "\072\005\000\002\072\005\000\002\073\004\000\002\074" +
    "\003\000\002\074\005\000\002\074\005\000\002\074\005" +
    "\000\002\075\005\000\002\075\005\000\002\075\003\000" +
    "\002\076\003\000\002\076\007\000\002\076\007\000\002" +
    "\076\011\000\002\076\011\000\002\076\004\000\002\077" +
    "\011\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\004\000\002\101\007\000\002\101\007\000" +
    "\002\101\007\000\002\101\007\000\002\101\007\000\002" +
    "\101\007\000\002\101\007\000\002\101\007\000\002\101" +
    "\007\000\002\101\007\000\002\101\007\000\002\101\007" +
    "\000\002\102\004\000\002\102\004\000\002\102\003\000" +
    "\002\102\004\000\002\103\003\000\002\103\002\000\002" +
    "\103\003\000\002\104\004\000\002\104\006\000\002\105" +
    "\005\000\002\105\010\000\002\105\003\000\002\105\003" +
    "\000\002\106\005\000\002\106\010\000\002\106\006\000" +
    "\002\107\003\000\002\107\002\000\002\110\005\000\002" +
    "\110\003\000\002\110\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\112\003\000\002\112\005\000" +
    "\002\112\003\000\002\113\007\000\002\113\007\000\002" +
    "\066\006\000\002\066\005\000\002\066\005\000\002\066" +
    "\003\000\002\122\005\000\002\122\005\000\002\122\003" +
    "\000\002\123\003\000\002\123\003\000\002\125\003\000" +
    "\002\125\003\000\002\125\003\000\002\125\003\000\002" +
    "\125\003\000\002\124\005\000\002\124\004\000\002\124" +
    "\004\000\002\124\003\000\002\126\004\000\002\126\003" +
    "\000\002\114\011\000\002\115\004\000\002\115\003\000" +
    "\002\115\003\000\002\116\004\000\002\116\003\000\002" +
    "\117\006\000\002\117\005\000\002\120\005\000\002\120" +
    "\004\000\002\120\002\000\002\121\003\000\002\121\003" +
    "\000\002\121\003\000\002\121\003\000\002\127\005\000" +
    "\002\127\004\000\002\127\004\000\002\130\004\000\002" +
    "\130\003\000\002\130\003\000\002\131\003\000\002\131" +
    "\004\000\002\132\003\000\002\132\003\000\002\132\003" +
    "\000\002\132\003\000\002\132\003\000\002\132\003\000" +
    "\002\133\005\000\002\134\005\000\002\135\005\000\002" +
    "\136\005\000\002\137\005\000\002\140\005\000\002\141" +
    "\005\000\002\142\003\000\002\142\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u028e\000\020\003\013\004\010\005\020\012\005\013" +
    "\007\014\014\015\016\001\002\000\020\003\u028e\004\010" +
    "\005\020\012\005\013\007\014\014\015\016\001\002\000" +
    "\026\003\ufff2\005\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\026\ufff2\001\002\000\004\002" +
    "\u028d\001\002\000\026\003\ufff1\005\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\001" +
    "\002\000\006\003\u0284\025\u0286\001\002\000\004\005\020" +
    "\001\002\000\004\002\ufff4\001\002\000\006\002\ufff3\004" +
    "\010\001\002\000\026\003\ufff0\005\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\001" +
    "\002\000\020\003\ufffd\004\ufffd\005\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\001\002\000\026\003\uffef\005\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\026\uffef\001\002\000\004\002\uffff\001\002\000\004\024" +
    "\021\001\002\000\004\036\022\001\002\000\036\003\040" +
    "\012\005\013\007\014\014\015\016\016\025\017\046\020" +
    "\035\021\026\022\034\023\033\024\032\026\045\037\042" +
    "\001\002\000\004\033\u0280\001\002\000\036\003\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\037\uffb8\001" +
    "\002\000\006\003\050\025\u027b\001\002\000\006\003\u01e6" +
    "\025\u0269\001\002\000\036\003\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\026\uffb5\037\uffb5\001\002\000\036\003" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\037" +
    "\uffea\001\002\000\036\003\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\026\uffeb\037\uffeb\001\002\000\010\003\371" +
    "\025\u024d\047\u024c\001\002\000\006\003\u0168\025\u0232\001" +
    "\002\000\006\003\u0132\025\u0220\001\002\000\006\003\u0104" +
    "\025\u020c\001\002\000\036\003\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\026\uffb7\037\uffb7\001\002\000\036\003" +
    "\040\012\005\013\007\014\014\015\016\016\025\017\046" +
    "\020\035\021\026\022\034\023\033\024\032\026\045\037" +
    "\u020b\001\002\000\040\003\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\026\uffb4\033\uffdf\037\uffb4\001\002\000\024" +
    "\003\040\016\025\017\046\020\035\021\026\022\034\023" +
    "\033\024\032\026\045\001\002\000\004\002\uffed\001\002" +
    "\000\036\003\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\026\uffe9\037\uffe9\001\002\000\036\003\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\026\uffb6\037\uffb6\001\002\000" +
    "\004\025\u01f8\001\002\000\006\003\050\025\052\001\002" +
    "\000\006\033\uffdd\041\uffdd\001\002\000\004\025\u01df\001" +
    "\002\000\006\033\uffe5\041\u01e0\001\002\000\012\033\uffd9" +
    "\041\uffd9\046\053\047\054\001\002\000\014\025\201\030" +
    "\203\032\177\043\212\047\u0131\001\002\000\026\003\064" +
    "\016\055\017\062\020\061\021\067\022\057\023\056\024" +
    "\063\041\uff7e\050\uff7e\001\002\000\004\025\uff7b\001\002" +
    "\000\004\025\uff76\001\002\000\004\025\uff77\001\002\000" +
    "\006\041\uff7f\050\uff7f\001\002\000\004\025\uff79\001\002" +
    "\000\004\025\uff7a\001\002\000\004\025\uff75\001\002\000" +
    "\006\041\uff7d\050\uff7d\001\002\000\004\025\u01f4\001\002" +
    "\000\006\041\070\050\071\001\002\000\004\025\uff78\001" +
    "\002\000\020\016\055\017\062\020\061\021\067\022\057" +
    "\023\056\024\063\001\002\000\006\003\072\036\074\001" +
    "\002\000\004\037\u01f2\001\002\000\036\003\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\026\uffae\037\uffae\001\002" +
    "\000\056\003\123\006\117\010\122\012\005\013\007\014" +
    "\014\015\016\016\104\017\102\020\133\021\076\022\121" +
    "\023\112\024\134\025\077\042\140\043\103\051\105\052" +
    "\126\053\137\054\115\056\124\001\002\000\004\046\u01ef" +
    "\001\002\000\006\003\u01e6\025\u01e8\001\002\000\022\003" +
    "\u01b1\034\u0141\035\u01ae\042\u01b0\043\u01ad\045\u01b3\046\uff13" +
    "\047\u0142\001\002\000\004\037\u01e4\001\002\000\066\003" +
    "\uff70\006\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\037\uff70\042\uff70\043\uff70\051\uff70" +
    "\052\uff70\053\uff70\054\uff70\056\uff70\057\uff70\060\uff70\001" +
    "\002\000\006\003\050\025\u01df\001\002\000\004\043\u01e2" +
    "\001\002\000\006\003\050\025\u01df\001\002\000\004\047" +
    "\u017f\001\002\000\022\003\u017c\016\104\017\102\020\133" +
    "\021\076\022\121\023\112\024\134\001\002\000\056\003" +
    "\123\006\117\010\122\012\005\013\007\014\014\015\016" +
    "\016\104\017\102\020\133\021\076\022\121\023\112\024" +
    "\134\025\077\042\140\043\103\051\105\052\126\053\137" +
    "\054\115\056\124\001\002\000\004\033\u0177\001\002\000" +
    "\070\003\uff03\006\uff03\010\uff03\011\uff03\012\uff03\013\uff03" +
    "\014\uff03\015\uff03\016\uff03\017\uff03\020\uff03\021\uff03\022" +
    "\uff03\023\uff03\024\uff03\025\uff03\037\uff03\042\uff03\043\uff03" +
    "\051\uff03\052\uff03\053\uff03\054\uff03\055\u0175\056\uff03\057" +
    "\uff03\060\uff03\001\002\000\006\003\u0168\025\u016b\001\002" +
    "\000\066\003\uff72\006\uff72\010\uff72\011\uff72\012\uff72\013" +
    "\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72" +
    "\022\uff72\023\uff72\024\uff72\025\uff72\037\uff72\042\uff72\043" +
    "\uff72\051\uff72\052\uff72\053\uff72\054\uff72\056\uff72\057\uff72" +
    "\060\uff72\001\002\000\006\033\uff42\050\uff42\001\002\000" +
    "\004\047\u0161\001\002\000\066\003\uff01\006\uff01\010\uff01" +
    "\011\uff01\012\uff01\013\uff01\014\uff01\015\uff01\016\uff01\017" +
    "\uff01\020\uff01\021\uff01\022\uff01\023\uff01\024\uff01\025\uff01" +
    "\037\uff01\042\uff01\043\uff01\051\uff01\052\uff01\053\uff01\054" +
    "\uff01\056\uff01\057\uff01\060\uff01\001\002\000\004\034\u013c" +
    "\001\002\000\066\003\uff73\006\uff73\010\uff73\011\uff73\012" +
    "\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73" +
    "\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\037\uff73\042" +
    "\uff73\043\uff73\051\uff73\052\uff73\053\uff73\054\uff73\056\uff73" +
    "\057\uff73\060\uff73\001\002\000\006\003\u0132\025\u0135\001" +
    "\002\000\014\025\201\030\203\032\177\043\212\047\u0131" +
    "\001\002\000\010\033\uffdf\046\uff12\050\u012e\001\002\000" +
    "\004\047\u0117\001\002\000\006\033\uff43\050\uff43\001\002" +
    "\000\004\047\u0110\001\002\000\066\003\uff35\006\uff35\010" +
    "\uff35\011\uff35\012\uff35\013\uff35\014\uff35\015\uff35\016\uff35" +
    "\017\uff35\020\uff35\021\uff35\022\uff35\023\uff35\024\uff35\025" +
    "\uff35\037\uff35\042\uff35\043\uff35\051\uff35\052\uff35\053\uff35" +
    "\054\uff35\056\uff35\057\uff35\060\uff35\001\002\000\004\033" +
    "\u010f\001\002\000\004\037\u010e\001\002\000\066\003\uff6f" +
    "\006\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015" +
    "\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f" +
    "\024\uff6f\025\uff6f\037\uff6f\042\uff6f\043\uff6f\051\uff6f\052" +
    "\uff6f\053\uff6f\054\uff6f\056\uff6f\057\uff6f\060\uff6f\001\002" +
    "\000\006\003\u0104\025\u0106\001\002\000\006\003\371\025" +
    "\372\001\002\000\066\003\uff71\006\uff71\010\uff71\011\uff71" +
    "\012\uff71\013\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\037\uff71" +
    "\042\uff71\043\uff71\051\uff71\052\uff71\053\uff71\054\uff71\056" +
    "\uff71\057\uff71\060\uff71\001\002\000\066\003\uff6e\006\uff6e" +
    "\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016" +
    "\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e" +
    "\025\uff6e\037\uff6e\042\uff6e\043\uff6e\051\uff6e\052\uff6e\053" +
    "\uff6e\054\uff6e\056\uff6e\057\uff6e\060\uff6e\001\002\000\006" +
    "\003\144\036\145\001\002\000\004\042\141\001\002\000" +
    "\004\025\142\001\002\000\006\033\uff3f\050\uff3f\001\002" +
    "\000\004\052\357\001\002\000\004\037\356\001\002\000" +
    "\062\003\123\006\117\010\154\011\155\012\005\013\007" +
    "\014\014\015\016\016\104\017\102\020\133\021\076\022" +
    "\121\023\112\024\134\025\077\037\151\042\140\043\103" +
    "\051\105\052\126\053\137\054\115\056\124\001\002\000" +
    "\010\037\ufed1\057\ufed1\060\ufed1\001\002\000\010\037\ufecf" +
    "\057\ufecf\060\ufecf\001\002\000\004\033\355\001\002\000" +
    "\070\003\ufeda\006\ufeda\010\ufeda\011\ufeda\012\ufeda\013\ufeda" +
    "\014\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda\021\ufeda\022" +
    "\ufeda\023\ufeda\024\ufeda\025\ufeda\037\ufeda\042\ufeda\043\ufeda" +
    "\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055\ufeda\056\ufeda\057" +
    "\ufeda\060\ufeda\001\002\000\010\037\ufed5\057\ufed5\060\ufed5" +
    "\001\002\000\066\003\123\006\117\010\154\011\155\012" +
    "\005\013\007\014\014\015\016\016\104\017\102\020\133" +
    "\021\076\022\121\023\112\024\134\025\077\037\ufed7\042" +
    "\140\043\103\051\105\052\126\053\137\054\115\056\124" +
    "\057\ufed7\060\ufed7\001\002\000\026\007\206\025\201\027" +
    "\165\030\203\031\176\032\177\033\ufec6\043\212\047\205" +
    "\063\210\001\002\000\004\033\ufec5\001\002\000\010\037" +
    "\ufed2\057\ufed2\060\ufed2\001\002\000\010\037\ufece\057\ufece" +
    "\060\ufece\001\002\000\010\037\ufed3\057\ufed3\060\ufed3\001" +
    "\002\000\004\037\164\001\002\000\010\037\ufed0\057\ufed0" +
    "\060\ufed0\001\002\000\010\037\ufed6\057\ufed6\060\ufed6\001" +
    "\002\000\070\003\ufedb\006\ufedb\010\ufedb\011\ufedb\012\ufedb" +
    "\013\ufedb\014\ufedb\015\ufedb\016\ufedb\017\ufedb\020\ufedb\021" +
    "\ufedb\022\ufedb\023\ufedb\024\ufedb\025\ufedb\037\ufedb\042\ufedb" +
    "\043\ufedb\051\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\056" +
    "\ufedb\057\ufedb\060\ufedb\001\002\000\020\033\uff4a\040\uff4a" +
    "\041\uff4a\042\uff4a\050\uff4a\061\uff4a\062\uff4a\001\002\000" +
    "\004\061\316\001\002\000\020\033\ufefb\040\ufefb\041\ufefb" +
    "\042\ufefb\050\ufefb\061\ufefb\062\ufefb\001\002\000\010\033" +
    "\352\042\273\062\274\001\002\000\006\033\351\061\ufef1" +
    "\001\002\000\020\033\uff50\040\uff50\041\uff50\042\uff50\050" +
    "\uff50\061\uff50\062\uff50\001\002\000\006\033\350\061\ufef2" +
    "\001\002\000\006\033\347\061\ufef4\001\002\000\020\033" +
    "\ufef8\040\ufef8\041\ufef8\042\ufef8\050\ufef8\061\311\062\ufef8" +
    "\001\002\000\020\033\ufeed\040\ufeed\041\ufeed\042\ufeed\050" +
    "\ufeed\061\ufeed\062\ufeed\001\002\000\020\033\uff48\040\uff48" +
    "\041\uff48\042\uff48\050\uff48\061\uff48\062\uff48\001\002\000" +
    "\020\033\uff55\040\uff55\041\uff55\042\uff55\050\uff55\061\uff55" +
    "\062\uff55\001\002\000\026\033\uff57\035\uff57\040\uff57\041" +
    "\uff57\042\uff57\043\uff57\045\uff57\050\uff57\061\uff57\062\uff57" +
    "\001\002\000\016\033\346\035\217\042\266\043\216\045" +
    "\222\061\ufef5\001\002\000\026\033\uff58\035\uff58\040\uff58" +
    "\041\uff58\042\uff58\043\uff58\045\uff58\050\uff58\061\uff58\062" +
    "\uff58\001\002\000\010\033\345\042\255\061\ufef3\001\002" +
    "\000\024\007\206\025\201\027\165\030\203\031\176\032" +
    "\177\043\212\047\205\063\210\001\002\000\006\023\323" +
    "\024\324\001\002\000\020\033\uff52\040\uff52\041\uff52\042" +
    "\301\050\uff52\061\uff52\062\uff52\001\002\000\012\025\ufeeb" +
    "\031\ufeeb\047\ufeeb\063\ufeeb\001\002\000\012\025\232\031" +
    "\176\047\231\063\234\001\002\000\012\025\201\030\203" +
    "\043\212\047\214\001\002\000\026\033\uff5a\035\uff5a\040" +
    "\uff5a\041\uff5a\042\uff5a\043\uff5a\045\uff5a\050\uff5a\061\uff5a" +
    "\062\uff5a\001\002\000\012\025\201\030\203\043\212\047" +
    "\214\001\002\000\014\035\217\042\220\043\216\045\222" +
    "\050\221\001\002\000\012\025\201\030\203\043\212\047" +
    "\214\001\002\000\012\025\201\030\203\043\212\047\214" +
    "\001\002\000\012\025\201\030\203\043\212\047\214\001" +
    "\002\000\026\033\uff59\035\uff59\040\uff59\041\uff59\042\uff59" +
    "\043\uff59\045\uff59\050\uff59\061\uff59\062\uff59\001\002\000" +
    "\012\025\201\030\203\043\212\047\214\001\002\000\026" +
    "\033\uff5b\035\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\045" +
    "\uff5b\050\uff5b\061\uff5b\062\uff5b\001\002\000\026\033\uff5e" +
    "\035\217\040\uff5e\041\uff5e\042\uff5e\043\uff5e\045\222\050" +
    "\uff5e\061\uff5e\062\uff5e\001\002\000\026\033\uff5c\035\uff5c" +
    "\040\uff5c\041\uff5c\042\uff5c\043\uff5c\045\uff5c\050\uff5c\061" +
    "\uff5c\062\uff5c\001\002\000\026\033\uff5d\035\217\040\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\045\222\050\uff5d\061\uff5d\062" +
    "\uff5d\001\002\000\012\025\232\031\176\047\321\063\234" +
    "\001\002\000\020\033\ufeee\040\ufeee\041\ufeee\042\ufeee\050" +
    "\ufeee\061\ufeee\062\ufeee\001\002\000\024\007\206\025\242" +
    "\027\165\030\203\031\176\032\177\043\212\047\246\063" +
    "\210\001\002\000\020\033\uff5f\040\uff5f\041\uff5f\042\uff5f" +
    "\050\uff5f\061\uff5f\062\uff5f\001\002\000\020\033\ufeef\040" +
    "\ufeef\041\ufeef\042\ufeef\050\ufeef\061\ufeef\062\ufeef\001\002" +
    "\000\012\025\ufeec\031\ufeec\047\ufeec\063\ufeec\001\002\000" +
    "\010\042\273\050\320\062\274\001\002\000\020\033\ufef1" +
    "\040\ufef1\041\ufef1\042\ufef1\050\ufef1\061\ufef1\062\ufef1\001" +
    "\002\000\020\033\ufef2\040\ufef2\041\ufef2\042\ufef2\050\ufef2" +
    "\061\ufef2\062\ufef2\001\002\000\020\033\ufef4\040\ufef4\041" +
    "\ufef4\042\ufef4\050\ufef4\061\ufef4\062\ufef4\001\002\000\012" +
    "\042\ufef8\050\310\061\311\062\ufef8\001\002\000\022\033" +
    "\uff5f\035\uff57\041\uff5f\042\uff57\043\uff57\045\uff57\050\uff5f" +
    "\061\uff57\001\002\000\026\033\ufef5\035\217\040\ufef5\041" +
    "\ufef5\042\266\043\216\045\222\050\ufef5\061\ufef5\062\ufef5" +
    "\001\002\000\004\050\307\001\002\000\020\033\ufef3\040" +
    "\ufef3\041\ufef3\042\255\050\ufef3\061\ufef3\062\ufef3\001\002" +
    "\000\024\007\206\025\242\027\165\030\203\031\176\032" +
    "\177\043\212\047\246\063\210\001\002\000\010\042\273" +
    "\050\275\062\274\001\002\000\006\050\272\061\ufef1\001" +
    "\002\000\010\042\uff50\050\265\061\uff50\001\002\000\006" +
    "\050\271\061\ufef2\001\002\000\016\035\217\042\266\043" +
    "\216\045\222\050\221\061\ufef5\001\002\000\010\042\255" +
    "\050\256\061\ufef3\001\002\000\016\025\201\027\165\030" +
    "\203\032\177\043\212\047\261\001\002\000\020\033\uff49" +
    "\040\uff49\041\uff49\042\uff49\050\uff49\061\uff49\062\uff49\001" +
    "\002\000\020\033\uff53\040\uff53\041\uff53\042\uff53\050\uff53" +
    "\061\uff53\062\uff53\001\002\000\012\035\217\042\266\043" +
    "\216\045\222\001\002\000\016\025\201\027\165\030\203" +
    "\032\177\043\212\047\261\001\002\000\004\042\255\001" +
    "\002\000\004\050\265\001\002\000\004\050\256\001\002" +
    "\000\020\033\uff4b\040\uff4b\041\uff4b\042\uff4b\050\uff4b\061" +
    "\uff4b\062\uff4b\001\002\000\016\025\201\027\165\030\203" +
    "\032\177\043\212\047\261\001\002\000\020\033\uff54\040" +
    "\uff54\041\uff54\042\uff54\050\uff54\061\uff54\062\uff54\001\002" +
    "\000\026\033\uff5e\035\217\040\uff5e\041\uff5e\042\uff5e\043" +
    "\uff5e\045\222\050\uff5e\061\uff5e\062\uff5e\001\002\000\020" +
    "\033\uff47\040\uff47\041\uff47\042\uff47\050\uff47\061\uff47\062" +
    "\uff47\001\002\000\020\033\uff45\040\uff45\041\uff45\042\uff45" +
    "\050\uff45\061\uff45\062\uff45\001\002\000\006\027\165\047" +
    "\300\001\002\000\024\007\206\025\201\027\165\030\203" +
    "\031\176\032\177\043\212\047\205\063\210\001\002\000" +
    "\020\033\ufefd\040\ufefd\041\ufefd\042\ufefd\050\ufefd\061\ufefd" +
    "\062\ufefd\001\002\000\020\033\ufefc\040\ufefc\041\ufefc\042" +
    "\ufefc\050\ufefc\061\ufefc\062\ufefc\001\002\000\020\033\uff56" +
    "\040\uff56\041\uff56\042\uff56\050\uff56\061\uff56\062\uff56\001" +
    "\002\000\006\027\165\047\300\001\002\000\024\007\206" +
    "\025\201\027\165\030\203\031\176\032\177\043\212\047" +
    "\205\063\210\001\002\000\020\033\uff51\040\uff51\041\uff51" +
    "\042\uff51\050\uff51\061\uff51\062\uff51\001\002\000\020\033" +
    "\uff4d\040\uff4d\041\uff4d\042\uff4d\050\uff4d\061\uff4d\062\274" +
    "\001\002\000\020\033\uff4c\040\uff4c\041\uff4c\042\uff50\050" +
    "\uff4c\061\uff50\062\uff4c\001\002\000\026\033\uff4f\035\217" +
    "\040\uff4f\041\uff4f\042\uff4f\043\216\045\222\050\uff4f\061" +
    "\uff4f\062\uff4f\001\002\000\020\033\uff4e\040\uff4e\041\uff4e" +
    "\042\uff4e\050\uff4e\061\uff4e\062\uff4e\001\002\000\020\033" +
    "\uff60\040\uff60\041\uff60\042\uff60\050\uff60\061\uff60\062\uff60" +
    "\001\002\000\020\033\ufef0\040\ufef0\041\ufef0\042\ufef0\050" +
    "\ufef0\061\ufef0\062\ufef0\001\002\000\024\007\206\025\201" +
    "\027\165\030\203\031\176\032\177\043\212\047\205\063" +
    "\210\001\002\000\020\033\ufef6\040\ufef6\041\ufef6\042\ufef6" +
    "\050\ufef6\061\316\062\ufef6\001\002\000\006\042\273\062" +
    "\274\001\002\000\020\033\ufef7\040\ufef7\041\ufef7\042\ufef8" +
    "\050\ufef7\061\311\062\ufef8\001\002\000\020\033\ufef9\040" +
    "\ufef9\041\ufef9\042\ufef9\050\ufef9\061\ufef9\062\ufef9\001\002" +
    "\000\024\007\206\025\201\027\165\030\203\031\176\032" +
    "\177\043\212\047\205\063\210\001\002\000\020\033\ufefa" +
    "\040\ufefa\041\ufefa\042\ufefa\050\ufefa\061\ufefa\062\ufefa\001" +
    "\002\000\020\033\ufefe\040\ufefe\041\ufefe\042\ufefe\050\ufefe" +
    "\061\ufefe\062\ufefe\001\002\000\012\025\232\031\176\047" +
    "\321\063\210\001\002\000\004\050\310\001\002\000\004" +
    "\047\343\001\002\000\004\047\325\001\002\000\030\003" +
    "\335\007\206\025\201\027\165\030\203\031\176\032\177" +
    "\043\212\047\205\050\uff0d\063\210\001\002\000\006\041" +
    "\uff0b\050\uff0b\001\002\000\012\041\uff06\042\273\050\uff06" +
    "\062\274\001\002\000\010\041\uff04\050\uff04\061\ufef1\001" +
    "\002\000\010\041\uff05\050\uff05\061\ufef2\001\002\000\010" +
    "\041\uff08\050\uff08\061\ufef4\001\002\000\020\035\217\041" +
    "\uff09\042\266\043\216\045\222\050\uff09\061\ufef5\001\002" +
    "\000\004\050\342\001\002\000\006\041\uff0a\050\uff0a\001" +
    "\002\000\012\041\uff07\042\255\050\uff07\061\ufef3\001\002" +
    "\000\006\041\340\050\uff0e\001\002\000\024\007\206\025" +
    "\201\027\165\030\203\031\176\032\177\043\212\047\205" +
    "\063\210\001\002\000\006\041\uff0c\050\uff0c\001\002\000" +
    "\020\033\uff44\040\uff44\041\uff44\042\uff44\050\uff44\061\uff44" +
    "\062\uff44\001\002\000\004\050\344\001\002\000\020\033" +
    "\uff46\040\uff46\041\uff46\042\uff46\050\uff46\061\uff46\062\uff46" +
    "\001\002\000\010\037\ufeca\057\ufeca\060\ufeca\001\002\000" +
    "\010\037\ufecc\057\ufecc\060\ufecc\001\002\000\010\037\ufecb" +
    "\057\ufecb\060\ufecb\001\002\000\010\037\ufec8\057\ufec8\060" +
    "\ufec8\001\002\000\010\037\ufec7\057\ufec7\060\ufec7\001\002" +
    "\000\010\037\ufec9\057\ufec9\060\ufec9\001\002\000\066\003" +
    "\uff74\006\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74" +
    "\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023" +
    "\uff74\024\uff74\025\uff74\037\uff74\042\uff74\043\uff74\051\uff74" +
    "\052\uff74\053\uff74\054\uff74\056\uff74\057\uff74\060\uff74\001" +
    "\002\000\010\037\ufed8\057\ufed8\060\ufed8\001\002\000\010" +
    "\037\ufed4\057\ufed4\060\ufed4\001\002\000\070\003\ufed9\006" +
    "\ufed9\010\ufed9\011\ufed9\012\ufed9\013\ufed9\014\ufed9\015\ufed9" +
    "\016\ufed9\017\ufed9\020\ufed9\021\ufed9\022\ufed9\023\ufed9\024" +
    "\ufed9\025\ufed9\037\ufed9\042\ufed9\043\ufed9\051\ufed9\052\ufed9" +
    "\053\ufed9\054\ufed9\055\ufed9\056\ufed9\057\ufed9\060\ufed9\001" +
    "\002\000\004\047\360\001\002\000\024\007\206\025\242" +
    "\027\165\030\203\031\176\032\177\043\212\047\246\063" +
    "\210\001\002\000\010\042\273\050\365\062\274\001\002" +
    "\000\004\050\363\001\002\000\004\033\364\001\002\000" +
    "\066\003\uff31\006\uff31\010\uff31\011\uff31\012\uff31\013\uff31" +
    "\014\uff31\015\uff31\016\uff31\017\uff31\020\uff31\021\uff31\022" +
    "\uff31\023\uff31\024\uff31\025\uff31\037\uff31\042\uff31\043\uff31" +
    "\051\uff31\052\uff31\053\uff31\054\uff31\056\uff31\057\uff31\060" +
    "\uff31\001\002\000\004\033\366\001\002\000\066\003\uff32" +
    "\006\uff32\010\uff32\011\uff32\012\uff32\013\uff32\014\uff32\015" +
    "\uff32\016\uff32\017\uff32\020\uff32\021\uff32\022\uff32\023\uff32" +
    "\024\uff32\025\uff32\037\uff32\042\uff32\043\uff32\051\uff32\052" +
    "\uff32\053\uff32\054\uff32\056\uff32\057\uff32\060\uff32\001\002" +
    "\000\006\033\uffbe\041\uffbe\001\002\000\006\033\uffe0\041" +
    "\u0102\001\002\000\004\025\372\001\002\000\010\033\uffba" +
    "\041\uffba\046\373\001\002\000\010\007\374\025\232\047" +
    "\376\001\002\000\004\024\324\001\002\000\006\033\uffbc" +
    "\041\uffbc\001\002\000\010\007\374\025\232\047\376\001" +
    "\002\000\006\033\uffbb\041\uffbb\001\002\000\004\050\272" +
    "\001\002\000\006\033\uffbd\041\uffbd\001\002\000\004\025" +
    "\372\001\002\000\006\033\uffbf\041\uffbf\001\002\000\004" +
    "\025\u0106\001\002\000\006\033\uffd7\041\uffd7\001\002\000" +
    "\010\033\uffd3\041\uffd3\046\u010a\001\002\000\006\033\uffe4" +
    "\041\u0108\001\002\000\004\025\u0106\001\002\000\006\033" +
    "\uffd8\041\uffd8\001\002\000\024\007\206\025\242\027\165" +
    "\030\203\031\176\032\177\043\212\047\246\063\210\001" +
    "\002\000\010\033\uffd4\041\uffd4\061\ufef4\001\002\000\006" +
    "\033\uffd5\041\uffd5\001\002\000\006\033\uffd6\041\uffd6\001" +
    "\002\000\036\003\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\026\uffa7\037\uffa7\001\002\000\066\003\uff6d\006\uff6d" +
    "\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d\015\uff6d\016" +
    "\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d" +
    "\025\uff6d\037\uff6d\042\uff6d\043\uff6d\051\uff6d\052\uff6d\053" +
    "\uff6d\054\uff6d\056\uff6d\057\uff6d\060\uff6d\001\002\000\024" +
    "\007\206\025\242\027\165\030\203\031\176\032\177\043" +
    "\212\047\246\063\210\001\002\000\010\042\273\050\u0115" +
    "\062\274\001\002\000\004\050\u0113\001\002\000\006\003" +
    "\144\036\145\001\002\000\066\003\uff33\006\uff33\010\uff33" +
    "\011\uff33\012\uff33\013\uff33\014\uff33\015\uff33\016\uff33\017" +
    "\uff33\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33\025\uff33" +
    "\037\uff33\042\uff33\043\uff33\051\uff33\052\uff33\053\uff33\054" +
    "\uff33\056\uff33\057\uff33\060\uff33\001\002\000\006\003\144" +
    "\036\145\001\002\000\066\003\uff34\006\uff34\010\uff34\011" +
    "\uff34\012\uff34\013\uff34\014\uff34\015\uff34\016\uff34\017\uff34" +
    "\020\uff34\021\uff34\022\uff34\023\uff34\024\uff34\025\uff34\037" +
    "\uff34\042\uff34\043\uff34\051\uff34\052\uff34\053\uff34\054\uff34" +
    "\056\uff34\057\uff34\060\uff34\001\002\000\026\003\u011b\007" +
    "\206\025\201\027\165\030\203\031\176\032\177\043\212" +
    "\047\205\063\210\001\002\000\004\050\u011d\001\002\000" +
    "\010\040\ufedf\050\ufedf\061\ufef4\001\002\000\020\035\217" +
    "\040\ufede\042\266\043\216\045\222\050\ufede\061\ufef5\001" +
    "\002\000\006\040\ufedc\050\ufedc\001\002\000\012\040\ufedd" +
    "\042\255\050\ufedd\061\ufef3\001\002\000\004\036\u011e\001" +
    "\002\000\012\003\u0121\037\ufee0\057\u0125\060\u011f\001\002" +
    "\000\004\040\u012c\001\002\000\004\037\ufee8\001\002\000" +
    "\004\037\ufee7\001\002\000\004\037\u012b\001\002\000\010" +
    "\037\ufee0\057\u0125\060\u011f\001\002\000\010\037\ufee5\057" +
    "\ufee5\060\ufee5\001\002\000\026\003\u011b\007\206\025\201" +
    "\027\165\030\203\031\176\032\177\043\212\047\205\063" +
    "\210\001\002\000\004\040\u0127\001\002\000\066\003\123" +
    "\006\117\010\154\011\155\012\005\013\007\014\014\015" +
    "\016\016\104\017\102\020\133\021\076\022\121\023\112" +
    "\024\134\025\077\037\ufee3\042\140\043\103\051\105\052" +
    "\126\053\137\054\115\056\124\057\ufee3\060\ufee3\001\002" +
    "\000\010\037\ufee4\057\ufee4\060\ufee4\001\002\000\004\037" +
    "\ufee9\001\002\000\010\037\ufee6\057\ufee6\060\ufee6\001\002" +
    "\000\066\003\ufeea\006\ufeea\010\ufeea\011\ufeea\012\ufeea\013" +
    "\ufeea\014\ufeea\015\ufeea\016\ufeea\017\ufeea\020\ufeea\021\ufeea" +
    "\022\ufeea\023\ufeea\024\ufeea\025\ufeea\037\ufeea\042\ufeea\043" +
    "\ufeea\051\ufeea\052\ufeea\053\ufeea\054\ufeea\056\ufeea\057\ufeea" +
    "\060\ufeea\001\002\000\062\003\123\006\117\010\154\011" +
    "\155\012\005\013\007\014\014\015\016\016\104\017\102" +
    "\020\133\021\076\022\121\023\112\024\134\025\077\037" +
    "\ufee1\042\140\043\103\051\105\052\126\053\137\054\115" +
    "\056\124\001\002\000\004\037\ufee2\001\002\000\066\003" +
    "\uff30\006\uff30\010\uff30\011\uff30\012\uff30\013\uff30\014\uff30" +
    "\015\uff30\016\uff30\017\uff30\020\uff30\021\uff30\022\uff30\023" +
    "\uff30\024\uff30\025\uff30\037\uff30\042\uff30\043\uff30\051\uff30" +
    "\052\uff30\053\uff30\054\uff30\056\uff30\057\uff30\060\uff30\001" +
    "\002\000\004\033\345\001\002\000\014\033\346\035\217" +
    "\042\220\043\216\045\222\001\002\000\014\025\201\030" +
    "\203\032\177\043\212\047\u0131\001\002\000\004\025\u0135" +
    "\001\002\000\006\033\uffe2\041\u0139\001\002\000\006\033" +
    "\uffcb\041\uffcb\001\002\000\010\033\uffc7\041\uffc7\046\u0136" +
    "\001\002\000\024\007\206\025\242\027\165\030\203\031" +
    "\176\032\177\043\212\047\246\063\210\001\002\000\012" +
    "\033\uffc8\041\uffc8\042\273\062\274\001\002\000\006\033" +
    "\uffc9\041\uffc9\001\002\000\004\025\u0135\001\002\000\006" +
    "\033\uffcc\041\uffcc\001\002\000\006\033\uffca\041\uffca\001" +
    "\002\000\006\003\u013e\025\u0140\001\002\000\004\033\u0160" +
    "\001\002\000\006\033\uff12\046\uff12\001\002\000\004\046" +
    "\u014a\001\002\000\012\033\uff13\034\u0141\046\uff13\047\u0142" +
    "\001\002\000\006\003\u013e\025\u0140\001\002\000\030\003" +
    "\335\007\206\025\201\027\165\030\203\031\176\032\177" +
    "\043\212\047\205\050\uff0d\063\210\001\002\000\004\050" +
    "\u0144\001\002\000\006\033\uff0f\034\u0145\001\002\000\006" +
    "\003\u013e\025\u0140\001\002\000\004\033\uff10\001\002\000" +
    "\006\033\uff14\046\uff14\001\002\000\004\033\uff11\001\002" +
    "\000\006\033\uff15\046\uff15\001\002\000\030\003\u0153\006" +
    "\u0150\007\206\025\u0151\027\165\030\203\031\176\032\177" +
    "\043\212\047\205\063\210\001\002\000\004\033\u015f\001" +
    "\002\000\010\033\uff67\042\273\062\274\001\002\000\006" +
    "\033\uff65\061\ufef1\001\002\000\006\033\uff66\061\ufef2\001" +
    "\002\000\006\033\uff69\061\ufef4\001\002\000\004\034\u015c" +
    "\001\002\000\022\033\uff57\034\u0156\035\uff57\042\uff57\043" +
    "\uff57\045\uff57\047\u0157\061\uff57\001\002\000\016\033\uff6a" +
    "\035\217\042\266\043\216\045\222\061\ufef5\001\002\000" +
    "\004\033\uff61\001\002\000\010\033\uff68\042\255\061\ufef3" +
    "\001\002\000\004\033\uff63\001\002\000\004\025\u015b\001" +
    "\002\000\030\003\335\007\206\025\201\027\165\030\203" +
    "\031\176\032\177\043\212\047\205\050\uff0d\063\210\001" +
    "\002\000\004\050\u0159\001\002\000\006\033\uff0f\034\u015a" +
    "\001\002\000\004\025\u015b\001\002\000\006\034\u0156\047" +
    "\u0157\001\002\000\006\003\u013e\025\u0140\001\002\000\004" +
    "\033\uff62\001\002\000\004\033\uff64\001\002\000\106\003" +
    "\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\027\uff6b\030\uff6b\031\uff6b" +
    "\032\uff6b\033\uff6b\037\uff6b\042\uff6b\043\uff6b\047\uff6b\051" +
    "\uff6b\052\uff6b\053\uff6b\054\uff6b\056\uff6b\057\uff6b\060\uff6b" +
    "\063\uff6b\001\002\000\066\003\uff16\006\uff16\010\uff16\011" +
    "\uff16\012\uff16\013\uff16\014\uff16\015\uff16\016\uff16\017\uff16" +
    "\020\uff16\021\uff16\022\uff16\023\uff16\024\uff16\025\uff16\037" +
    "\uff16\042\uff16\043\uff16\051\uff16\052\uff16\053\uff16\054\uff16" +
    "\056\uff16\057\uff16\060\uff16\001\002\000\024\007\206\025" +
    "\242\027\165\030\203\031\176\032\177\043\212\047\246" +
    "\063\210\001\002\000\010\042\273\050\u0166\062\274\001" +
    "\002\000\004\050\u0164\001\002\000\006\003\144\036\145" +
    "\001\002\000\070\003\ufeff\006\ufeff\010\ufeff\011\ufeff\012" +
    "\ufeff\013\ufeff\014\ufeff\015\ufeff\016\ufeff\017\ufeff\020\ufeff" +
    "\021\ufeff\022\ufeff\023\ufeff\024\ufeff\025\ufeff\037\ufeff\042" +
    "\ufeff\043\ufeff\051\ufeff\052\ufeff\053\ufeff\054\ufeff\055\ufeff" +
    "\056\ufeff\057\ufeff\060\ufeff\001\002\000\006\003\144\036" +
    "\145\001\002\000\070\003\uff00\006\uff00\010\uff00\011\uff00" +
    "\012\uff00\013\uff00\014\uff00\015\uff00\016\uff00\017\uff00\020" +
    "\uff00\021\uff00\022\uff00\023\uff00\024\uff00\025\uff00\037\uff00" +
    "\042\uff00\043\uff00\051\uff00\052\uff00\053\uff00\054\uff00\055" +
    "\uff00\056\uff00\057\uff00\060\uff00\001\002\000\004\025\u016b" +
    "\001\002\000\006\033\uffc5\041\uffc5\001\002\000\006\033" +
    "\uffe1\041\u0172\001\002\000\010\033\uffc0\041\uffc0\046\u016c" +
    "\001\002\000\010\007\206\025\232\047\u016f\001\002\000" +
    "\006\033\uffc2\041\uffc2\001\002\000\006\033\uffc3\041\uffc3" +
    "\001\002\000\010\007\206\025\232\047\u016f\001\002\000" +
    "\006\033\uffc1\041\uffc1\001\002\000\004\050\271\001\002" +
    "\000\004\025\u016b\001\002\000\006\033\uffc6\041\uffc6\001" +
    "\002\000\006\033\uffc4\041\uffc4\001\002\000\006\003\144" +
    "\036\145\001\002\000\066\003\uff02\006\uff02\010\uff02\011" +
    "\uff02\012\uff02\013\uff02\014\uff02\015\uff02\016\uff02\017\uff02" +
    "\020\uff02\021\uff02\022\uff02\023\uff02\024\uff02\025\uff02\037" +
    "\uff02\042\uff02\043\uff02\051\uff02\052\uff02\053\uff02\054\uff02" +
    "\056\uff02\057\uff02\060\uff02\001\002\000\066\003\uff17\006" +
    "\uff17\010\uff17\011\uff17\012\uff17\013\uff17\014\uff17\015\uff17" +
    "\016\uff17\017\uff17\020\uff17\021\uff17\022\uff17\023\uff17\024" +
    "\uff17\025\uff17\037\uff17\042\uff17\043\uff17\051\uff17\052\uff17" +
    "\053\uff17\054\uff17\056\uff17\057\uff17\060\uff17\001\002\000" +
    "\004\037\u017b\001\002\000\004\037\u017a\001\002\000\036" +
    "\003\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8" +
    "\037\uffa8\001\002\000\036\003\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\026\uffa6\037\uffa6\001\002\000\004\033" +
    "\uffdf\001\002\000\004\033\u017e\001\002\000\070\003\uffe8" +
    "\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\037\uffe8\042\uffe8\043\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\001\002\000\030\003\u018a\006\u018b\016\u0180\017\u0187\020" +
    "\u0185\021\u018d\022\u0183\023\u0182\024\u0189\025\u018c\033\u0181" +
    "\001\002\000\004\025\u01da\001\002\000\030\003\uff2c\007" +
    "\uff2c\025\uff2c\027\uff2c\030\uff2c\031\uff2c\032\uff2c\033\uff2c" +
    "\043\uff2c\047\uff2c\063\uff2c\001\002\000\004\025\u01d2\001" +
    "\002\000\004\025\u01cc\001\002\000\030\003\uff2e\007\uff2e" +
    "\025\uff2e\027\uff2e\030\uff2e\031\uff2e\032\uff2e\033\uff2e\043" +
    "\uff2e\047\uff2e\063\uff2e\001\002\000\004\025\u01c6\001\002" +
    "\000\030\003\uff2d\007\uff2d\025\uff2d\027\uff2d\030\uff2d\031" +
    "\uff2d\032\uff2d\033\uff2d\043\uff2d\047\uff2d\063\uff2d\001\002" +
    "\000\004\025\u01c2\001\002\000\030\003\u01a5\007\206\025" +
    "\242\027\165\030\203\031\176\032\177\033\u01a6\043\212" +
    "\047\246\063\210\001\002\000\004\025\u019c\001\002\000" +
    "\006\033\u019b\046\uff12\001\002\000\004\034\u019a\001\002" +
    "\000\010\034\u0195\046\uff13\047\u0196\001\002\000\004\025" +
    "\u018e\001\002\000\004\046\u018f\001\002\000\010\025\232" +
    "\032\177\047\u0192\001\002\000\004\033\u0194\001\002\000" +
    "\004\033\u0193\001\002\000\010\025\232\032\177\047\u0192" +
    "\001\002\000\030\003\uff25\007\uff25\025\uff25\027\uff25\030" +
    "\uff25\031\uff25\032\uff25\033\uff25\043\uff25\047\uff25\063\uff25" +
    "\001\002\000\030\003\uff26\007\uff26\025\uff26\027\uff26\030" +
    "\uff26\031\uff26\032\uff26\033\uff26\043\uff26\047\uff26\063\uff26" +
    "\001\002\000\006\003\u013e\025\u018c\001\002\000\030\003" +
    "\335\007\206\025\201\027\165\030\203\031\176\032\177" +
    "\043\212\047\205\050\uff0d\063\210\001\002\000\004\050" +
    "\u0198\001\002\000\004\034\u0199\001\002\000\006\003\u013e" +
    "\025\u018c\001\002\000\006\003\u013e\025\u018c\001\002\000" +
    "\030\003\uff2b\007\uff2b\025\uff2b\027\uff2b\030\uff2b\031\uff2b" +
    "\032\uff2b\033\uff2b\043\uff2b\047\uff2b\063\uff2b\001\002\000" +
    "\004\046\u019d\001\002\000\010\007\374\025\232\047\376" +
    "\001\002\000\004\033\u01a1\001\002\000\004\033\u01a0\001" +
    "\002\000\030\003\uff20\007\uff20\025\uff20\027\uff20\030\uff20" +
    "\031\uff20\032\uff20\033\uff20\043\uff20\047\uff20\063\uff20\001" +
    "\002\000\030\003\uff1f\007\uff1f\025\uff1f\027\uff1f\030\uff1f" +
    "\031\uff1f\032\uff1f\033\uff1f\043\uff1f\047\uff1f\063\uff1f\001" +
    "\002\000\010\033\u01c1\042\273\062\274\001\002\000\014" +
    "\003\u01a9\025\u01ac\042\140\043\103\050\uff19\001\002\000" +
    "\004\033\u01a8\001\002\000\004\033\u01a7\001\002\000\014" +
    "\003\uff1c\025\uff1c\042\uff1c\043\uff1c\050\uff1c\001\002\000" +
    "\014\003\uff1b\025\uff1b\042\uff1b\043\uff1b\050\uff1b\001\002" +
    "\000\014\003\uff1d\025\uff1d\042\uff1d\043\uff1d\050\uff1d\001" +
    "\002\000\004\050\uff18\001\002\000\004\050\uff1a\001\002" +
    "\000\004\050\u01bf\001\002\000\014\003\u01b1\035\u01ae\042" +
    "\u01b0\043\u01ad\045\u01b3\001\002\000\006\043\u01bc\046\u01bd" +
    "\001\002\000\004\046\u01ba\001\002\000\006\033\uff3c\050" +
    "\uff3c\001\002\000\006\042\u01b6\046\u01b7\001\002\000\006" +
    "\033\uff36\050\uff36\001\002\000\006\033\uff3d\050\uff3d\001" +
    "\002\000\004\046\u01b4\001\002\000\012\025\201\030\203" +
    "\043\212\047\214\001\002\000\016\033\uff39\035\217\042" +
    "\220\043\216\045\222\050\uff39\001\002\000\006\033\uff41" +
    "\050\uff41\001\002\000\024\007\206\025\201\027\165\030" +
    "\203\031\176\032\177\043\212\047\205\063\210\001\002" +
    "\000\010\033\uff37\050\uff37\061\ufef4\001\002\000\020\033" +
    "\uff38\035\217\042\266\043\216\045\222\050\uff38\061\ufef5" +
    "\001\002\000\012\025\201\030\203\043\212\047\214\001" +
    "\002\000\016\033\uff3a\035\217\042\220\043\216\045\222" +
    "\050\uff3a\001\002\000\006\033\uff40\050\uff40\001\002\000" +
    "\012\025\201\030\203\043\212\047\214\001\002\000\016" +
    "\033\uff3b\035\217\042\220\043\216\045\222\050\uff3b\001" +
    "\002\000\006\003\144\036\145\001\002\000\066\003\uff2f" +
    "\006\uff2f\010\uff2f\011\uff2f\012\uff2f\013\uff2f\014\uff2f\015" +
    "\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f\022\uff2f\023\uff2f" +
    "\024\uff2f\025\uff2f\037\uff2f\042\uff2f\043\uff2f\051\uff2f\052" +
    "\uff2f\053\uff2f\054\uff2f\056\uff2f\057\uff2f\060\uff2f\001\002" +
    "\000\014\003\uff1e\025\uff1e\042\uff1e\043\uff1e\050\uff1e\001" +
    "\002\000\004\046\u01c3\001\002\000\012\025\201\030\203" +
    "\043\212\047\214\001\002\000\014\033\u01c5\035\217\042" +
    "\220\043\216\045\222\001\002\000\030\003\uff29\007\uff29" +
    "\025\uff29\027\uff29\030\uff29\031\uff29\032\uff29\033\uff29\043" +
    "\uff29\047\uff29\063\uff29\001\002\000\004\046\u01c7\001\002" +
    "\000\024\007\206\025\242\027\165\030\203\031\176\032" +
    "\177\043\212\047\246\063\210\001\002\000\006\033\u01cb" +
    "\061\ufef4\001\002\000\004\033\u01ca\001\002\000\030\003" +
    "\uff27\007\uff27\025\uff27\027\uff27\030\uff27\031\uff27\032\uff27" +
    "\033\uff27\043\uff27\047\uff27\063\uff27\001\002\000\030\003" +
    "\uff28\007\uff28\025\uff28\027\uff28\030\uff28\031\uff28\032\uff28" +
    "\033\uff28\043\uff28\047\uff28\063\uff28\001\002\000\004\046" +
    "\u01cd\001\002\000\024\007\206\025\242\027\165\030\203" +
    "\031\176\032\177\043\212\047\246\063\210\001\002\000" +
    "\010\033\u01d1\042\273\062\274\001\002\000\004\033\u01d0" +
    "\001\002\000\030\003\uff23\007\uff23\025\uff23\027\uff23\030" +
    "\uff23\031\uff23\032\uff23\033\uff23\043\uff23\047\uff23\063\uff23" +
    "\001\002\000\030\003\uff24\007\uff24\025\uff24\027\uff24\030" +
    "\uff24\031\uff24\032\uff24\033\uff24\043\uff24\047\uff24\063\uff24" +
    "\001\002\000\004\046\u01d3\001\002\000\010\007\u01d4\025" +
    "\232\047\u01d6\001\002\000\004\023\323\001\002\000\004" +
    "\033\u01d9\001\002\000\010\007\u01d4\025\232\047\u01d6\001" +
    "\002\000\004\033\u01d8\001\002\000\030\003\uff21\007\uff21" +
    "\025\uff21\027\uff21\030\uff21\031\uff21\032\uff21\033\uff21\043" +
    "\uff21\047\uff21\063\uff21\001\002\000\030\003\uff22\007\uff22" +
    "\025\uff22\027\uff22\030\uff22\031\uff22\032\uff22\033\uff22\043" +
    "\uff22\047\uff22\063\uff22\001\002\000\004\046\u01db\001\002" +
    "\000\012\025\201\030\203\043\212\047\214\001\002\000" +
    "\014\033\u01dd\035\217\042\220\043\216\045\222\001\002" +
    "\000\030\003\uff2a\007\uff2a\025\uff2a\027\uff2a\030\uff2a\031" +
    "\uff2a\032\uff2a\033\uff2a\043\uff2a\047\uff2a\063\uff2a\001\002" +
    "\000\006\033\uffe6\041\u01e0\001\002\000\010\033\uffd9\041" +
    "\uffd9\046\053\001\002\000\004\025\u01df\001\002\000\006" +
    "\033\uffde\041\uffde\001\002\000\004\025\u01e3\001\002\000" +
    "\006\033\uff3e\050\uff3e\001\002\000\036\003\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\037\uffa5\001\002" +
    "\000\006\033\uffd1\041\uffd1\001\002\000\004\025\u01e8\001" +
    "\002\000\006\033\uffe3\041\u01ec\001\002\000\010\033\uffcd" +
    "\041\uffcd\046\u01e9\001\002\000\010\025\232\032\177\047" +
    "\u0192\001\002\000\006\033\uffce\041\uffce\001\002\000\006" +
    "\033\uffcf\041\uffcf\001\002\000\004\025\u01e8\001\002\000" +
    "\006\033\uffd2\041\uffd2\001\002\000\006\033\uffd0\041\uffd0" +
    "\001\002\000\030\003\u0153\006\u0150\007\206\025\u0151\027" +
    "\165\030\203\031\176\032\177\043\212\047\205\063\210" +
    "\001\002\000\004\033\u01f1\001\002\000\106\003\uff6c\006" +
    "\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c" +
    "\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023" +
    "\uff6c\024\uff6c\025\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c" +
    "\033\uff6c\037\uff6c\042\uff6c\043\uff6c\047\uff6c\051\uff6c\052" +
    "\uff6c\053\uff6c\054\uff6c\056\uff6c\057\uff6c\060\uff6c\063\uff6c" +
    "\001\002\000\036\003\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\026\uffa4\037\uffa4\001\002\000\006\041\uff80\050" +
    "\uff80\001\002\000\006\041\uff7c\050\uff7c\001\002\000\006" +
    "\033\uffda\041\uffda\001\002\000\016\033\uffdb\035\217\041" +
    "\uffdb\042\220\043\216\045\222\001\002\000\006\033\uffdc" +
    "\041\uffdc\001\002\000\006\003\u01f9\047\u01fb\001\002\000" +
    "\004\037\u0208\001\002\000\036\003\uff86\012\uff86\013\uff86" +
    "\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\026\uff86\037\uff86\001\002\000\026" +
    "\003\064\016\055\017\062\020\061\021\067\022\057\023" +
    "\056\024\063\041\uff7e\050\uff7e\001\002\000\006\041\070" +
    "\050\u01fd\001\002\000\004\036\u01fe\001\002\000\060\003" +
    "\123\006\117\010\u0201\012\005\013\007\014\014\015\016" +
    "\016\104\017\102\020\133\021\076\022\121\023\112\024" +
    "\134\025\077\037\u01ff\042\140\043\103\051\105\052\126" +
    "\053\137\054\115\056\124\001\002\000\036\003\uff82\012" +
    "\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\023\uff82\024\uff82\026\uff82\037\uff82\001" +
    "\002\000\060\003\123\006\117\010\u0205\012\005\013\007" +
    "\014\014\015\016\016\104\017\102\020\133\021\076\022" +
    "\121\023\112\024\134\025\077\037\u0204\042\140\043\103" +
    "\051\105\052\126\053\137\054\115\056\124\001\002\000" +
    "\004\033\u0202\001\002\000\004\037\u0203\001\002\000\036" +
    "\003\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017" +
    "\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\026\uff83" +
    "\037\uff83\001\002\000\036\003\uff84\012\uff84\013\uff84\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\026\uff84\037\uff84\001\002\000\004\033" +
    "\u0206\001\002\000\004\037\u0207\001\002\000\036\003\uff85" +
    "\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\026\uff85\037\uff85" +
    "\001\002\000\036\003\uff81\012\uff81\013\uff81\014\uff81\015" +
    "\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81" +
    "\024\uff81\026\uff81\037\uff81\001\002\000\036\003\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\037\uffb9\001" +
    "\002\000\036\003\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\026\uffec\037\uffec\001\002\000\004\002\uffee\001\002" +
    "\000\012\033\uffd3\041\uffd3\046\u010a\047\u020d\001\002\000" +
    "\026\003\064\016\055\017\062\020\061\021\067\022\057" +
    "\023\056\024\063\041\uff7e\050\uff7e\001\002\000\006\041" +
    "\070\050\u020f\001\002\000\006\003\u0210\036\u0212\001\002" +
    "\000\004\037\u021f\001\002\000\036\003\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\026\uffad\037\uffad\001\002\000" +
    "\056\003\123\006\117\010\u0215\012\005\013\007\014\014" +
    "\015\016\016\104\017\102\020\133\021\076\022\121\023" +
    "\112\024\134\025\077\042\140\043\103\051\105\052\126" +
    "\053\137\054\115\056\124\001\002\000\056\003\123\006" +
    "\117\010\u0215\012\005\013\007\014\014\015\016\016\104" +
    "\017\102\020\133\021\076\022\121\023\112\024\134\025" +
    "\077\042\140\043\103\051\105\052\126\053\137\054\115" +
    "\056\124\001\002\000\004\037\u021a\001\002\000\024\007" +
    "\206\025\242\027\165\030\203\031\176\032\177\043\212" +
    "\047\246\063\210\001\002\000\004\037\u0217\001\002\000" +
    "\036\003\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026" +
    "\uffa0\037\uffa0\001\002\000\004\033\u0219\001\002\000\004" +
    "\037\ufecd\001\002\000\036\003\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\026\uffa2\037\uffa2\001\002\000\004\037" +
    "\u021e\001\002\000\004\037\u021d\001\002\000\036\003\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\037\uffa1" +
    "\001\002\000\036\003\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\026\uffa3\037\uffa3\001\002\000\036\003\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\037\uff9f\001" +
    "\002\000\012\033\uffc7\041\uffc7\046\u0136\047\u0221\001\002" +
    "\000\026\003\064\016\055\017\062\020\061\021\067\022" +
    "\057\023\056\024\063\041\uff7e\050\uff7e\001\002\000\006" +
    "\041\070\050\u0223\001\002\000\006\003\u0225\036\u0226\001" +
    "\002\000\036\003\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\026\uffab\037\uffab\001\002\000\004\037\u0231\001\002" +
    "\000\056\003\123\006\117\010\u0229\012\005\013\007\014" +
    "\014\015\016\016\104\017\102\020\133\021\076\022\121" +
    "\023\112\024\134\025\077\042\140\043\103\051\105\052" +
    "\126\053\137\054\115\056\124\001\002\000\056\003\123" +
    "\006\117\010\u0229\012\005\013\007\014\014\015\016\016" +
    "\104\017\102\020\133\021\076\022\121\023\112\024\134" +
    "\025\077\042\140\043\103\051\105\052\126\053\137\054" +
    "\115\056\124\001\002\000\004\037\u022c\001\002\000\024" +
    "\007\206\025\242\027\165\030\203\031\176\032\177\043" +
    "\212\047\246\063\210\001\002\000\004\037\u022b\001\002" +
    "\000\036\003\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\026\uff96\037\uff96\001\002\000\036\003\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\024\uff98\026\uff98\037\uff98\001\002\000" +
    "\004\037\u0230\001\002\000\004\037\u022f\001\002\000\036" +
    "\003\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017" +
    "\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\026\uff97" +
    "\037\uff97\001\002\000\036\003\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\026\uff99\037\uff99\001\002\000\036\003" +
    "\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95" +
    "\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\026\uff95\037" +
    "\uff95\001\002\000\012\033\uffc0\041\uffc0\046\u016c\047\u0233" +
    "\001\002\000\026\003\064\016\055\017\062\020\061\021" +
    "\067\022\057\023\056\024\063\041\uff7e\050\uff7e\001\002" +
    "\000\006\041\070\050\u0235\001\002\000\006\003\u0236\036" +
    "\u0238\001\002\000\004\037\u024b\001\002\000\036\003\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\037\uffaa" +
    "\001\002\000\056\003\123\006\117\010\u023c\012\005\013" +
    "\007\014\014\015\016\016\104\017\102\020\133\021\076" +
    "\022\121\023\112\024\134\025\077\042\140\043\103\051" +
    "\105\052\126\053\137\054\115\056\124\001\002\000\004" +
    "\037\u024a\001\002\000\056\003\123\006\117\010\u023c\012" +
    "\005\013\007\014\014\015\016\016\104\017\102\020\133" +
    "\021\076\022\121\023\112\024\134\025\077\042\140\043" +
    "\103\051\105\052\126\053\137\054\115\056\124\001\002" +
    "\000\004\037\u0241\001\002\000\024\007\206\025\242\027" +
    "\165\030\203\031\176\032\177\043\212\047\246\063\210" +
    "\001\002\000\004\037\u0240\001\002\000\004\037\u023f\001" +
    "\002\000\036\003\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\026\uff8f\037\uff8f\001\002\000\036\003\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\037\uff8d\001\002" +
    "\000\036\003\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\026\uff93\037\uff93\001\002\000\004\037\u0249\001\002\000" +
    "\004\037\u0248\001\002\000\004\037\u0247\001\002\000\004" +
    "\037\u0246\001\002\000\036\003\uff8e\012\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e" +
    "\023\uff8e\024\uff8e\026\uff8e\037\uff8e\001\002\000\036\003" +
    "\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\026\uff90\037" +
    "\uff90\001\002\000\036\003\uff94\012\uff94\013\uff94\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\026\uff94\037\uff94\001\002\000\036\003\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\uff92\023\uff92\024\uff92\026\uff92\037\uff92" +
    "\001\002\000\036\003\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\026\uff91\037\uff91\001\002\000\036\003\uff8c\012" +
    "\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\024\uff8c\026\uff8c\037\uff8c\001" +
    "\002\000\026\003\064\016\055\017\062\020\061\021\067" +
    "\022\057\023\056\024\063\041\uff7e\050\uff7e\001\002\000" +
    "\012\033\uffba\041\uffba\046\373\047\u024e\001\002\000\026" +
    "\003\064\016\055\017\062\020\061\021\067\022\057\023" +
    "\056\024\063\041\uff7e\050\uff7e\001\002\000\006\041\070" +
    "\050\u0250\001\002\000\006\003\u0251\036\u0253\001\002\000" +
    "\004\037\u025f\001\002\000\036\003\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\026\uffa9\037\uffa9\001\002\000\056" +
    "\003\123\006\117\010\u0256\012\005\013\007\014\014\015" +
    "\016\016\104\017\102\020\133\021\076\022\121\023\112" +
    "\024\134\025\077\042\140\043\103\051\105\052\126\053" +
    "\137\054\115\056\124\001\002\000\056\003\123\006\117" +
    "\010\u0256\012\005\013\007\014\014\015\016\016\104\017" +
    "\102\020\133\021\076\022\121\023\112\024\134\025\077" +
    "\042\140\043\103\051\105\052\126\053\137\054\115\056" +
    "\124\001\002\000\004\037\u025a\001\002\000\010\007\374" +
    "\025\232\047\376\001\002\000\004\037\u0258\001\002\000" +
    "\036\003\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\026" +
    "\uff88\037\uff88\001\002\000\004\033\351\001\002\000\036" +
    "\003\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\026\uff8a" +
    "\037\uff8a\001\002\000\004\037\u025e\001\002\000\004\037" +
    "\u025d\001\002\000\036\003\uff89\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\026\uff89\037\uff89\001\002\000\036\003\uff8b" +
    "\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\026\uff8b\037\uff8b" +
    "\001\002\000\036\003\uff87\012\uff87\013\uff87\014\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87" +
    "\024\uff87\026\uff87\037\uff87\001\002\000\006\041\070\050" +
    "\u0261\001\002\000\006\003\u0262\036\u0264\001\002\000\004" +
    "\037\u0268\001\002\000\036\003\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\026\uffb3\037\uffb3\001\002\000\056\003" +
    "\123\006\117\012\005\013\007\014\014\015\016\016\104" +
    "\017\102\020\133\021\076\022\121\023\112\024\134\025" +
    "\077\037\u0265\042\140\043\103\051\105\052\126\053\137" +
    "\054\115\056\124\001\002\000\036\003\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\026\uffb1\037\uffb1\001\002\000" +
    "\056\003\123\006\117\012\005\013\007\014\014\015\016" +
    "\016\104\017\102\020\133\021\076\022\121\023\112\024" +
    "\134\025\077\037\u0267\042\140\043\103\051\105\052\126" +
    "\053\137\054\115\056\124\001\002\000\036\003\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\037\uffb2\001" +
    "\002\000\036\003\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\026\uffb0\037\uffb0\001\002\000\012\033\uffcd\041\uffcd" +
    "\046\u01e9\047\u026a\001\002\000\026\003\064\016\055\017" +
    "\062\020\061\021\067\022\057\023\056\024\063\041\uff7e" +
    "\050\uff7e\001\002\000\006\041\070\050\u026c\001\002\000" +
    "\006\003\u026d\036\u026f\001\002\000\004\037\u027a\001\002" +
    "\000\036\003\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\026\uffac\037\uffac\001\002\000\056\003\123\006\117\010" +
    "\u0273\012\005\013\007\014\014\015\016\016\104\017\102" +
    "\020\133\021\076\022\121\023\112\024\134\025\077\042" +
    "\140\043\103\051\105\052\126\053\137\054\115\056\124" +
    "\001\002\000\004\037\u0279\001\002\000\056\003\123\006" +
    "\117\010\u0273\012\005\013\007\014\014\015\016\016\104" +
    "\017\102\020\133\021\076\022\121\023\112\024\134\025" +
    "\077\042\140\043\103\051\105\052\126\053\137\054\115" +
    "\056\124\001\002\000\004\037\u0274\001\002\000\010\025" +
    "\232\032\177\047\u0192\001\002\000\036\003\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d\037\uff9d\001\002" +
    "\000\004\037\u0278\001\002\000\004\037\u0277\001\002\000" +
    "\036\003\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026" +
    "\uff9e\037\uff9e\001\002\000\036\003\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\026\uff9c\037\uff9c\001\002\000\036" +
    "\003\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b" +
    "\037\uff9b\001\002\000\036\003\uff9a\012\uff9a\013\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\026\uff9a\037\uff9a\001\002\000\012\033" +
    "\uffd9\041\uffd9\046\053\047\u027c\001\002\000\026\003\064" +
    "\016\055\017\062\020\061\021\067\022\057\023\056\024" +
    "\063\041\uff7e\050\uff7e\001\002\000\006\041\070\050\u027e" +
    "\001\002\000\006\003\072\036\074\001\002\000\036\003" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\037" +
    "\uffaf\001\002\000\070\003\uffe7\006\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\037\uffe7\042\uffe7\043\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\001\002\000\020\003\ufffc" +
    "\004\ufffc\005\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\001" +
    "\002\000\004\002\ufff5\001\002\000\004\033\u028c\001\002" +
    "\000\004\033\ufff8\001\002\000\006\033\ufff9\034\u0289\001" +
    "\002\000\004\034\u0287\001\002\000\004\025\u0288\001\002" +
    "\000\006\033\ufff6\034\ufff6\001\002\000\006\025\u028b\035" +
    "\u028a\001\002\000\004\033\ufffa\001\002\000\006\033\ufff7" +
    "\034\ufff7\001\002\000\020\003\ufffb\004\ufffb\005\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufff3\001\002\000\020\003\ufffe\004" +
    "\ufffe\005\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u028e\000\016\002\005\003\003\004\014\007\010\010" +
    "\016\011\011\001\001\000\012\004\u028e\007\010\010\u028f" +
    "\011\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u0282\006\u0284\001\001\000\004" +
    "\011\u0281\001\001\000\002\001\001\000\004\004\u0280\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\040\012\036\013\030\014\027\015\022\032\042" +
    "\033\023\034\035\036\043\045\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u01dd\017\046\001\001" +
    "\000\006\022\u01e6\023\u01e4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\367\031\366" +
    "\001\001\000\006\026\u0169\027\u0168\001\001\000\006\024" +
    "\u0132\025\u0133\001\001\000\006\020\u0106\021\u0104\001\001" +
    "\000\002\001\001\000\024\007\040\013\u0209\014\027\015" +
    "\022\032\042\033\023\034\035\036\043\045\026\001\001" +
    "\000\002\001\001\000\014\015\u017c\033\u0208\034\035\036" +
    "\043\045\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\050\017" +
    "\046\001\001\000\002\001\001\000\004\017\u01f6\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\057\u01f5\065" +
    "\u01f4\001\001\000\010\047\065\050\057\051\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\u01f2\051\064\001\001" +
    "\000\004\037\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\007\105\014\112\015\022\052\106\053\117" +
    "\054\134\071\127\072\124\073\113\076\100\077\126\104" +
    "\131\105\074\106\107\112\135\113\110\114\115\134\130" +
    "\136\077\001\001\000\002\001\001\000\006\022\u01e6\023" +
    "\u01e4\001\001\000\006\074\u01b1\075\u01ae\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\050\017\046\001" +
    "\001\000\002\001\001\000\006\016\u01dd\017\046\001\001" +
    "\000\002\001\001\000\004\015\u017c\001\001\000\046\007" +
    "\105\014\112\015\022\053\352\054\134\071\127\072\124" +
    "\073\113\076\100\077\126\104\131\105\074\106\107\112" +
    "\135\113\110\114\115\134\u0178\136\u0177\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\u0169\027\u0168\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\u0132\025\u0133\001\001\000\006\057\u012f\065\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\u0106\021" +
    "\u0104\001\001\000\006\030\367\031\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\007\105\014\112\015" +
    "\022\052\152\053\117\054\134\071\127\072\124\073\113" +
    "\076\100\077\126\104\131\105\074\106\107\112\135\113" +
    "\110\114\115\130\160\131\162\132\151\134\157\135\155" +
    "\136\145\137\161\140\146\141\156\142\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\007\105\014\112\015" +
    "\022\053\352\054\134\071\127\072\124\073\113\076\100" +
    "\077\126\104\131\105\074\106\107\112\135\113\110\114" +
    "\115\131\353\132\151\134\157\135\155\136\145\137\161" +
    "\140\146\141\156\142\147\001\001\000\034\057\201\060" +
    "\173\061\177\062\206\064\171\065\203\066\167\067\172" +
    "\070\170\122\166\124\174\125\165\126\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\057\252\060\237\061\177\062" +
    "\206\064\250\065\253\066\246\067\251\070\247\122\166" +
    "\124\240\125\165\126\210\001\001\000\002\001\001\000" +
    "\004\063\301\001\001\000\002\001\001\000\010\056\227" +
    "\124\232\126\226\001\001\000\004\057\212\001\001\000" +
    "\002\001\001\000\004\057\214\001\001\000\002\001\001" +
    "\000\004\057\225\001\001\000\004\057\224\001\001\000" +
    "\004\057\223\001\001\000\002\001\001\000\004\057\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\056\227\124\232\126\226" +
    "\001\001\000\002\001\001\000\036\056\243\057\242\060" +
    "\237\061\177\062\206\064\171\065\244\066\234\067\236" +
    "\070\235\122\166\124\240\125\165\126\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\056\243\057" +
    "\252\060\237\061\177\062\206\064\250\065\253\066\246" +
    "\067\251\070\247\122\166\124\240\125\165\126\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\057\257\061\256\062\206\064\171\065\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\057\214\064\262\065\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\057\267\061\266\062\206\064\171\065\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\062\276\064\171\001\001\000\034" +
    "\057\242\060\237\061\177\062\206\064\171\065\244\066" +
    "\275\067\236\070\235\122\166\124\174\125\165\126\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\301\001\001\000\004\064\262\001\001\000\034\057\304" +
    "\060\237\061\177\062\206\064\303\065\305\066\302\067" +
    "\236\070\235\122\166\124\174\125\165\126\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\057\242\060\237\061\177\062\206\064" +
    "\171\065\244\066\312\067\236\070\235\122\166\123\314" +
    "\124\313\125\311\126\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\057\242\060\237\061\177\062\206\064\171\065\244\066" +
    "\312\067\236\070\235\122\166\123\316\124\313\125\311" +
    "\126\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\056\243\124\321\126\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\057\332\060" +
    "\331\061\177\062\206\064\171\065\335\066\326\067\330" +
    "\070\327\107\333\110\336\111\325\122\166\124\174\125" +
    "\165\126\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\057\332\060\331\061" +
    "\177\062\206\064\171\065\335\066\326\067\330\070\327" +
    "\111\340\122\166\124\174\125\165\126\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\056\361\057\242" +
    "\060\237\061\177\062\206\064\171\065\244\066\360\067" +
    "\236\070\235\122\166\124\174\125\165\126\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u0100\001\001\000" +
    "\002\001\001\000\006\056\374\070\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\056\243\070\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0102\001\001\000\002\001\001\000\004\021" +
    "\u010c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0108\001\001\000\002\001\001\000" +
    "\036\056\u010b\057\242\060\u010a\061\177\062\206\064\171" +
    "\065\244\066\312\067\236\070\235\122\166\124\174\125" +
    "\165\126\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\056\u0111\057\242\060\237\061\177\062\206\064\171" +
    "\065\244\066\u0110\067\236\070\235\122\166\124\174\125" +
    "\165\126\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\127\u0113\001\001\000\002\001\001\000\004\127" +
    "\u0115\001\001\000\002\001\001\000\036\057\u0119\060\u0118" +
    "\061\177\062\206\064\171\065\u011b\066\312\067\236\070" +
    "\235\121\u0117\122\166\124\174\125\165\126\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\115\u0121\116\u0122\117\u0123\120\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\117\u0129\120\u0128\001\001\000\002\001\001\000" +
    "\036\057\u0119\060\u0118\061\177\062\206\064\171\065\u011b" +
    "\066\312\067\236\070\235\121\u0125\122\166\124\174\125" +
    "\165\126\210\001\001\000\002\001\001\000\070\007\105" +
    "\014\112\015\022\052\152\053\117\054\134\071\127\072" +
    "\124\073\113\076\100\077\126\104\131\105\074\106\107" +
    "\112\135\113\110\114\115\130\u0127\131\162\132\151\134" +
    "\157\135\155\136\145\137\161\140\146\141\156\142\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\007\105\014\112\015\022" +
    "\052\152\053\117\054\134\071\127\072\124\073\113\076" +
    "\100\077\126\104\131\105\074\106\107\112\135\113\110" +
    "\114\115\130\u012c\131\162\132\151\134\157\135\155\136" +
    "\145\137\161\140\146\141\156\142\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\057\214\065\263\001\001\000\004\025\u013a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\056\u0137\057\242\060\237\061\177\062\206" +
    "\064\171\065\244\066\u0136\067\236\070\235\122\166\124" +
    "\174\125\165\126\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u0139\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\105\u013e\106\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\105\u0148\106\u0147\001\001\000\042\057\332" +
    "\060\331\061\177\062\206\064\171\065\335\066\326\067" +
    "\330\070\327\107\u0142\110\336\111\325\122\166\124\174" +
    "\125\165\126\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\105\u0146\106\u0145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\055\u014a\057\u0151\060\u014e\061\177\062\206\064\171" +
    "\065\u0153\066\u014b\067\u014d\070\u014c\106\u0154\122\166\124" +
    "\174\125\165\126\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\u0147\001\001\000\042\057\332\060\331\061\177" +
    "\062\206\064\171\065\335\066\326\067\330\070\327\107" +
    "\u0157\110\336\111\325\122\166\124\174\125\165\126\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\u0145\001\001\000\002\001\001\000\006\105\u015d\106\u015c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\056\u0162\057\242\060\237" +
    "\061\177\062\206\064\171\065\244\066\u0161\067\236\070" +
    "\235\122\166\124\174\125\165\126\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\u0164\001\001\000" +
    "\002\001\001\000\004\127\u0166\001\001\000\002\001\001" +
    "\000\004\027\u0173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\056\u016d\067\u016c\070\u016f" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\056" +
    "\243\067\u0170\070\377\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u0172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\127\u0175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\054\u0185\100\u0187\101" +
    "\u0183\105\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\056\u01a3\057\242\060\237\061\177\062\206\064\171\065" +
    "\244\066\u01a1\067\236\070\235\102\u01a2\122\166\124\174" +
    "\125\165\126\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\056\u0190\065\u018f\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\243\065\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\u0148\001\001\000\042\057\332\060\331\061\177\062\206" +
    "\064\171\065\335\066\326\067\330\070\327\107\u0196\110" +
    "\336\111\325\122\166\124\174\125\165\126\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\u0146\001" +
    "\001\000\004\105\u013e\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\u019d\070\u019e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\071\u01a9\072\124\073\113\103" +
    "\u01aa\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\074\u01b1" +
    "\075\u01ae\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\u01b4\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\057\u01b8\060\u01b7" +
    "\061\177\062\206\064\171\065\244\066\312\067\236\070" +
    "\235\122\166\124\174\125\165\126\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\u01ba\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\u01bd\001\001" +
    "\000\002\001\001\000\004\127\u01bf\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u01c3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\056\u01c8\057\242\060\u01c7\061\177\062\206" +
    "\064\171\065\244\066\312\067\236\070\235\122\166\124" +
    "\174\125\165\126\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\056\u01ce\057\242\060\237\061\177\062\206" +
    "\064\171\065\244\066\u01cd\067\236\070\235\122\166\124" +
    "\174\125\165\126\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\056\u01d6\067\u01d4\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\056\243\067\u0170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u01db\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\u01e0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u01ed\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\056\u01ea\065\u01e9\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01ec\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\055\u01ef\057\u0151\060\u014e\061\177" +
    "\062\206\064\171\065\u0153\066\u014b\067\u014d\070\u014c\106" +
    "\u0154\122\166\124\174\125\165\126\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u01f9\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\047\u01fb\050\057\051\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\007" +
    "\105\014\112\015\022\052\u01ff\053\117\054\134\071\127" +
    "\072\124\073\113\076\100\077\126\104\131\105\074\106" +
    "\107\112\135\113\110\114\115\001\001\000\002\001\001" +
    "\000\042\007\105\014\112\015\022\053\352\054\134\071" +
    "\127\072\124\073\113\076\100\077\126\104\131\105\074" +
    "\106\107\112\135\113\110\114\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\047\u020d\050\057\051" +
    "\064\001\001\000\002\001\001\000\004\040\u0210\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\007\105\014" +
    "\112\015\022\052\u0212\053\117\054\134\071\127\072\124" +
    "\073\113\076\100\077\126\104\131\105\074\106\107\112" +
    "\135\113\110\114\115\133\u0213\135\u0215\001\001\000\046" +
    "\007\105\014\112\015\022\053\352\054\134\071\127\072" +
    "\124\073\113\076\100\077\126\104\131\105\074\106\107" +
    "\112\135\113\110\114\115\133\u021a\135\u021b\001\001\000" +
    "\002\001\001\000\036\056\u0217\057\242\060\173\061\177" +
    "\062\206\064\171\065\244\066\312\067\236\070\235\122" +
    "\166\124\174\125\165\126\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\047\u0221\050\057\051\064\001\001\000\002" +
    "\001\001\000\004\042\u0223\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\007\105\014\112\015\022\052\u0226" +
    "\053\117\054\134\071\127\072\124\073\113\076\100\077" +
    "\126\104\131\105\074\106\107\112\135\113\110\114\115" +
    "\133\u0227\137\u0229\001\001\000\046\007\105\014\112\015" +
    "\022\053\352\054\134\071\127\072\124\073\113\076\100" +
    "\077\126\104\131\105\074\106\107\112\135\113\110\114" +
    "\115\133\u022c\137\u022d\001\001\000\002\001\001\000\036" +
    "\056\u0217\057\242\060\237\061\177\062\206\064\171\065" +
    "\244\066\167\067\236\070\235\122\166\124\174\125\165" +
    "\126\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\047\u0233\050\057\051\064\001\001\000\002" +
    "\001\001\000\004\043\u0236\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\007\105\014\112\015\022\052\u0239" +
    "\053\117\054\134\071\127\072\124\073\113\076\100\077" +
    "\126\104\131\105\074\106\107\112\135\113\110\114\115" +
    "\133\u023a\135\u023c\140\u0238\141\u023d\001\001\000\002\001" +
    "\001\000\052\007\105\014\112\015\022\053\352\054\134" +
    "\071\127\072\124\073\113\076\100\077\126\104\131\105" +
    "\074\106\107\112\135\113\110\114\115\133\u0242\135\u0244" +
    "\140\u0241\141\u0243\001\001\000\002\001\001\000\036\056" +
    "\u0217\057\242\060\173\061\177\062\206\064\171\065\244" +
    "\066\312\067\172\070\170\122\166\124\174\125\165\126" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\047\u025f\050\057\051\064\001\001\000\002\001\001\000" +
    "\010\047\u024e\050\057\051\064\001\001\000\002\001\001" +
    "\000\004\044\u0251\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\007\105\014\112\015\022\052\u0253\053\117" +
    "\054\134\071\127\072\124\073\113\076\100\077\126\104" +
    "\131\105\074\106\107\112\135\113\110\114\115\133\u0254" +
    "\141\u0256\001\001\000\046\007\105\014\112\015\022\053" +
    "\352\054\134\071\127\072\124\073\113\076\100\077\126" +
    "\104\131\105\074\106\107\112\135\113\110\114\115\133" +
    "\u025a\141\u025b\001\001\000\002\001\001\000\006\056\u0217" +
    "\070\u0258\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0262\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\007\105\014\112\015" +
    "\022\052\u0265\053\117\054\134\071\127\072\124\073\113" +
    "\076\100\077\126\104\131\105\074\106\107\112\135\113" +
    "\110\114\115\001\001\000\002\001\001\000\042\007\105" +
    "\014\112\015\022\053\352\054\134\071\127\072\124\073" +
    "\113\076\100\077\126\104\131\105\074\106\107\112\135" +
    "\113\110\114\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\047\u026a\050\057\051\064" +
    "\001\001\000\002\001\001\000\004\041\u026d\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\007\105\014\112" +
    "\015\022\052\u0270\053\117\054\134\071\127\072\124\073" +
    "\113\076\100\077\126\104\131\105\074\106\107\112\135" +
    "\113\110\114\115\133\u0271\136\u026f\001\001\000\002\001" +
    "\001\000\046\007\105\014\112\015\022\053\352\054\134" +
    "\071\127\072\124\073\113\076\100\077\126\104\131\105" +
    "\074\106\107\112\135\113\110\114\115\133\u0275\136\u0274" +
    "\001\001\000\002\001\001\000\006\056\u0217\065\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\047\u027c\050\057" +
    "\051\064\001\001\000\002\001\001\000\004\037\u027e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/*código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    */
    private ManejadorErrores manejadorErrores;
    private RESULT resultParcial;
    private ArrayList<Variable> listaParametros = new ArrayList<>();

    public Parser(Lexer lexer, RESULT resultadoLexer, ManejadorErrores manejadorErroresLex){/*nuevo constructor*/
        super(lexer);        

        manejadorErrores = manejadorErroresLex;
        resultParcial = resultadoLexer;//ya tiene el listado de comentarios y clase [que tiene 1 sola clase xD], agregados... aunque quizá halla un poco de riesgo, al establecer la clase en el lexer, nec que sea allá para que así se seteen sin tantas vueltas el campo función de las clases globales... de todos modos en un caso en el que todo está bien, el searlo en el lexer está bien, lo raro sucedería al haber errores xD
    }    

    public void report_fatal_error(String message, Object info){
        manejadorErrores.setError(new Error(resultParcial.getClase(0).getNombre(), ((info != null)?info.toString():""), -1, 
        -1, SintaxError.FATAL_ERROR));
    }

    protected int error_sync_size(){
        return 1;
    }/*para que establezca que con un token bien leido basta para recuperarse...   */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    int numeroVarsNumericas = 0;
    int numeroVarCreadas = 0;

    private void addInfoMetodo(String tipo, Object nombre){
        addInfoRestanteVariables("metodo: "+Token.parseToken(nombre).getLexema());
        resultParcial.addMetodo(new Metodo(tipo, Token.parseToken(nombre).getLexema(), listaParametros));
        listaParametros.clear();
    }

    private void addInfoVariables(String tipo, Object nombre){
        if(tipo != null){
            resultParcial.addVariable(new Variable(tipo, Token.parseToken(nombre).getLexema()));
        }else{
            resultParcial.addVariable(new Variable(Token.parseToken(nombre).getLexema()));            
        }  
        numeroVarCreadas++;      
    }

    private void addTipoNumericoVars(String tipo){
        ArrayList<Variable> variables = resultParcial.getVariables();

        for(int actual = (variables.size()-numeroVarsNumericas); actual < variables.size(); actual++){            
            variables.get(actual).setTipo(tipo);                                
        }
        numeroVarsNumericas = 0;
    }

    private void addInfoRestanteVariables(String funcion){
        ArrayList<Variable> variables = resultParcial.getVariables();

        for(int actual = (variables.size()-numeroVarCreadas); actual < variables.size(); actual++){         
            variables.get(actual).setFuncion(" ", funcion);
        }
        
        numeroVarCreadas = 0;
    }//este se invoca en las def_var de los bloques: clase y método, puesto que ahí se completa la info...

    private void addError(Token token, int linea, int columna, SintaxError error){//tipoReporte = operacion o error                
        manejadorErrores.setError(new Error(resultParcial.getClase(0).getNombre(), ((token != null)?token.getLexema():""), linea, columna, error));
        
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= imports clase 
            {
              Object RESULT =null;
		System.out.println("[S] clase con imports analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= clase 
            {
              Object RESULT =null;
		System.out.println("[S] clase analizada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // imports ::= imports iimport 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: import [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // imports ::= iimport 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: import [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // imports ::= error iimport 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: SECTION OF IMPORTS WITH ERRORS");
                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.IMPORT_SECTION_WITH_ERRORS);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // iimport ::= IIMPORT direccion_import PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: iimport");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iimport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // direccion_import ::= direccion PUNTO ASTERISCO 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: direccion_import [con *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // direccion_import ::= direccion 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: direccion_import [sin *]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // direccion_import ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: MALFORMED IMPORT");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.IMPORT_MALFORMED);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // direccion ::= direccion PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: direccion: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // direccion ::= NOMBRE PUNTO NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: direccion: PAREJA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // clase ::= visibilidad def_clase 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: CLASE [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // clase ::= def_clase 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: CLASE [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // clase ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: STRUCT OF CLASS EXPECTED: <visibilidad> CLASS <class_name> { <body> }");
                                                                             addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CLASS_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PUBLIC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PROTECTED");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: PRIVATE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // visibilidad ::= FINAL 
            {
              Object RESULT =null;
		System.out.println("[S] visibilidad: FINAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_clase ::= CLASS OBJETO LLAVE_A bloque_clase LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_clase: CB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_clase ::= CLASS OBJETO LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_clase: SB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_clase",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_clase ::= bloque_clase sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("[S] bloque clases: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque_clase ::= sentencias_clase 
            {
              Object RESULT =null;
		System.out.println("[S] bloque clases: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_clase",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias_clase ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("[S] sentencia clases: def_var");
                                                                             addInfoRestanteVariables(resultParcial.getClase(0).getNombre());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencias_clase ::= def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] sentencia clases: def_metodo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_clase",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_variable ::= visibilidad def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_variable [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_variable ::= def_tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_variable [invisi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_tipo_variable ::= INT creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [INT]");
                                                                                      addTipoNumericoVars("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // def_tipo_variable ::= DOUBLE creacion_variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [DOUBLE]");
                                                                                      addTipoNumericoVars("double");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // def_tipo_variable ::= STRING creacion_variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [STRING]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // def_tipo_variable ::= CHAR creacion_variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [CHAR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // def_tipo_variable ::= BOOLEAN creacion_variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [BOOLEAN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // def_tipo_variable ::= OBJECT creacion_variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [OBJECT]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // def_tipo_variable ::= OBJETO creacion_variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_tipoVar [OBJETO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // def_tipo_variable ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: VARIABLE CREATION EXPECTED <tipo> <list-vars>");
                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_VARIABLE_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tipo_variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacion_variable_numero ::= creacion_variable_numero COMA variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_numero: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacion_variable_numero ::= variable_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_numero: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacion_variable_numero ::= error variable_numero 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD NUMBER VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_NUMBER_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_numero ::= NOMBRE IGUAL contenido_numero 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_numero: con INI [cont_#]");
                                                                                 addInfoVariables(null, nombre);
                                                                                 numeroVarsNumericas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_numero ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_numero: con INI [cont_C]");
                                                                                 addInfoVariables(null, nombre);
                                                                                 numeroVarsNumericas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_numero ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_numero: sin INI");
                                                                                 addInfoVariables(null, nombre);
                                                                                 numeroVarsNumericas++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_numero",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacion_variable_string ::= creacion_variable_string COMA variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_string: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacion_variable_string ::= variable_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_string: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creacion_variable_string ::= error variable_string 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD STRING VAR CREATION");
                                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_STRING_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable_string ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_string: con INI [cont_V]");
                                                                                  addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable_string ::= NOMBRE IGUAL contenido_string 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_string: con INI [cont_S]");
                                                                                  addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable_string ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_string: sin INI");
                                                                                  addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_string",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // creacion_variable_char ::= creacion_variable_char COMA variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_char: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // creacion_variable_char ::= variable_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_char: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // creacion_variable_char ::= error variable_char 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD CHAR VAR CREATION");
                                                                                                    addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CHAR_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_char ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_char: con INI [cont_V]");
                                                                                   addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_char ::= NOMBRE IGUAL contenido_char 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_char: con INI [cont_C]");
                                                                                   addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_char ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_char: sin INI");
                                                                                   addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_char",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // creacion_variable_boolean ::= creacion_variable_boolean COMA variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_boolean: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // creacion_variable_boolean ::= variable_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_boolean: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // creacion_variable_boolean ::= error variable_boolean 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD BOOLEAN VAR CREATION");
                                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BOOLEAN_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_boolean",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable_boolean ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_boolean: con INI [cont_V]");
                                                                                    addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_boolean ::= NOMBRE IGUAL contenido_boolean 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_boolean: con INI [cont_B]");
                                                                                    addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_boolean ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_boolean: sin Ini");
                                                                                    addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_boolean",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // creacion_variable_object ::= creacion_variable_object COMA variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_object: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // creacion_variable_object ::= variable_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_object: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // creacion_variable_object ::= error variable_object 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD OBJECT VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJECT_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_object",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_object ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_object: con INI [cont_V]");
                                                                                     addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_object ::= NOMBRE IGUAL contenido_object 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_object: con INI [cont_Oc]");
                                                                                     addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_object ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_object: con INI [cont_O]");
                                                                                     addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_object ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_object: sin Ini");
                                                                                     addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_object",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // creacion_variable_objeto ::= creacion_variable_objeto COMA variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_objetO: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // creacion_variable_objeto ::= variable_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: creacion_var_objetO: UNICA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // creacion_variable_objeto ::= error variable_objeto 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD CUSTOM OBJECT VAR CREATION");
                                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CUSTOM_OBJECT_VAR_CREATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion_variable_objeto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_objeto ::= NOMBRE IGUAL contenido_variable 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_objetO: con INI [cont_V");
                                                                                     addInfoVariables("Objeto", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable_objeto ::= NOMBRE IGUAL contenido_objeto 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] substruct: variable_objetO: con INI [cont_O");
                                                                                     addInfoVariables("Objeto", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable_objeto ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: variable_objetO: sin Ini");
                                                                                     addInfoVariables("Objeto", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_objeto",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // def_metodo ::= visibilidad cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_metodo [visible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // def_metodo ::= cuerpo_def_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: def_metodo [invisible]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cuerpo_def_metodo ::= def_metodo_constructor 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_def_metodo: def_metodo_constructor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_def_metodo ::= def_metodo_tipo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_def_metodo: def_metodo_TIPO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_def_metodo ::= def_metodo_void 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_def_metodo: def_metodo_VOID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpo_def_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: METHOD CREATION EXPECTED constructor|method [INT, DOUBLE, STRING, BOOLEAN, CHAR|OBJECT|OBJETO|VOID]");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_METHOD_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_def_metodo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // def_metodo_constructor ::= OBJETO PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_constructor 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_constructor");
                                                                                                                              addInfoMetodo("constructor", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_constructor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpo_metodo_constructor ::= LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: no_void [cuerpo_cnstrct [CB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_constructor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpo_metodo_constructor ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: no_void [cuerpo_cnstrct [SB]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_constructor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpo_metodo_constructor ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: NO CONSTRUCTOR BODY DEFINED");
                                                                                    addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CONSTRUCTOR_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_constructor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // def_metodo_tipo ::= INT NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: INT");
                                                                                                                               addInfoMetodo("int", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // def_metodo_tipo ::= DOUBLE NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_numero 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: DOUBLE");
                                                                                                                               addInfoMetodo("double", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // def_metodo_tipo ::= STRING NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_string 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: STRING");
                                                                                                                               addInfoMetodo("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // def_metodo_tipo ::= CHAR NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_char 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: CHAR");
                                                                                                                               addInfoMetodo("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // def_metodo_tipo ::= BOOLEAN NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_boolean 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: BOOLEAN");
                                                                                                                               addInfoMetodo("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // def_metodo_tipo ::= OBJECT NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_object 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: OBJECT");
                                                                                                                               addInfoMetodo("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // def_metodo_tipo ::= OBJETO NOMBRE PARENTESIS_A parametros PARENTESIS_C cuerpo_metodo_objeto 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println("[S] substruct: def_metodo_tipo: OBJETO");
                                                                                                                               addInfoMetodo("Objeto", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_tipo",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpo_metodo_numero ::= LLAVE_A retorno_numero LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_metodo_numero ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_metodo_numero ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_# [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_metodo_numero ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF NUMBER [INT|DOUBLE] METHOD BODY");
                                                                                               addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_NUMBER_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_numero",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_metodo_string ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_metodo_string ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_metodo_string ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_string [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_metodo_string ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION STRING OF METHOD BODY");
                                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_STRING_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_string",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_metodo_char ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_metodo_char ::= LLAVE_A bloque retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_metodo_char ::= LLAVE_A retorno_char LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo_metodo_char ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION CHAR OF METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_CHAR_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_char",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo_metodo_boolean ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo_metodo_boolean ::= LLAVE_A bloque retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [CB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo_metodo_boolean ::= LLAVE_A retorno_boolean LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_char [SB, CR_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpo_metodo_boolean ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF BOOLEAN METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BOOLEAN_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpo_metodo_object ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cuerpo_metodo_object ::= LLAVE_A retorno_object LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_OC]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cuerpo_metodo_object ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cuerpo_metodo_object ::= LLAVE_A bloque retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [CB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cuerpo_metodo_object ::= LLAVE_A retorno_string LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_object [SB, CR_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cuerpo_metodo_object ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF OBJECT METHOD BODY");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJECT_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_object",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [CB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpo_metodo_objeto ::= LLAVE_A retorno_variable LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [SB, CR_var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cuerpo_metodo_objeto ::= LLAVE_A bloque retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [CB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo_metodo_objeto ::= LLAVE_A retorno_objeto LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_metodo_objeto [SB, CR_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpo_metodo_objeto ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF CUSTOM OBJECT METHOD BODY");
                                                                                    addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_OBJETO_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_objeto",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // def_metodo_void ::= VOID NOMBRE cuerpo_metodo_void 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] substruct: cuerpo_def_metodo: def_metodo_VOID");
                                                                                      addInfoMetodo("void", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_metodo_void",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cuerpo_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [CB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cuerpo_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [CB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cuerpo_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A RETURN PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [SB, CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cuerpo_metodo_void ::= PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: def_metodo_void [SB, SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cuerpo_metodo_void ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: BAD DEFINITION OF VOID METHOD BODY");
                                                                                                                             addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_VOID_BODY_DECLARATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: LISTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parametros ::= parametro 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: UNICO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parametros ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parametros: ninguno");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parametros ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: PARAM OR LIST OF THEM WITH ERRORS");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_PARAM_LIST);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parametro ::= tipo NOMBRE 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] substruct: parametro");
                                                                         listaParametros.add(new Variable(tipo,Token.parseToken(nombre).getLexema()));
                                                                         addInfoVariables(tipo, nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipo ::= INT 
            {
              String RESULT =null;
		System.out.println("[S] tipo: INT");
                                          RESULT = "int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tipo ::= DOUBLE 
            {
              String RESULT =null;
		System.out.println("[S] tipo: DOUBLE");
                                          RESULT = "double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipo ::= STRING 
            {
              String RESULT =null;
		System.out.println("[S] tipo: STRING");
                                          RESULT = "String";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipo ::= CHAR 
            {
              String RESULT =null;
		System.out.println("[S] tipo: CHAR");
                                          RESULT = "char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		System.out.println("[S] tipo: BOOLEAN");
                                          RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipo ::= OBJECT 
            {
              String RESULT =null;
		System.out.println("[S] tipo: OBJECT");
                                          RESULT = "Object";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipo ::= OBJETO 
            {
              String RESULT =null;
		int objetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objeto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] tipo: OBJETO");
                                          RESULT = Token.parseToken(objeto).getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // bloque ::= bloque sentencias 
            {
              Object RESULT =null;
		System.out.println("[S] bloque: +1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // bloque ::= sentencias 
            {
              Object RESULT =null;
		System.out.println("[S] bloque: 1 sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencias ::= def_variable 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: def_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencias ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencias ::= ciclo 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: ciclo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencias ::= invocacion 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: invocacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentencias ::= sentencia_control 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: sentencia_control");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentencias ::= operacion_unaria PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] sentencias bloque: operacion_unaria");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // asignacion ::= cuerpo_invocacion_var IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // asignacion ::= THIS PUNTO cuerpo_invocacion_var IGUAL tipos_asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: asignacion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tipos_asignacion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipos_asig: cont_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tipos_asignacion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipos_asig: cont_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tipos_asignacion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipos_asignacion ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tipos_asignacion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipos_asignacion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: cont_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipos_asignacion ::= THIS PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: THIS. invoc_var");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipos_asignacion ::= cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: invoc_met");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tipos_asignacion ::= THIS PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: tipo_asig: THIS. invoc_met");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // tipos_asignacion ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: BAD ASSIGNED CONTENT");
                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_ASSGINED_CONTENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_asignacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // contenido_variable ::= PARENTESIS_A contenido_variable PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: ( cont_var )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // contenido_variable ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_var: NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // contenido_numero ::= contenido_numero MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // contenido_numero ::= contenido_numero RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: RESTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // contenido_numero ::= contenido_numero ASTERISCO contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ASTERISCO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // contenido_numero ::= contenido_numero DIV contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: DIV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // contenido_numero ::= RESTA contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MENOS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // contenido_numero ::= PARENTESIS_A contenido_numero PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ( cont_# )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // contenido_numero ::= NUMERO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: NUMERO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // contenido_numero ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: NOMBRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_numero",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // contenido_string ::= contenido_boolean MAS cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_S [ cont_boolean + cc ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // contenido_string ::= permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_S [ permitidos ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // permitidos ::= contenido_numero MAS permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cont_# + permitidos]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // permitidos ::= contenido_char MAS permitidos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cont_C + permitidos]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // permitidos ::= cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: permitidos [cc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("permitidos",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // cualquier_contenido ::= cualquier_contenido opciones_cualquier_contenido 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cualq_cont: [cc o_cc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cualquier_contenido",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // cualquier_contenido ::= strings 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cualq_cont: [strings]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cualquier_contenido",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // opciones_cualquier_contenido ::= MAS contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // opciones_cualquier_contenido ::= MAS contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // opciones_cualquier_contenido ::= MAS contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // opciones_cualquier_contenido ::= MAS strings 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_cc: [+ strings]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_cualquier_contenido",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // strings ::= PARENTESIS_A strings PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: strings: ( strings )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // strings ::= CADENA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: strings: CADENA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // contenido_char ::= PARENTESIS_A contenido_char PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_C: ( cont_C )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // contenido_char ::= CARACTER 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_C: CARACTER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_char",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // contenido_object ::= PARENTESIS_A contenido_object PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_Oc: ( cont_Oc )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // contenido_object ::= NEW OBJECT PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_Oc: NEW Oc()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_object",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // contenido_objeto ::= PARENTESIS_A contenido_objeto PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: ( cont_O )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // contenido_objeto ::= NEW OBJETO PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_O: NEW O( argucion )");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_objeto",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // operacion_unaria ::= incremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_unaria: INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // operacion_unaria ::= autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_unaria: AUTO_INCRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // incremento ::= NOMBRE MAS MAS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ [der]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // incremento ::= NOMBRE RESTA RESTA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- [der]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // incremento ::= MAS MAS NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: ++ [izq]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // incremento ::= RESTA RESTA NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: incre: -- [izq]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // autoincremento ::= NOMBRE opciones_autoincremento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("autoincremento",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // opciones_autoincremento ::= opciones_autoIncreMas 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: +=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // opciones_autoincremento ::= RESTA IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: -=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // opciones_autoincremento ::= ASTERISCO IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: *=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // opciones_autoincremento ::= DIV IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: /=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoincremento",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // opciones_autoIncreMas ::= MAS IGUAL contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [val#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // opciones_autoIncreMas ::= MAS IGUAL contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: autoincre: += [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // opciones_autoIncreMas ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: += ONLY IS APLICABE TO STRINGs AND NUMBERs");
                                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_AUTINCREMENT_CONTENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones_autoIncreMas",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ciclo ::= ciclo_for 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ciclo ::= WHILE PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: WHILE [cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ciclo ::= WHILE PARENTESIS_A contenido_variable PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: WHILE [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_boolean PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: DO-WHILE [cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ciclo ::= DO cuerpo_estructuras WHILE PARENTESIS_A contenido_variable PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo: DO-WHILE [cont_V] ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ciclo ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: LOOP [FOR|WHILE|DO WHILE] MALFORMED");
                                                                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_LOOP_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ciclo_for ::= FOR PARENTESIS_A asignacion_for condiciones_for incremento_for PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // asignacion_for ::= asignacion_completa_for 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [completa]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // asignacion_for ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [parcial]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // asignacion_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: asignacion [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // asignacion_for ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: \"FOR\" ASSIGNATION MALFORMED");
                                                                                                 addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_ASSIGNATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // asignacion_completa_for ::= INT NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [INT]");
                                                                                                addInfoVariables("int", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // asignacion_completa_for ::= DOUBLE NOMBRE IGUAL contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [DOUBLE]");
                                                                                                addInfoVariables("double", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [STRING-CS]");
                                                                                                addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // asignacion_completa_for ::= STRING NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [STRING-CV]");
                                                                                                addInfoVariables("String", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [CHAR-CC]");
                                                                                                addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // asignacion_completa_for ::= CHAR NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [CHAR-CV]");
                                                                                                addInfoVariables("char", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [BOOLEAN-CB]");
                                                                                                addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // asignacion_completa_for ::= BOOLEAN NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [BOOLEAN-CV]");
                                                                                                addInfoVariables("boolean", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJECT-COc]");
                                                                                                addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // asignacion_completa_for ::= OBJECT NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETC-CV]");
                                                                                                addInfoVariables("Object", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO-CO]");
                                                                                                addInfoVariables("Objeto", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // asignacion_completa_for ::= OBJETO NOMBRE IGUAL contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] substruct: ciclo_for: asignacion_C [OBJETO-CV]");
                                                                                                addInfoVariables("Objeto", nombre);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_completa_for",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // condiciones_for ::= contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // condiciones_for ::= contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // condiciones_for ::= PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: condiciones [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // condiciones_for ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: \"FOR\" CONDITIONS MALFORMED");
                                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_CONDITION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_for",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // incremento_for ::= operacion_unaria 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: incremento [existente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // incremento_for ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: ciclo_for: incremento [ninguna]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // incremento_for ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: \"FOR\" INCREMENT MALFORMED");
                                                                   addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_FOR_INCREMENT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento_for",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // invocacion ::= cuerpo_invocacion_metodo PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: invocacion [tradicional]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // invocacion ::= THIS PUNTO cuerpo_invocacion_metodo PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: invocacion [this]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("invocacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // cuerpo_invocacion_var ::= NOMBRE PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [recursi var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cuerpo_invocacion_var ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO cuerpo_invocacion_var 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [recursi met]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // cuerpo_invocacion_var ::= NOMBRE 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_V [only var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // cuerpo_invocacion_var ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: INVOCATION OF VAR MALFORMED");
                                                                                                                                       addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_VAR_INVOCATION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_var",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // cuerpo_invocacion_metodo ::= NOMBRE PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [recursi var]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // cuerpo_invocacion_metodo ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C PUNTO cuerpo_invocacion_metodo 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [recursi met]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // cuerpo_invocacion_metodo ::= NOMBRE PARENTESIS_A argumentacion PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: cuerpo_invocacion_M [only metodo]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_invocacion_metodo",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // argumentacion ::= argumentos 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentacion [min 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // argumentacion ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentacion [0 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentacion",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // argumentos ::= argumentos COMA argumento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentos [+ 1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // argumentos ::= argumento 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumentos [1 argu]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // argumentos ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: EXPECTED 1 OR ARGUMENTS LIST");
                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.ARGUMENTS_SECTION_WITH_ERRORS);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // argumento ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // argumento ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // argumento ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // argumento ::= contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // argumento ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // argumento ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: argumento [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // sentencia_control ::= sentencia_if 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // sentencia_control ::= sentencia_if ELSE cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: IF-ELSE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // sentencia_control ::= sentencia_switch 
            {
              Object RESULT =null;
		System.out.println("[S] estructura: SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // sentencia_if ::= IF PARENTESIS_A contenido_boolean PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_if [cont_B]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // sentencia_if ::= IF PARENTESIS_A contenido_variable PARENTESIS_C cuerpo_estructuras 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_if [cont_V]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // contenido_boolean ::= negaciones PARENTESIS_A contenido_boolean PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [! ( MC ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // contenido_boolean ::= PARENTESIS_A contenido_boolean PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [( MC )]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // contenido_boolean ::= contenido_boolean OPERADOR_LOGICO contenido_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [ cont_boolean OL cont_boolean]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // contenido_boolean ::= condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_boolean [condicion]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_boolean",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // condicion ::= contenido_condicion OPERADOR_RELACIONAL opcion_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [contCondi OR op_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // condicion ::= contenido_bool OPERADOR_RELACIONAL opcion_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [cont_bool OR op_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // condicion ::= contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: condicion [cont_bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // opcion_condicion ::= contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_condicion [cont_bool]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_condicion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // opcion_condicion ::= contenido_condicion 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: op_condicion [cont_condi]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion_condicion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // contenido_condicion ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [con_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // contenido_condicion ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // contenido_condicion ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // contenido_condicion ::= contenido_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_Oc]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // contenido_condicion ::= contenido_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_condi [cont_O]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_condicion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // contenido_bool ::= PARENTESIS_A contenido_bool PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ( cont_bool ) ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // contenido_bool ::= negaciones contenido_bool 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ! cont_bool ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // contenido_bool ::= negaciones contenido_variable 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ ! cont_var ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // contenido_bool ::= BOOLEANO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_bool [ BOOLEANO ]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_bool",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // negaciones ::= negaciones NO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: negaciones [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // negaciones ::= NO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: negaciones [UNICA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negaciones",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // sentencia_switch ::= SWITCH PARENTESIS_A contenido_switch PARENTESIS_C LLAVE_A cuerpo_switch LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: sentencia_switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // cuerpo_switch ::= casos_normales caso_default 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_switch [CN + posible CD]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // cuerpo_switch ::= caso_default 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_switch [posible CD o nada]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // cuerpo_switch ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: SWITCH's BODY MALDORMED");
                                                                              addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_SWITCHs_BODY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_switch",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // casos_normales ::= casos_normales caso 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: casos_normales [LISTA]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // casos_normales ::= caso 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: casos_normales [UNICO]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos_normales",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // caso ::= CASE contenido_switch DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso (CB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // caso ::= CASE contenido_switch DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso (SB)");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // caso_default ::= DEFAULT DOS_PUNTOS bloque_general 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [existente (CB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // caso_default ::= DEFAULT DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [existente (SB)]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // caso_default ::= 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: caso_default [ausente]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso_default",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // contenido_switch ::= contenido_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_S]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // contenido_switch ::= contenido_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_#]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // contenido_switch ::= contenido_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: contenido_switch [cont_C]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // contenido_switch ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] error: A SWITCH MUST RECEIVED A STRING|NUMBER|CHAR TYPE TO EVALUATE");
                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_TYPE_TO_EVALUATE_ON_SWITCH);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_switch",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // cuerpo_estructuras ::= LLAVE_A bloque_general LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_estructuras [CB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // cuerpo_estructuras ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cuerpo_estructuras [SB]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // cuerpo_estructuras ::= error LLAVE_C 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("[S] error: LOOP OR CONTROL STATEMENT BODY WITH ERRORS");
                                                                                     addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_BODY_STRUCT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructuras",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // bloque_general ::= bloque retorno 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [CR [comp o parada]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // bloque_general ::= bloque 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [SR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // bloque_general ::= retorno 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: bloque_general [SB y CR]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_general",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // retorno ::= retorno_compuesto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno [compuesto]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // retorno ::= parada PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno [parada [simple]]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // retorno_compuesto ::= retorno_numero 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // retorno_compuesto ::= retorno_string 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // retorno_compuesto ::= retorno_char 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // retorno_compuesto ::= retorno_boolean 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // retorno_compuesto ::= retorno_object 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // retorno_compuesto ::= retorno_objeto 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_compuesto: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_compuesto",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // retorno_variable ::= RETURN contenido_variable PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_V");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_variable",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // retorno_numero ::= RETURN contenido_numero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_numero",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // retorno_string ::= RETURN contenido_string PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_string",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // retorno_char ::= RETURN contenido_char PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_C");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_char",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // retorno_boolean ::= RETURN contenido_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_boolean",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // retorno_object ::= RETURN contenido_object PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_Oc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_object",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // retorno_objeto ::= RETURN contenido_objeto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: retorno_O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_objeto",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // parada ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parada [RETURN]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // parada ::= BREAK 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: parada [BREAK]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parada",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
