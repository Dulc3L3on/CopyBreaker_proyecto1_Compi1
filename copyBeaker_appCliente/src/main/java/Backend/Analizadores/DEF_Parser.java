
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import Backend.Objetos.Token;
import Backend.Manejadores.ManejadorErrores;
import Backend.Objetos.Error;
import Backend.Objetos.Enums.SintaxError;
import Backend.Analizadores.DEF_ParserSym.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class DEF_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return DEF_ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public DEF_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public DEF_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DEF_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\002\000\002\003\005\000\002\003\005" +
    "\000\002\005\005\000\002\005\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\013\005\000\002" +
    "\013\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\004\000\002\006\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\010\005\000\002\010\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\003\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\014\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\006\000\002" +
    "\016\010\000\002\017\003\000\002\017\006\000\002\017" +
    "\010\000\002\017\010\000\002\020\003\000\002\020\006" +
    "\000\002\020\010\000\002\020\010\000\002\020\010\000" +
    "\002\021\003\000\002\021\006\000\002\021\010\000\002" +
    "\022\012\000\002\004\006\000\002\004\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\012\002\ufffe\004\004\005\006\040\011\001" +
    "\002\000\004\040\142\001\002\000\004\002\000\001\002" +
    "\000\004\040\130\001\002\000\004\002\125\001\002\000" +
    "\004\002\uffff\001\002\000\004\021\012\001\002\000\016" +
    "\006\024\030\022\034\023\036\015\037\013\040\016\001" +
    "\002\000\006\023\uffe8\027\uffe8\001\002\000\020\023\uffec" +
    "\026\uffec\027\uffec\030\uffec\032\uffec\033\uffec\035\uffec\001" +
    "\002\000\020\023\uffee\026\uffee\027\uffee\030\uffee\032\uffee" +
    "\033\uffee\035\uffee\001\002\000\020\023\uffed\026\uffed\027" +
    "\uffed\030\uffed\032\uffed\033\uffed\035\uffed\001\002\000\006" +
    "\023\uffe7\027\uffe7\001\002\000\006\023\uffea\027\120\001" +
    "\002\000\014\023\115\027\114\030\051\032\055\033\053" +
    "\001\002\000\014\006\044\030\022\034\023\036\015\040" +
    "\016\001\002\000\014\006\044\030\022\034\023\036\015" +
    "\040\016\001\002\000\004\024\027\001\002\000\004\023" +
    "\026\001\002\000\004\002\uffcc\001\002\000\014\007\041" +
    "\010\030\012\032\015\033\017\035\001\002\000\010\023" +
    "\uffdd\025\104\027\uffdd\001\002\000\006\023\uffe3\027\uffe3" +
    "\001\002\000\010\023\uffd6\025\075\027\uffd6\001\002\000" +
    "\010\023\uffda\025\067\027\uffda\001\002\000\006\023\uffde" +
    "\027\uffde\001\002\000\010\023\uffd1\025\042\027\uffd1\001" +
    "\002\000\006\023\uffe1\027\uffe1\001\002\000\006\023\uffe0" +
    "\027\uffe0\001\002\000\006\023\uffdf\027\uffdf\001\002\000" +
    "\006\023\uffe2\027\uffe2\001\002\000\014\006\044\030\022" +
    "\034\023\036\015\040\016\001\002\000\014\026\064\027" +
    "\052\030\051\032\055\033\053\001\002\000\004\024\045" +
    "\001\002\000\004\015\046\001\002\000\004\025\047\001" +
    "\002\000\014\006\044\030\022\034\023\036\015\040\016" +
    "\001\002\000\014\026\054\027\052\030\051\032\055\033" +
    "\053\001\002\000\014\006\044\030\022\034\023\036\015" +
    "\040\016\001\002\000\014\006\044\030\022\034\023\036" +
    "\015\040\016\001\002\000\014\006\044\030\022\034\023" +
    "\036\015\040\016\001\002\000\004\024\057\001\002\000" +
    "\014\006\044\030\022\034\023\036\015\040\016\001\002" +
    "\000\020\023\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2\033" +
    "\ufff2\035\ufff2\001\002\000\004\016\060\001\002\000\020" +
    "\023\uffce\026\uffce\027\uffce\030\uffce\032\uffce\033\uffce\035" +
    "\uffce\001\002\000\020\023\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\032\ufff1\033\ufff1\035\ufff1\001\002\000\020\023\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\032\055\033\053\035\ufff4\001\002" +
    "\000\020\023\ufff3\026\ufff3\027\ufff3\030\ufff3\032\055\033" +
    "\053\035\ufff3\001\002\000\010\023\uffd0\024\065\027\uffd0" +
    "\001\002\000\004\020\066\001\002\000\006\023\uffcf\027" +
    "\uffcf\001\002\000\014\006\044\030\022\034\023\036\015" +
    "\040\016\001\002\000\014\026\071\027\052\030\051\032" +
    "\055\033\053\001\002\000\010\023\uffd9\024\072\027\uffd9" +
    "\001\002\000\010\011\073\013\074\016\060\001\002\000" +
    "\006\023\uffd7\027\uffd7\001\002\000\006\023\uffd8\027\uffd8" +
    "\001\002\000\014\006\044\030\022\034\023\036\015\040" +
    "\016\001\002\000\014\026\077\027\052\030\051\032\055" +
    "\033\053\001\002\000\010\023\uffd5\024\100\027\uffd5\001" +
    "\002\000\010\011\102\013\103\014\101\001\002\000\006" +
    "\023\uffd2\027\uffd2\001\002\000\006\023\uffd3\027\uffd3\001" +
    "\002\000\006\023\uffd4\027\uffd4\001\002\000\014\006\044" +
    "\030\022\034\023\036\015\040\016\001\002\000\014\026" +
    "\106\027\052\030\051\032\055\033\053\001\002\000\010" +
    "\023\uffdc\024\107\027\uffdc\001\002\000\004\011\110\001" +
    "\002\000\006\023\uffdb\027\uffdb\001\002\000\014\027\052" +
    "\030\051\032\055\033\053\035\112\001\002\000\020\023" +
    "\uffef\026\uffef\027\uffef\030\uffef\032\uffef\033\uffef\035\uffef" +
    "\001\002\000\020\023\ufff0\026\ufff0\027\ufff0\030\ufff0\032" +
    "\ufff0\033\ufff0\035\ufff0\001\002\000\016\006\024\030\022" +
    "\034\023\036\015\037\013\040\016\001\002\000\004\002" +
    "\uffcd\001\002\000\014\023\ufff4\027\ufff4\030\ufff4\032\055" +
    "\033\053\001\002\000\004\023\uffeb\001\002\000\016\006" +
    "\024\030\022\034\023\036\015\037\122\040\016\001\002" +
    "\000\006\023\uffe9\027\uffe9\001\002\000\006\023\uffe5\027" +
    "\uffe5\001\002\000\006\023\uffe4\027\uffe4\001\002\000\014" +
    "\023\uffe6\027\uffe6\030\051\032\055\033\053\001\002\000" +
    "\004\002\001\001\002\000\006\022\136\023\ufff7\001\002" +
    "\000\004\023\135\001\002\000\010\021\131\022\ufff5\023" +
    "\ufff5\001\002\000\016\006\024\030\022\034\023\036\015" +
    "\037\013\040\132\001\002\000\014\023\ufff8\027\uffed\030" +
    "\uffed\032\uffed\033\uffed\001\002\000\012\027\114\030\051" +
    "\032\055\033\053\001\002\000\004\023\ufff9\001\002\000" +
    "\004\002\ufffc\001\002\000\004\040\137\001\002\000\006" +
    "\022\ufff6\023\ufff6\001\002\000\004\023\145\001\002\000" +
    "\006\022\136\023\ufffa\001\002\000\010\021\143\022\ufff5" +
    "\023\ufff5\001\002\000\014\006\044\030\022\034\023\036" +
    "\015\040\016\001\002\000\014\023\ufffb\027\052\030\051" +
    "\032\055\033\053\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\010\002\006\003\004\004\007\001\001\000" +
    "\006\005\137\013\140\001\001\000\002\001\001\000\006" +
    "\007\126\013\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\020\010\024\011\017" +
    "\014\016\022\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\120\001\001\000\002\001\001\000\006\006" +
    "\112\022\013\001\001\000\006\006\110\022\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\030\016\035\017\036\020\037\021\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\042\022\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\047\022\013\001\001\000\002\001\001\000\006" +
    "\006\062\022\013\001\001\000\006\006\061\022\013\001" +
    "\001\000\006\006\060\022\013\001\001\000\002\001\001" +
    "\000\006\006\055\022\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\067\022\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\075\022\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\104\022\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\115\010\116\011\017\014\016\022\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\123\014\122\022\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\132\010\133\011\017\014\016\022\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\143\022\013\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DEF_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DEF_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DEF_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/*código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    */
    private ManejadorErrores manejadorErrores;        

    public DEF_Parser(DEF_Lexer lexer, ManejadorErrores manejadorErroresLex){/*nuevo constructor*/
        super(lexer);        

        manejadorErrores = manejadorErroresLex;        
    }    

    public void report_fatal_error(String message, Object info){
        manejadorErrores.setError(new Error(((info != null)?info.toString():""), "", 
        "", SintaxError.FATAL_ERROR));
    }

    protected int error_sync_size(){
        return 1;
    }/*para que establezca que con un token bien leido basta para recuperarse...   */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$DEF_Parser$actions {

//Métodos que NO pueden ser accedidos desde el exterior, puesto que forman parte de una clase interna




    private void addError(Token token, int linea, int columna, SintaxError error){//tipoReporte = operacion o error                
        manejadorErrores.setError((new Error(((token != null)?token.getLexema():""), String.valueOf(linea), String.valueOf(columna), error)));
        
    }

  private final DEF_Parser parser;

  /** Constructor */
  CUP$DEF_Parser$actions(DEF_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$DEF_Parser$do_action_part00000000(
    int                        CUP$DEF_Parser$act_num,
    java_cup.runtime.lr_parser CUP$DEF_Parser$parser,
    java.util.Stack            CUP$DEF_Parser$stack,
    int                        CUP$DEF_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DEF_Parser$result;

      /* select the action based on the action number */
      switch (CUP$DEF_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)).value;
		RESULT = start_val;
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DEF_Parser$parser.done_parsing();
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= declaracion_variables 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= asignacion 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_variables ::= INTEGER creacion_var_numero PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",1, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_variables ::= STRING creacion_var_string PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",1, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // creacion_var_numero ::= VARIABLE IGUAL valor_numerico 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("creacion_var_numero",3, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // creacion_var_numero ::= lista_variables 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("creacion_var_numero",3, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // creacion_var_string ::= VARIABLE IGUAL valor_string 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("creacion_var_string",5, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // creacion_var_string ::= VARIABLE IGUAL VARIABLE 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("creacion_var_string",5, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // creacion_var_string ::= lista_variables 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("creacion_var_string",5, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_variables ::= lista_variables COMA VARIABLE 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("lista_variables",9, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_variables ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("lista_variables",9, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valor_numerico ::= valor_numerico MAS valor_numerico 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MAS");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor_numerico ::= valor_numerico RESTA valor_numerico 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: RESTA");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor_numerico ::= valor_numerico POR valor_numerico 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ASTERISCO");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor_numerico ::= valor_numerico DIV valor_numerico 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: DIV");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor_numerico ::= RESTA valor_numerico 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: MENOS");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor_numerico ::= PARENTESIS_A valor_numerico PARENTESIS_C 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ( cont_# )");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor_numerico ::= ENTERO 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: ENTERO");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor_numerico ::= VARIABLE 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: VARIABLE");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor_numerico ::= result_integer 
            {
              Object RESULT =null;
		System.out.println("[S] substruct: cont_#: RESULT [integer]");
              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",4, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor_string ::= valor_numerico MAS valor_string 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_string",6, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor_string ::= concat 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_string",6, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // concat ::= concat opciones_concat 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("concat",7, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // concat ::= CADENA 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("concat",7, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // concat ::= result_string 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("concat",7, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opciones_concat ::= MAS valor_numerico 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("opciones_concat",8, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opciones_concat ::= MAS CADENA 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("opciones_concat",8, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opciones_concat ::= MAS result_string 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("opciones_concat",8, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // result_string ::= RESULT PUNTO valor_result 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_string",10, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor_result ::= SCORE 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",11, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor_result ::= result_clases 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",11, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor_result ::= result_metodos 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",11, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor_result ::= result_variables 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",11, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor_result ::= result_comentarios 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",11, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // result_clases ::= CLASES 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_clases",12, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // result_clases ::= CLASES CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_clases",12, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // result_clases ::= CLASES CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_clases",12, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // result_metodos ::= METODOS 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",13, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // result_metodos ::= METODOS CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",13, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // result_metodos ::= METODOS CORCHETE_A valor_numerico CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",13, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // result_metodos ::= METODOS CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",13, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // result_variables ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",14, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // result_variables ::= VARIABLES CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",14, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // result_variables ::= VARIABLES CORCHETE_A valor_numerico CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",14, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // result_variables ::= VARIABLES CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",14, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // result_variables ::= VARIABLES CORCHETE_A valor_numerico CORCHETE_C PUNTO FUNCION 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",14, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // result_comentarios ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_comentarios",15, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // result_comentarios ::= COMENTARIOS CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_comentarios",15, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // result_comentarios ::= COMENTARIOS CORCHETE_A valor_numerico CORCHETE_C PUNTO TEXTO 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_comentarios",15, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // result_integer ::= RESULT PUNTO METODOS CORCHETE_A valor_numerico CORCHETE_C PUNTO PARAMETROS 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("result_integer",16, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= VARIABLE IGUAL valor_numerico PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion ::= VARIABLE IGUAL valor_string PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$DEF_Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.elementAt(CUP$DEF_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$DEF_Parser$stack.peek()), RESULT);
            }
          return CUP$DEF_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$DEF_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$DEF_Parser$do_action(
    int                        CUP$DEF_Parser$act_num,
    java_cup.runtime.lr_parser CUP$DEF_Parser$parser,
    java.util.Stack            CUP$DEF_Parser$stack,
    int                        CUP$DEF_Parser$top)
    throws java.lang.Exception
    {
              return CUP$DEF_Parser$do_action_part00000000(
                               CUP$DEF_Parser$act_num,
                               CUP$DEF_Parser$parser,
                               CUP$DEF_Parser$stack,
                               CUP$DEF_Parser$top);
    }
}

}
