
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Backend.Objetos.Resultados.RESULT;
import Backend.Objetos.Resultados.Metodo;
import Backend.Objetos.Resultados.Variable;
import Backend.Objetos.Token;
import Backend.Manejadores.ManejadorErrores;
import Backend.Objetos.Error;
import Backend.Objetos.Enums.SintaxError;
import Backend.Analizadores.JSON_ParserSym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSON_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JSON_ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public JSON_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSON_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSON_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\013\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\004\000\002" +
    "\006\004\000\002\006\003\000\002\007\004\000\002\010" +
    "\006\000\002\010\003\000\002\011\005\000\002\011\003" +
    "\000\002\011\004\000\002\012\007\000\002\013\004\000" +
    "\002\014\006\000\002\014\003\000\002\015\005\000\002" +
    "\015\003\000\002\015\004\000\002\016\011\000\002\017" +
    "\005\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\004\000" +
    "\002\022\006\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\024\011\000\002\025" +
    "\005\000\002\025\005\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\004\000" +
    "\002\030\006\000\002\030\003\000\002\031\005\000\002" +
    "\031\003\000\002\031\004\000\002\032\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\003\004\022\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\165\001\002\000\016\003\020" +
    "\004\023\005\011\006\013\007\015\010\017\001\002\000" +
    "\004\021\154\001\002\000\006\021\ufff9\023\ufff9\001\002" +
    "\000\006\003\134\020\136\001\002\000\004\023\133\001" +
    "\002\000\006\003\102\020\103\001\002\000\006\021\ufffc" +
    "\023\ufffc\001\002\000\006\003\051\020\052\001\002\000" +
    "\006\021\ufffa\023\ufffa\001\002\000\006\003\031\020\032" +
    "\001\002\000\006\021\ufff7\023\ufffd\001\002\000\006\021" +
    "\ufffb\023\ufffb\001\002\000\006\021\ufff8\023\ufff8\001\002" +
    "\000\006\003\024\020\026\001\002\000\006\021\ufff4\023" +
    "\ufff4\001\002\000\006\021\ufff6\023\ufff6\001\002\000\004" +
    "\017\027\001\002\000\006\021\ufff5\023\ufff5\001\002\000" +
    "\006\021\uffd2\023\uffd2\001\002\000\006\021\uffd0\023\uffd0" +
    "\001\002\000\004\024\033\001\002\000\006\003\035\022" +
    "\037\001\002\000\006\021\045\025\046\001\002\000\004" +
    "\022\037\001\002\000\006\021\uffce\025\uffce\001\002\000" +
    "\004\015\040\001\002\000\004\020\041\001\002\000\004" +
    "\017\042\001\002\000\004\023\043\001\002\000\006\021" +
    "\uffcc\025\uffcc\001\002\000\006\021\uffcd\025\uffcd\001\002" +
    "\000\004\022\037\001\002\000\006\021\uffd1\023\uffd1\001" +
    "\002\000\006\021\uffcf\025\uffcf\001\002\000\006\021\uffdf" +
    "\023\uffdf\001\002\000\006\021\uffdd\023\uffdd\001\002\000" +
    "\004\024\053\001\002\000\006\003\055\022\057\001\002" +
    "\000\006\021\077\025\100\001\002\000\006\021\uffda\025" +
    "\uffda\001\002\000\006\021\uffdb\025\uffdb\001\002\000\012" +
    "\003\061\011\064\012\065\014\063\001\002\000\004\021" +
    "\072\001\002\000\010\020\uffd3\021\uffd6\023\uffd6\001\002" +
    "\000\004\020\070\001\002\000\004\020\066\001\002\000" +
    "\004\020\uffd5\001\002\000\004\020\uffd4\001\002\000\004" +
    "\016\067\001\002\000\006\021\uffd7\023\uffd7\001\002\000" +
    "\004\017\071\001\002\000\006\021\uffd8\023\uffd8\001\002" +
    "\000\012\003\061\011\064\012\065\014\063\001\002\000" +
    "\004\021\074\001\002\000\012\003\061\011\064\012\065" +
    "\014\063\001\002\000\004\023\076\001\002\000\006\021" +
    "\uffd9\025\uffd9\001\002\000\004\022\057\001\002\000\006" +
    "\021\uffde\023\uffde\001\002\000\006\021\uffdc\025\uffdc\001" +
    "\002\000\006\021\uffea\023\uffea\001\002\000\004\024\105" +
    "\001\002\000\006\021\uffec\023\uffec\001\002\000\006\003" +
    "\107\022\111\001\002\000\006\021\130\025\131\001\002" +
    "\000\004\022\111\001\002\000\006\021\uffe8\025\uffe8\001" +
    "\002\000\012\003\112\011\115\012\116\013\113\001\002" +
    "\000\010\020\uffe0\021\uffe4\023\uffe4\001\002\000\004\020" +
    "\uffe1\001\002\000\004\021\122\001\002\000\004\020\uffe3" +
    "\001\002\000\004\020\uffe2\001\002\000\004\020\120\001" +
    "\002\000\004\017\121\001\002\000\006\021\uffe5\023\uffe5" +
    "\001\002\000\012\003\112\011\115\012\116\013\113\001" +
    "\002\000\004\021\124\001\002\000\012\003\112\011\115" +
    "\012\116\013\113\001\002\000\004\023\126\001\002\000" +
    "\006\021\uffe6\025\uffe6\001\002\000\006\021\uffe7\025\uffe7" +
    "\001\002\000\004\022\111\001\002\000\006\021\uffeb\023" +
    "\uffeb\001\002\000\006\021\uffe9\025\uffe9\001\002\000\004" +
    "\002\000\001\002\000\006\021\ufff1\023\ufff1\001\002\000" +
    "\006\021\ufff3\023\ufff3\001\002\000\004\024\137\001\002" +
    "\000\006\003\141\022\143\001\002\000\006\021\151\025" +
    "\152\001\002\000\004\022\143\001\002\000\006\021\uffef" +
    "\025\uffef\001\002\000\004\011\144\001\002\000\004\020" +
    "\145\001\002\000\004\017\146\001\002\000\004\023\147" +
    "\001\002\000\006\021\uffed\025\uffed\001\002\000\006\021" +
    "\uffee\025\uffee\001\002\000\004\022\143\001\002\000\006" +
    "\021\ufff2\023\ufff2\001\002\000\006\021\ufff0\025\ufff0\001" +
    "\002\000\016\003\156\004\023\005\011\006\013\007\015" +
    "\010\017\001\002\000\004\021\157\001\002\000\006\021" +
    "\ufff7\023\ufff7\001\002\000\016\003\156\004\023\005\011" +
    "\006\013\007\015\010\017\001\002\000\004\021\161\001" +
    "\002\000\016\003\156\004\023\005\011\006\013\007\015" +
    "\010\017\001\002\000\004\021\163\001\002\000\016\003" +
    "\156\004\023\005\011\006\013\007\015\010\017\001\002" +
    "\000\004\023\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\011\004\006\005\013\007\020" +
    "\013\015\021\007\027\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\134\001\001\000\002\001\001" +
    "\000\004\014\103\001\001\000\002\001\001\000\004\022" +
    "\047\001\001\000\002\001\001\000\004\030\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\033\032\035" +
    "\001\001\000\002\001\001\000\004\032\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\053\024\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\057\026" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\072\026\061\001\001\000" +
    "\002\001\001\000\006\025\074\026\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\105\016\107\001" +
    "\001\000\002\001\001\000\004\016\126\001\001\000\002" +
    "\001\001\000\006\017\113\020\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\122\020\116\001\001\000\002" +
    "\001\001\000\006\017\124\020\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\137\012\141\001\001\000\002\001\001\000" +
    "\004\012\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\154\005" +
    "\013\007\020\013\015\021\007\027\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\157\005\013\007" +
    "\020\013\015\021\007\027\021\001\001\000\002\001\001" +
    "\000\016\004\161\005\013\007\020\013\015\021\007\027" +
    "\021\001\001\000\002\001\001\000\016\004\163\005\013" +
    "\007\020\013\015\021\007\027\021\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSON_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSON_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSON_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//puede ser accedido desde el exterior
    private ManejadorErrores manejadorErrores;
    private RESULT result = new RESULT();

    public JSON_Parser(Lexer lexer, RESULT resultadoLexer, ManejadorErrores lexerManejadorErrores){/*nuevo constructor*/
        super(lexer);        

        manejadorErrores = lexerManejadorErrores;
        result = resultadoLexer;//ya tiene el listado de comentarios y clase [que tiene 1 sola clase xD], agregados... aunque quizá halla un poco de riesgo, al establecer la clase en el lexer, nec que sea allá para que así se seteen sin tantas vueltas el campo función de las clases globales... de todos modos en un caso en el que todo está bien, el searlo en el lexer está bien, lo raro sucedería al haber errores xD
    }   
    
    public void report_fatal_error(String message, Object info){
        manejadorErrores.setError(new Error(((info != null)?info.toString():""), -1, 
        -1, SintaxError.FATAL_ERROR));
    }

    protected int error_sync_size(){
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSON_Parser$actions {

//código no puede ser accedido desde el exterior


    private void addError(Token token, int linea, int columna, SintaxError error){//tipoReporte = operacion o error        
        if(token == null){//quiere decir que no existe el T que se esperaba
            manejadorErrores.setError(new Error("", linea, columna, SintaxError.PARSER_EXPECTED, "concatExpected()"));
        }else{
            manejadorErrores.setError(new Error(Token.parseToken(token).getLexema(), linea, columna, error));
        }                    
    }

  private final JSON_Parser parser;

  /** Constructor */
  CUP$JSON_Parser$actions(JSON_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSON_Parser$do_action_part00000000(
    int                        CUP$JSON_Parser$act_num,
    java_cup.runtime.lr_parser CUP$JSON_Parser$parser,
    java.util.Stack            CUP$JSON_Parser$stack,
    int                        CUP$JSON_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSON_Parser$result;

      /* select the action based on the action number */
      switch (CUP$JSON_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= estructura EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		RESULT = start_val;
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSON_Parser$parser.done_parsing();
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // estructura ::= LLAVE_A bloques LLAVE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // estructura ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_GENERAL_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloques ::= seccion COMA seccion COMA seccion COMA seccion COMA seccion 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("bloques",1, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-8)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloques ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_SECTION_LIST_DEFINITION);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("bloques",1, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seccion ::= seccion_score 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seccion ::= seccion_clases 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seccion ::= seccion_variables 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccion ::= seccion_metodos 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccion ::= seccion_comentarios 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // seccion ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_EXPECTED_SECTION_NAME);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccion_score ::= SCORE cuerpo_seccion_score 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_score",3, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_seccion_score ::= DOS_PUNTOS CADENA 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_score",4, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_seccion_score ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_SCORE_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_score",4, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccion_clases ::= CLASES cuerpo_seccion_clases 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_clases",5, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo_seccion_clases ::= DOS_PUNTOS CORCHETE_A objetos_clase CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_clases",6, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo_seccion_clases ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_CLASS_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_clases",6, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // objetos_clase ::= objetos_clase COMA objeto_clase 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_clase",7, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // objetos_clase ::= objeto_clase 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_clase",7, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // objetos_clase ::= error objeto_clase 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_CLASS_LIST);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_clase",7, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // objeto_clase ::= LLAVE_A NOMBRE DOS_PUNTOS CADENA LLAVE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objeto_clase",8, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // seccion_variables ::= VARIABLES cuerpo_seccion_variables 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_variables",9, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_seccion_variables ::= DOS_PUNTOS CORCHETE_A objetos_variable CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_variables",10, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpo_seccion_variables ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_VARIABLE_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_variables",10, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // objetos_variable ::= objetos_variable COMA objeto_variable 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_variable",11, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // objetos_variable ::= objeto_variable 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_variable",11, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // objetos_variable ::= error objeto_variable 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_VARIABLE_LIST);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_variable",11, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // objeto_variable ::= LLAVE_A atributos_variable COMA atributos_variable COMA atributos_variable LLAVE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objeto_variable",12, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atributos_variable ::= tipo_atributo_variable DOS_PUNTOS CADENA 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_variable",13, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atributos_variable ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_VARIABLE_ATRIBUTE_CONTENT_DECLARATION_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_variable",13, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_atributo_variable ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("tipo_atributo_variable",14, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_atributo_variable ::= TIPO 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("tipo_atributo_variable",14, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_atributo_variable ::= FUNCION 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("tipo_atributo_variable",14, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_atributo_variable ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_VARIABLE_ATRIBUTTE_TYPE);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("tipo_atributo_variable",14, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seccion_metodos ::= METODOS cuerpo_seccion_metodos 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_metodos",15, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_seccion_metodos ::= DOS_PUNTOS CORCHETE_A objetos_metodo CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_metodos",16, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_seccion_metodos ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_METHOD_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_metodos",16, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // objetos_metodo ::= objetos_metodo COMA objeto_metodo 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_metodo",17, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // objetos_metodo ::= objeto_metodo 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_metodo",17, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // objetos_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_METHOD_LIST);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_metodo",17, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // objeto_metodo ::= LLAVE_A atributos_metodo COMA atributos_metodo COMA atributos_metodo LLAVE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objeto_metodo",18, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atributos_metodo ::= atributo_string_metodo DOS_PUNTOS CADENA 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_metodo",19, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atributos_metodo ::= PARAMETROS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_metodo",19, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributos_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_METHOD_ATRIBUTE_CONTENT_DECLARATION_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_metodo",19, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributo_string_metodo ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributo_string_metodo",20, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atributo_string_metodo ::= TIPO 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributo_string_metodo",20, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atributo_string_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_STRING_METHOD_ATRIBUTTE_TYPE);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributo_string_metodo",20, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // seccion_comentarios ::= COMENTARIOS cuerpo_seccion_comentarios 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_comentarios",21, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo_seccion_comentarios ::= DOS_PUNTOS CORCHETE_A objetos_comentario CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_comentarios",22, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo_seccion_comentarios ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_COMMENT_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_comentarios",22, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // objetos_comentario ::= objetos_comentario COMA objeto_comentario 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_comentario",23, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // objetos_comentario ::= objeto_comentario 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_comentario",23, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // objetos_comentario ::= error objeto_comentario 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_COMMENTS_LIST);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_comentario",23, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // objeto_comentario ::= LLAVE_A TEXTO DOS_PUNTOS CADENA LLAVE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objeto_comentario",24, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSON_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSON_Parser$do_action(
    int                        CUP$JSON_Parser$act_num,
    java_cup.runtime.lr_parser CUP$JSON_Parser$parser,
    java.util.Stack            CUP$JSON_Parser$stack,
    int                        CUP$JSON_Parser$top)
    throws java.lang.Exception
    {
              return CUP$JSON_Parser$do_action_part00000000(
                               CUP$JSON_Parser$act_num,
                               CUP$JSON_Parser$parser,
                               CUP$JSON_Parser$stack,
                               CUP$JSON_Parser$top);
    }
}

}
