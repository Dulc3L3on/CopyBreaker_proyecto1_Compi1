
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Backend.Objetos.Resultados.RESULT;
import Backend.Objetos.Resultados.Metodo;
import Backend.Objetos.Resultados.Variable;
import Backend.Objetos.Resultados.Clase;
import Backend.Objetos.Resultados.Comentario;
import Backend.Objetos.Token;
import Backend.Manejadores.ManejadorErrores;
import Backend.Objetos.Error;
import Backend.Objetos.Enums.SintaxError;
import Backend.Analizadores.JSON_ParserSym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSON_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JSON_ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public JSON_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSON_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSON_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\013\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\004\000\002\006\004\000\002" +
    "\006\003\000\002\007\004\000\002\010\006\000\002\010" +
    "\005\000\002\010\003\000\002\011\005\000\002\011\003" +
    "\000\002\011\004\000\002\012\007\000\002\013\004\000" +
    "\002\014\006\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\015\004\000\002\016" +
    "\011\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\020\004\000\002\021\006\000" +
    "\002\021\005\000\002\021\003\000\002\022\005\000\002" +
    "\022\003\000\002\022\003\000\002\023\011\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\004\000\002\026\006\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\027\004\000\002\030\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\003\004\022\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\174\001\002\000\016\003\017" +
    "\004\021\005\011\006\013\007\015\010\020\001\002\000" +
    "\004\021\164\001\002\000\006\021\ufffa\023\ufffa\001\002" +
    "\000\006\003\143\020\145\001\002\000\004\023\142\001" +
    "\002\000\006\003\105\020\106\001\002\000\006\021\ufffd" +
    "\023\ufffd\001\002\000\006\003\052\020\053\001\002\000" +
    "\006\021\ufffb\023\ufffb\001\002\000\006\021\ufff8\023\ufff8" +
    "\001\002\000\006\003\031\020\032\001\002\000\006\003" +
    "\024\020\025\001\002\000\006\021\ufff9\023\ufff9\001\002" +
    "\000\006\021\ufffc\023\ufffc\001\002\000\006\021\ufff5\023" +
    "\ufff5\001\002\000\004\017\027\001\002\000\006\021\ufff7" +
    "\023\ufff7\001\002\000\006\021\ufff6\023\ufff6\001\002\000" +
    "\006\021\uffd4\023\uffd4\001\002\000\006\021\uffd1\023\uffd1" +
    "\001\002\000\004\024\033\001\002\000\010\003\035\022" +
    "\040\025\037\001\002\000\006\021\046\025\047\001\002" +
    "\000\004\022\040\001\002\000\006\021\uffcf\025\uffcf\001" +
    "\002\000\006\021\uffd2\023\uffd2\001\002\000\004\015\041" +
    "\001\002\000\004\020\042\001\002\000\004\017\043\001" +
    "\002\000\004\023\044\001\002\000\006\021\uffcd\025\uffcd" +
    "\001\002\000\006\021\uffce\025\uffce\001\002\000\004\022" +
    "\040\001\002\000\006\021\uffd3\023\uffd3\001\002\000\006" +
    "\021\uffd0\025\uffd0\001\002\000\006\021\uffe0\023\uffe0\001" +
    "\002\000\006\021\uffdd\023\uffdd\001\002\000\004\024\054" +
    "\001\002\000\010\003\056\022\061\025\057\001\002\000" +
    "\006\021\102\025\103\001\002\000\006\021\uffda\025\uffda" +
    "\001\002\000\006\021\uffde\023\uffde\001\002\000\006\021" +
    "\uffdb\025\uffdb\001\002\000\012\003\063\011\065\012\066" +
    "\014\064\001\002\000\004\021\075\001\002\000\006\021" +
    "\uffd5\023\uffd5\001\002\000\004\020\073\001\002\000\004" +
    "\020\071\001\002\000\004\020\067\001\002\000\004\017" +
    "\070\001\002\000\006\021\uffd8\023\uffd8\001\002\000\004" +
    "\017\072\001\002\000\006\021\uffd7\023\uffd7\001\002\000" +
    "\004\016\074\001\002\000\006\021\uffd6\023\uffd6\001\002" +
    "\000\012\003\063\011\065\012\066\014\064\001\002\000" +
    "\004\021\077\001\002\000\012\003\063\011\065\012\066" +
    "\014\064\001\002\000\004\023\101\001\002\000\006\021" +
    "\uffd9\025\uffd9\001\002\000\004\022\061\001\002\000\006" +
    "\021\uffdf\023\uffdf\001\002\000\006\021\uffdc\025\uffdc\001" +
    "\002\000\006\021\uffe9\023\uffe9\001\002\000\004\024\110" +
    "\001\002\000\006\021\uffec\023\uffec\001\002\000\010\003" +
    "\112\022\115\025\113\001\002\000\006\021\137\025\140" +
    "\001\002\000\004\022\115\001\002\000\006\021\uffea\023" +
    "\uffea\001\002\000\006\021\uffe7\025\uffe7\001\002\000\012" +
    "\003\116\011\121\012\122\013\117\001\002\000\006\021" +
    "\uffe1\023\uffe1\001\002\000\004\020\134\001\002\000\004" +
    "\021\127\001\002\000\004\020\125\001\002\000\004\020" +
    "\123\001\002\000\004\017\124\001\002\000\006\021\uffe4" +
    "\023\uffe4\001\002\000\004\017\126\001\002\000\006\021" +
    "\uffe3\023\uffe3\001\002\000\012\003\116\011\121\012\122" +
    "\013\117\001\002\000\004\021\131\001\002\000\012\003" +
    "\116\011\121\012\122\013\117\001\002\000\004\023\133" +
    "\001\002\000\006\021\uffe5\025\uffe5\001\002\000\004\017" +
    "\135\001\002\000\006\021\uffe2\023\uffe2\001\002\000\006" +
    "\021\uffe6\025\uffe6\001\002\000\004\022\115\001\002\000" +
    "\006\021\uffeb\023\uffeb\001\002\000\006\021\uffe8\025\uffe8" +
    "\001\002\000\004\002\000\001\002\000\006\021\ufff1\023" +
    "\ufff1\001\002\000\006\021\ufff4\023\ufff4\001\002\000\004" +
    "\024\146\001\002\000\010\003\150\022\153\025\151\001" +
    "\002\000\006\021\161\025\162\001\002\000\004\022\153" +
    "\001\002\000\006\021\ufff2\023\ufff2\001\002\000\006\021" +
    "\uffef\025\uffef\001\002\000\004\011\154\001\002\000\004" +
    "\020\155\001\002\000\004\017\156\001\002\000\004\023" +
    "\157\001\002\000\006\021\uffed\025\uffed\001\002\000\006" +
    "\021\uffee\025\uffee\001\002\000\004\022\153\001\002\000" +
    "\006\021\ufff3\023\ufff3\001\002\000\006\021\ufff0\025\ufff0" +
    "\001\002\000\016\003\017\004\021\005\011\006\013\007" +
    "\015\010\020\001\002\000\004\021\166\001\002\000\016" +
    "\003\017\004\021\005\011\006\013\007\015\010\020\001" +
    "\002\000\004\021\170\001\002\000\016\003\017\004\021" +
    "\005\011\006\013\007\015\010\020\001\002\000\004\021" +
    "\172\001\002\000\016\003\017\004\021\005\011\006\013" +
    "\007\015\010\020\001\002\000\004\023\ufffe\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\011\004\006\005\013\007\022" +
    "\013\015\020\007\025\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\143\001\001\000\002\001\001" +
    "\000\004\014\106\001\001\000\002\001\001\000\004\021" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\027\001\001\000\004\006\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\033\030\035" +
    "\001\001\000\002\001\001\000\004\030\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\054\023\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\075\001\001\000\002\001\001\000\004" +
    "\024\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\110\016\113\001\001\000\002\001\001\000\004" +
    "\016\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\127\001\001\000\002\001\001\000" +
    "\004\017\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\146\012\151\001\001\000\002" +
    "\001\001\000\004\012\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\164\005\013\007\022\013\015\020" +
    "\007\025\021\001\001\000\002\001\001\000\016\004\166" +
    "\005\013\007\022\013\015\020\007\025\021\001\001\000" +
    "\002\001\001\000\016\004\170\005\013\007\022\013\015" +
    "\020\007\025\021\001\001\000\002\001\001\000\016\004" +
    "\172\005\013\007\022\013\015\020\007\025\021\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSON_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSON_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSON_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//puede ser accedido desde el exterior
    private ManejadorErrores manejadorErrores;
    private RESULT result;

    public JSON_Parser(Lexer_JSON lexer, ManejadorErrores lexerManejadorErrores){/*nuevo constructor*/
        super(lexer);        

        manejadorErrores = lexerManejadorErrores;
        result = new RESULT();//ya tiene el listado de comentarios y clase [que tiene 1 sola clase xD], agregados... aunque quizá halla un poco de riesgo, al establecer la clase en el lexer, nec que sea allá para que así se seteen sin tantas vueltas el campo función de las clases globales... de todos modos en un caso en el que todo está bien, el searlo en el lexer está bien, lo raro sucedería al haber errores xD
    }   
    
    public void report_fatal_error(String message, Object info){
        manejadorErrores.setError(new Error(((info != null)?info.toString():""), "", 
        "", SintaxError.FATAL_ERROR));
    }

    public RESULT getRESULT(){
        return result;        
    }

    protected int error_sync_size(){
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSON_Parser$actions {

//código no puede ser accedido desde el exterior
    private String nombre = null, tipo = null, funcion = null;
    private int numeroParametros = -1;

    //esto es para verificar/completar errores, en el caso de los últimos dos es para verificar si hay una o más secciones definidas... lo primero es por si acaso los atributos esperados para los objetos var/método no se recibieron como se esperaba...
    private int lineaObjeto = 0, columnaObjeto = 0;//esto es para los errores de atrib de variable y método
    private int[] lineaSeccionAnterior = new int[] {0,0,0,0,0};//esto es para especificar en el msje de error la línea de la sección que ya se había definido para que se de cta más rápido de su error...
    private int[] numeroSeccionesDefinidas = new int[]{0,0,0,0,0};
    private String[] secciones = new String[]{"score", "clases", "variables", "metodos", "comentarios"};
    private int lineaDeSeccion = 0, columnaDeSeccion = 0;

    private void setInfoSeccionActual(int linea, int columna, int tipoSeccion){//0-> score, 1-> clase, 2-> variable, 3-> método, 4-> comentario
        lineaDeSeccion = linea;
        columnaDeSeccion = columna;

        if(numeroSeccionesDefinidas[tipoSeccion] > 0){
            manejadorErrores.setError(new Error(secciones[tipoSeccion]+" #"+ numeroSeccionesDefinidas[tipoSeccion], String.valueOf(lineaDeSeccion), 
                String.valueOf(columnaDeSeccion), SintaxError.JSON_SECTION_DEFINED_PREVIOUSLY, String.valueOf(lineaSeccionAnterior[tipoSeccion])));//ya se había  definido una sección previa en la línea + laLinea xD            
        }
        
        lineaSeccionAnterior[tipoSeccion] = lineaDeSeccion;
        numeroSeccionesDefinidas[tipoSeccion]++;
    }

    private void setScore(String score){        
        result.setScore(score);            
    }

    //estos métodos pueden setear de una vez el objeto, puesto que las RP tiene deri por la izq, el primer objeto que se reduce es el primero, puesto que es la última deri en hacer xD, no como en el caso contrario de la deri por la derecha...
    private void crearObjetoClase(String nombre){        
        result.addClase(new Clase(nombre));        
    }

    private void crearObjetoComentario(String texto){        
        result.addComentario(new Comentario(texto));        
    }

    //Estos no requieren tener parámetros, puesto que se va a revisar lo que se almacenó en las var, lo cual además de reunir info, tb será útil para desplegar error, en caso lo que se esperaba nunca se recibió...
    private void crearObjetoVariable(){        
        if(nombre != null && tipo != null && funcion != null){//pongo el != null, puesto que podrían repetir atribs por error, por lo tanto alguno de estos podrían tener aún el valor de "esperando asignación (null)"
            result.addVariable(new Variable(tipo, nombre, funcion));
        }else{
            manejadorErrores.setError(new Error(("Variable #" + (result.getNumeroVariables()+1)), String.valueOf(lineaObjeto),
                String.valueOf(columnaObjeto), SintaxError.JSON_BAD_LIST_OF_VARIABLE_ATRIBS));
        }       
        
        nombre = tipo = funcion = null;     
    }

    private void crearObjetoMetodo(){
        if(nombre != null && tipo != null && (numeroParametros != -1)){
            result.addMetodo(new Metodo(tipo, nombre, numeroParametros));
        }else{
            manejadorErrores.setError(new Error("Método #" + (result.getNumeroMetodos()+1), String.valueOf(lineaObjeto), 
                String.valueOf(columnaObjeto), SintaxError.JSON_BAD_LIST_OF_METHOD_ATRIBS));//puesto que este objeto tuvo que haber sido el obj #tamAnt +1 en el listado, pero como tenía errores...
        }

        nombre = tipo = null;
        numeroParametros = -1;
    }

    private void addError(Token token, int linea, int columna, SintaxError error){//tipoReporte = operacion o error                
        manejadorErrores.setError(new Error(((token != null)?token.getLexema():""), String.valueOf(linea), String.valueOf(columna), error));        
    }

  private final JSON_Parser parser;

  /** Constructor */
  CUP$JSON_Parser$actions(JSON_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSON_Parser$do_action_part00000000(
    int                        CUP$JSON_Parser$act_num,
    java_cup.runtime.lr_parser CUP$JSON_Parser$parser,
    java.util.Stack            CUP$JSON_Parser$stack,
    int                        CUP$JSON_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSON_Parser$result;

      /* select the action based on the action number */
      switch (CUP$JSON_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= estructura EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		RESULT = start_val;
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSON_Parser$parser.done_parsing();
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // estructura ::= LLAVE_A bloques LLAVE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // estructura ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_GENERAL_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloques ::= seccion COMA seccion COMA seccion COMA seccion COMA seccion 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("bloques",1, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-8)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seccion ::= seccion_score 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seccion ::= seccion_clases 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seccion ::= seccion_variables 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seccion ::= seccion_metodos 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccion ::= seccion_comentarios 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccion ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_EXPECTED_SECTION_NAME);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion",2, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // seccion_score ::= SCORE cuerpo_seccion_score 
            {
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object score = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		setInfoSeccionActual(scoreleft, scoreright, 0);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_score",3, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_seccion_score ::= DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object score = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		setScore(Token.parseToken(score).getLexema());
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_score",4, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_seccion_score ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_SCORE_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_score",4, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // seccion_clases ::= CLASES cuerpo_seccion_clases 
            {
              Object RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		setInfoSeccionActual(claseleft, claseright, 1);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_clases",5, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo_seccion_clases ::= DOS_PUNTOS CORCHETE_A objetos_clase CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_clases",6, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo_seccion_clases ::= DOS_PUNTOS CORCHETE_A CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_clases",6, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo_seccion_clases ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_CLASS_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_clases",6, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // objetos_clase ::= objetos_clase COMA objeto_clase 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_clase",7, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // objetos_clase ::= objeto_clase 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_clase",7, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // objetos_clase ::= error objeto_clase 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_CLASS_LIST);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_clase",7, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // objeto_clase ::= LLAVE_A NOMBRE DOS_PUNTOS CADENA LLAVE_C 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		crearObjetoClase(Token.parseToken(nombre).getLexema());
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objeto_clase",8, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // seccion_variables ::= VARIABLES cuerpo_seccion_variables 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		setInfoSeccionActual(variableleft, variableright, 2);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_variables",9, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_seccion_variables ::= DOS_PUNTOS CORCHETE_A objetos_variable CORCHETE_C 
            {
              Object RESULT =null;
		int aperturaleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)).left;
		int aperturaright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)).right;
		Object apertura = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)).value;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_variables",10, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpo_seccion_variables ::= DOS_PUNTOS CORCHETE_A CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_variables",10, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpo_seccion_variables ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_VARIABLE_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_variables",10, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // objetos_variable ::= objetos_variable COMA objeto_variable 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_variable",11, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // objetos_variable ::= objeto_variable 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_variable",11, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // objetos_variable ::= error objeto_variable 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_VARIABLE_LIST);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_variable",11, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // objeto_variable ::= LLAVE_A atributos_variable COMA atributos_variable COMA atributos_variable LLAVE_C 
            {
              Object RESULT =null;
		int aperturaleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)).left;
		int aperturaright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)).right;
		Object apertura = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)).value;
		lineaObjeto = aperturaleft; columnaObjeto = aperturaright;
                                                                                                                                          crearObjetoVariable();
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objeto_variable",12, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atributos_variable ::= TIPO DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		tipo = Token.parseToken(tipo).getLexema();
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_variable",13, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atributos_variable ::= NOMBRE DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		nombre = Token.parseToken(nombre).getLexema();
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_variable",13, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atributos_variable ::= FUNCION DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		funcion = Token.parseToken(funcion).getLexema();
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_variable",13, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atributos_variable ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_VARIABLE_ATRIBUTE_CONTENT_DECLARATION_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_variable",13, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // seccion_metodos ::= METODOS cuerpo_seccion_metodos 
            {
              Object RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object metodo = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		setInfoSeccionActual(metodoleft, metodoright, 3);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_metodos",14, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cuerpo_seccion_metodos ::= DOS_PUNTOS CORCHETE_A objetos_metodo CORCHETE_C 
            {
              Object RESULT =null;
		int aperturaleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)).left;
		int aperturaright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)).right;
		Object apertura = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)).value;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_metodos",15, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_seccion_metodos ::= DOS_PUNTOS CORCHETE_A CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_metodos",15, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_seccion_metodos ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_METHOD_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_metodos",15, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // objetos_metodo ::= objetos_metodo COMA objeto_metodo 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_metodo",16, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // objetos_metodo ::= objeto_metodo 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_metodo",16, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // objetos_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_METHOD_LIST);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_metodo",16, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // objeto_metodo ::= LLAVE_A atributos_metodo COMA atributos_metodo COMA atributos_metodo LLAVE_C 
            {
              Object RESULT =null;
		int aperturaleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)).left;
		int aperturaright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)).right;
		Object apertura = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)).value;
		lineaObjeto = aperturaleft; columnaObjeto = aperturaright;
                                                                                                                                    crearObjetoMetodo();
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objeto_metodo",17, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atributos_metodo ::= TIPO DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		tipo = Token.parseToken(tipo).getLexema();
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_metodo",18, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atributos_metodo ::= NOMBRE DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		nombre = Token.parseToken(nombre).getLexema();
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_metodo",18, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributos_metodo ::= PARAMETROS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		numeroParametros = Integer.parseInt(Token.parseToken(numero).getLexema());
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_metodo",18, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributos_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_METHOD_ATRIBUTE_CONTENT_DECLARATION_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("atributos_metodo",18, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // seccion_comentarios ::= COMENTARIOS cuerpo_seccion_comentarios 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object comentario = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		setInfoSeccionActual(comentarioleft, comentarioright, 4);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("seccion_comentarios",19, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo_seccion_comentarios ::= DOS_PUNTOS CORCHETE_A objetos_comentario CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_comentarios",20, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpo_seccion_comentarios ::= DOS_PUNTOS CORCHETE_A CORCHETE_C 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_comentarios",20, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo_seccion_comentarios ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_COMMENT_SECTION_CONTENT_STRUCT);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_seccion_comentarios",20, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // objetos_comentario ::= objetos_comentario COMA objeto_comentario 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_comentario",21, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // objetos_comentario ::= objeto_comentario 
            {
              Object RESULT =null;

              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_comentario",21, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // objetos_comentario ::= error objeto_comentario 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		addError(Token.parseToken(err), errleft, errright, SintaxError.JSON_BAD_COMMENTS_LIST);
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objetos_comentario",21, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // objeto_comentario ::= LLAVE_A TEXTO DOS_PUNTOS CADENA LLAVE_C 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-1)).value;
		int cierreleft = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).left;
		int cierreright = ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()).right;
		Object cierre = (Object)((java_cup.runtime.Symbol) CUP$JSON_Parser$stack.peek()).value;
		crearObjetoComentario(Token.parseToken(texto).getLexema());
              CUP$JSON_Parser$result = parser.getSymbolFactory().newSymbol("objeto_comentario",22, ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.elementAt(CUP$JSON_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$JSON_Parser$stack.peek()), RESULT);
            }
          return CUP$JSON_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSON_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSON_Parser$do_action(
    int                        CUP$JSON_Parser$act_num,
    java_cup.runtime.lr_parser CUP$JSON_Parser$parser,
    java.util.Stack            CUP$JSON_Parser$stack,
    int                        CUP$JSON_Parser$top)
    throws java.lang.Exception
    {
              return CUP$JSON_Parser$do_action_part00000000(
                               CUP$JSON_Parser$act_num,
                               CUP$JSON_Parser$parser,
                               CUP$JSON_Parser$stack,
                               CUP$JSON_Parser$top);
    }
}

}
