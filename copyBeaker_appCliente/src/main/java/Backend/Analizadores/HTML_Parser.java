
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import Backend.Objetos.Token;
import Backend.Manejadores.ManejadorErrores;
import Backend.Objetos.Error;
import Backend.Objetos.Enums.SintaxError;
import Backend.Analizadores.HTML_ParserSym.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HTML_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return HTML_ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public HTML_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HTML_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HTML_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\003" +
    "\000\002\010\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\003\000\002\012\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\003\000\002\014\004" +
    "\000\002\015\012\000\002\015\003\000\002\016\004\000" +
    "\002\016\004\000\002\016\003\000\002\033\005\000\002" +
    "\033\003\000\002\017\004\000\002\022\012\000\002\022" +
    "\003\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\003\000\002\021\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\003" +
    "\000\002\024\004\000\002\025\012\000\002\025\003\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\003\000\002\027\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\003\000\002\031\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\040\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\042\003\000\002" +
    "\042\004\000\002\043\005\000\002\043\007\000\002\043" +
    "\003\000\002\044\003\000\002\044\004\000\002\045\005" +
    "\000\002\045\007\000\002\045\007\000\002\045\003\000" +
    "\002\046\003\000\002\046\004\000\002\047\005\000\002" +
    "\047\007\000\002\047\007\000\002\047\007\000\002\047" +
    "\003\000\002\050\003\000\002\050\004\000\002\051\005" +
    "\000\002\051\007\000\002\051\003\000\002\036\004\000" +
    "\002\037\011\000\002\037\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\053\003\000\002\053" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\006\003\004\004\006\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\327\001\002\000\024\003\024" +
    "\005\011\006\026\010\014\012\027\022\020\024\016\026" +
    "\021\035\017\001\002\000\052\003\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\035\ufff4\001\002\000\052\003" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\035\ufff5" +
    "\001\002\000\004\002\uffff\001\002\000\024\003\ufffb\005" +
    "\ufffb\006\ufffb\010\ufffb\012\ufffb\022\ufffb\024\ufffb\026\ufffb" +
    "\035\ufffb\001\002\000\036\003\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\017\ufff7\021\ufff7\022\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\035\ufff7\001\002\000\024\003" +
    "\024\006\026\010\014\011\322\012\027\022\020\024\016" +
    "\026\021\035\017\001\002\000\036\003\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\017\ufff9\021\ufff9" +
    "\022\ufff9\024\ufff9\025\ufff9\026\ufff9\035\ufff9\001\002\000" +
    "\006\003\303\051\304\001\002\000\052\003\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\035\uffdb\001\002\000" +
    "\036\003\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\017\ufff6\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\035\ufff6\001\002\000\010\003\222\033\224\036\225" +
    "\001\002\000\024\003\024\005\215\006\026\010\014\012" +
    "\027\022\020\024\016\026\021\035\017\001\002\000\024" +
    "\003\ufffa\005\ufffa\006\ufffa\010\ufffa\012\ufffa\022\ufffa\024" +
    "\ufffa\026\ufffa\035\ufffa\001\002\000\052\003\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\035\ufff3\001\002\000" +
    "\036\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\017\ufff8\021\ufff8\022\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\035\ufff8\001\002\000\024\003\024\006\026\007\211" +
    "\010\014\012\027\022\020\024\016\026\021\035\017\001" +
    "\002\000\026\003\024\006\026\010\014\012\027\013\033" +
    "\014\037\022\036\024\031\026\021\035\017\001\002\000" +
    "\026\003\024\006\026\010\014\012\027\013\033\014\037" +
    "\022\036\024\031\026\021\035\017\001\002\000\006\003" +
    "\157\051\160\001\002\000\026\003\024\006\026\010\014" +
    "\012\027\013\033\014\037\022\036\024\031\026\021\035" +
    "\017\001\002\000\052\003\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\035\uffe3\001\002\000\052\003\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\035\uffea\001\002" +
    "\000\026\003\024\006\026\010\014\012\027\013\033\014" +
    "\037\022\036\024\031\026\021\035\017\001\002\000\026" +
    "\003\024\006\026\010\014\012\027\013\033\014\037\022" +
    "\036\024\031\026\021\035\017\001\002\000\030\003\024" +
    "\006\026\010\014\012\027\015\053\016\047\020\044\022" +
    "\052\024\046\026\021\035\017\001\002\000\026\003\024" +
    "\006\026\010\014\012\027\013\033\014\037\022\036\024" +
    "\031\026\021\035\017\001\002\000\026\003\024\006\026" +
    "\010\014\012\027\013\033\014\037\022\036\024\031\026" +
    "\021\035\017\001\002\000\052\003\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\035\uffe5\001\002\000\052\003" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\035\uffe8" +
    "\001\002\000\024\003\024\006\026\010\014\012\027\021" +
    "\150\022\020\024\016\026\021\035\017\001\002\000\030" +
    "\003\024\006\026\010\014\012\027\015\053\016\047\020" +
    "\044\022\052\024\046\026\021\035\017\001\002\000\006" +
    "\003\075\051\076\001\002\000\024\003\024\006\026\010" +
    "\014\012\027\017\071\022\020\024\016\026\021\035\017" +
    "\001\002\000\030\003\024\006\026\010\014\012\027\015" +
    "\053\016\047\020\044\022\052\024\046\026\021\035\017" +
    "\001\002\000\030\003\024\006\026\010\014\012\027\015" +
    "\053\016\047\020\044\022\052\024\046\026\021\035\017" +
    "\001\002\000\030\003\024\006\026\010\014\012\027\015" +
    "\053\016\047\020\044\022\052\024\046\026\021\035\017" +
    "\001\002\000\030\003\uffc8\006\uffc8\010\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\035\uffc8" +
    "\001\002\000\030\003\024\006\026\010\014\012\027\015" +
    "\053\016\047\020\044\022\052\024\046\026\021\035\017" +
    "\001\002\000\030\003\024\006\026\010\014\012\027\015" +
    "\053\016\047\020\044\022\052\024\046\026\021\035\017" +
    "\001\002\000\030\003\uffd0\006\uffd0\010\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\035\uffd0" +
    "\001\002\000\030\003\024\006\026\010\014\012\027\015" +
    "\053\016\047\020\044\022\052\024\046\026\021\035\017" +
    "\001\002\000\030\003\uffcb\006\uffcb\010\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\035\uffcb" +
    "\001\002\000\030\003\uffce\006\uffce\010\uffce\012\uffce\013" +
    "\uffce\014\uffce\022\uffce\023\uffce\024\uffce\026\uffce\035\uffce" +
    "\001\002\000\030\003\uffca\006\uffca\010\uffca\012\uffca\013" +
    "\uffca\014\uffca\022\uffca\023\uffca\024\uffca\026\uffca\035\uffca" +
    "\001\002\000\030\003\uffcd\006\uffcd\010\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\035\uffcd" +
    "\001\002\000\030\003\uffcc\006\uffcc\010\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\035\uffcc" +
    "\001\002\000\030\003\uffc9\006\uffc9\010\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\035\uffc9" +
    "\001\002\000\024\003\024\006\026\010\014\012\027\017" +
    "\071\022\020\024\016\026\021\035\017\001\002\000\032" +
    "\003\uffbc\006\uffbc\010\uffbc\012\uffbc\015\uffbc\016\uffbc\020" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\035\uffbc\001\002" +
    "\000\024\003\024\006\026\010\014\012\027\017\071\022" +
    "\020\024\016\026\021\035\017\001\002\000\032\003\uffb9" +
    "\006\uffb9\010\uffb9\012\uffb9\015\uffb9\016\uffb9\020\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\026\uffb9\035\uffb9\001\002\000\032" +
    "\003\uffba\006\uffba\010\uffba\012\uffba\015\uffba\016\uffba\020" +
    "\uffba\022\uffba\023\uffba\024\uffba\026\uffba\035\uffba\001\002" +
    "\000\032\003\uffbb\006\uffbb\010\uffbb\012\uffbb\015\uffbb\016" +
    "\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb\035\uffbb" +
    "\001\002\000\032\003\uffc7\006\uffc7\010\uffc7\012\uffc7\015" +
    "\uffc7\016\uffc7\020\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7" +
    "\035\uffc7\001\002\000\032\003\uffc5\006\uffc5\010\uffc5\012" +
    "\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\026\uffc5\035\uffc5\001\002\000\004\053\077\001\002\000" +
    "\004\033\100\001\002\000\004\052\101\001\002\000\004" +
    "\053\102\001\002\000\006\033\104\036\105\001\002\000" +
    "\006\025\uff8b\031\uff8b\001\002\000\006\025\uff8a\031\uff8a" +
    "\001\002\000\006\003\131\032\130\001\002\000\004\025" +
    "\107\001\002\000\030\003\024\006\026\010\014\012\027" +
    "\016\047\020\044\022\114\023\111\024\046\026\021\035" +
    "\017\001\002\000\030\003\024\006\026\010\014\012\027" +
    "\016\047\020\044\022\114\023\111\024\046\026\021\035" +
    "\017\001\002\000\032\003\uffbd\006\uffbd\010\uffbd\012\uffbd" +
    "\015\uffbd\016\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd\026" +
    "\uffbd\035\uffbd\001\002\000\030\003\024\006\026\010\014" +
    "\012\027\016\047\020\044\022\114\023\111\024\046\026" +
    "\021\035\017\001\002\000\030\003\024\006\026\010\014" +
    "\012\027\016\047\020\044\022\114\023\111\024\046\026" +
    "\021\035\017\001\002\000\030\003\024\006\026\010\014" +
    "\012\027\016\047\020\044\022\114\023\111\024\046\026" +
    "\021\035\017\001\002\000\032\003\uffc6\006\uffc6\010\uffc6" +
    "\012\uffc6\015\uffc6\016\uffc6\020\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\026\uffc6\035\uffc6\001\002\000\030\003\024\006\026" +
    "\010\014\012\027\016\047\020\044\022\114\023\111\024" +
    "\046\026\021\035\017\001\002\000\030\003\024\006\026" +
    "\010\014\012\027\016\047\020\044\022\114\023\111\024" +
    "\046\026\021\035\017\001\002\000\030\003\024\006\026" +
    "\010\014\012\027\016\047\020\044\022\114\023\111\024" +
    "\046\026\021\035\017\001\002\000\032\003\uffbe\006\uffbe" +
    "\010\uffbe\012\uffbe\015\uffbe\016\uffbe\020\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\026\uffbe\035\uffbe\001\002\000\032\003\uffc3" +
    "\006\uffc3\010\uffc3\012\uffc3\015\uffc3\016\uffc3\020\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\026\uffc3\035\uffc3\001\002\000\032" +
    "\003\uffc0\006\uffc0\010\uffc0\012\uffc0\015\uffc0\016\uffc0\020" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\035\uffc0\001\002" +
    "\000\032\003\uffc2\006\uffc2\010\uffc2\012\uffc2\015\uffc2\016" +
    "\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\035\uffc2" +
    "\001\002\000\032\003\uffc1\006\uffc1\010\uffc1\012\uffc1\015" +
    "\uffc1\016\uffc1\020\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1" +
    "\035\uffc1\001\002\000\032\003\uffbf\006\uffbf\010\uffbf\012" +
    "\uffbf\015\uffbf\016\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\026\uffbf\035\uffbf\001\002\000\032\003\uffc4\006\uffc4\010" +
    "\uffc4\012\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\026\uffc4\035\uffc4\001\002\000\004\045\133\001" +
    "\002\000\010\025\uff8f\027\uff8f\031\uff8f\001\002\000\010" +
    "\025\uff91\027\uff91\031\uff91\001\002\000\004\030\134\001" +
    "\002\000\012\003\136\033\104\034\140\036\105\001\002" +
    "\000\004\031\141\001\002\000\004\031\uff8c\001\002\000" +
    "\004\031\uff8d\001\002\000\004\031\uff8e\001\002\000\004" +
    "\032\142\001\002\000\004\046\143\001\002\000\010\025" +
    "\uff90\027\uff90\031\uff90\001\002\000\030\003\uffcf\006\uffcf" +
    "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\026\uffcf\035\uffcf\001\002\000\024\003\024\006\026" +
    "\010\014\012\027\021\150\022\020\024\016\026\021\035" +
    "\017\001\002\000\032\003\uffb8\006\uffb8\010\uffb8\012\uffb8" +
    "\015\uffb8\016\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\026" +
    "\uffb8\035\uffb8\001\002\000\024\003\024\006\026\010\014" +
    "\012\027\021\150\022\020\024\016\026\021\035\017\001" +
    "\002\000\032\003\uffb5\006\uffb5\010\uffb5\012\uffb5\015\uffb5" +
    "\016\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\035" +
    "\uffb5\001\002\000\032\003\uffb6\006\uffb6\010\uffb6\012\uffb6" +
    "\015\uffb6\016\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\026" +
    "\uffb6\035\uffb6\001\002\000\032\003\uffb7\006\uffb7\010\uffb7" +
    "\012\uffb7\015\uffb7\016\uffb7\020\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\026\uffb7\035\uffb7\001\002\000\052\003\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\035\uffe7\001\002\000" +
    "\052\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\035\uffe6\001\002\000\052\003\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\035\uffe4\001\002\000\030\003\uffda" +
    "\006\uffda\010\uffda\012\uffda\013\uffda\014\uffda\022\uffda\023" +
    "\uffda\024\uffda\026\uffda\035\uffda\001\002\000\030\003\uffd8" +
    "\006\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\026\uffd8\035\uffd8\001\002\000\004\053\161" +
    "\001\002\000\004\033\162\001\002\000\004\052\163\001" +
    "\002\000\004\053\164\001\002\000\006\033\104\036\105" +
    "\001\002\000\004\025\166\001\002\000\026\003\024\006" +
    "\026\010\014\012\027\014\037\022\174\023\171\024\031" +
    "\026\021\035\017\001\002\000\026\003\024\006\026\010" +
    "\014\012\027\014\037\022\174\023\171\024\031\026\021" +
    "\035\017\001\002\000\030\003\uffd9\006\uffd9\010\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9" +
    "\035\uffd9\001\002\000\030\003\uffd1\006\uffd1\010\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1" +
    "\035\uffd1\001\002\000\026\003\024\006\026\010\014\012" +
    "\027\014\037\022\174\023\171\024\031\026\021\035\017" +
    "\001\002\000\026\003\024\006\026\010\014\012\027\014" +
    "\037\022\174\023\171\024\031\026\021\035\017\001\002" +
    "\000\026\003\024\006\026\010\014\012\027\014\037\022" +
    "\174\023\171\024\031\026\021\035\017\001\002\000\026" +
    "\003\024\006\026\010\014\012\027\014\037\022\174\023" +
    "\171\024\031\026\021\035\017\001\002\000\026\003\024" +
    "\006\026\010\014\012\027\014\037\022\174\023\171\024" +
    "\031\026\021\035\017\001\002\000\030\003\uffd3\006\uffd3" +
    "\010\uffd3\012\uffd3\013\uffd3\014\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\026\uffd3\035\uffd3\001\002\000\030\003\uffd6\006\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\026\uffd6\035\uffd6\001\002\000\030\003\uffd5\006\uffd5" +
    "\010\uffd5\012\uffd5\013\uffd5\014\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\026\uffd5\035\uffd5\001\002\000\030\003\uffd4\006\uffd4" +
    "\010\uffd4\012\uffd4\013\uffd4\014\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\026\uffd4\035\uffd4\001\002\000\030\003\uffd2\006\uffd2" +
    "\010\uffd2\012\uffd2\013\uffd2\014\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\026\uffd2\035\uffd2\001\002\000\030\003\uffd7\006\uffd7" +
    "\010\uffd7\012\uffd7\013\uffd7\014\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\026\uffd7\035\uffd7\001\002\000\052\003\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\035\uffe9\001\002\000" +
    "\024\003\024\006\026\007\211\010\014\012\027\022\020" +
    "\024\016\026\021\035\017\001\002\000\024\003\024\006" +
    "\026\007\211\010\014\012\027\022\020\024\016\026\021" +
    "\035\017\001\002\000\052\003\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\035\ufff2\001\002\000\052\003\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\035\uffef\001" +
    "\002\000\052\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\035\ufff0\001\002\000\052\003\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\035\ufff1\001\002\000\024" +
    "\003\ufffd\005\ufffd\006\ufffd\010\ufffd\012\ufffd\022\ufffd\024" +
    "\ufffd\026\ufffd\035\ufffd\001\002\000\004\002\000\001\002" +
    "\000\024\003\ufffc\005\ufffc\006\ufffc\010\ufffc\012\ufffc\022" +
    "\ufffc\024\ufffc\026\ufffc\035\ufffc\001\002\000\004\027\uffb0" +
    "\001\002\000\004\027\301\001\002\000\004\027\uffb1\001" +
    "\002\000\004\027\uffb2\001\002\000\004\027\uffb4\001\002" +
    "\000\004\027\uffb3\001\002\000\006\003\131\032\226\001" +
    "\002\000\016\003\235\037\241\040\227\042\231\045\233" +
    "\047\234\001\002\000\010\003\272\027\uffa8\030\273\001" +
    "\002\000\004\027\uffaf\001\002\000\010\003\261\027\uff9d" +
    "\030\263\001\002\000\004\027\uffaa\001\002\000\010\003" +
    "\251\027\uffa3\030\253\001\002\000\010\003\242\027\uff96" +
    "\030\244\001\002\000\004\027\uffa9\001\002\000\004\027" +
    "\uffad\001\002\000\004\027\uffac\001\002\000\004\027\uffab" +
    "\001\002\000\004\027\uffae\001\002\000\004\027\uff92\001" +
    "\002\000\004\027\uff95\001\002\000\012\003\136\033\104" +
    "\034\140\036\105\001\002\000\004\031\246\001\002\000" +
    "\006\027\uff94\032\247\001\002\000\004\050\250\001\002" +
    "\000\004\027\uff93\001\002\000\004\027\uff9e\001\002\000" +
    "\004\027\uffa2\001\002\000\012\003\136\033\104\034\140" +
    "\036\105\001\002\000\004\031\255\001\002\000\006\027" +
    "\uffa1\032\256\001\002\000\010\041\257\043\260\046\143" +
    "\001\002\000\004\027\uff9f\001\002\000\004\027\uffa0\001" +
    "\002\000\004\027\uff97\001\002\000\004\027\uff9c\001\002" +
    "\000\012\003\136\033\104\034\140\036\105\001\002\000" +
    "\004\031\265\001\002\000\006\027\uff9b\032\266\001\002" +
    "\000\010\041\270\043\271\044\267\001\002\000\004\027" +
    "\uff98\001\002\000\004\027\uff99\001\002\000\004\027\uff9a" +
    "\001\002\000\004\027\uffa4\001\002\000\012\003\136\033" +
    "\104\034\140\036\105\001\002\000\004\027\uffa7\001\002" +
    "\000\004\031\276\001\002\000\006\027\uffa6\032\277\001" +
    "\002\000\004\041\300\001\002\000\004\027\uffa5\001\002" +
    "\000\052\003\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\035\uffdc\001\002\000\036\003\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\017\uffe2\021\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\035\uffe2\001\002\000\036" +
    "\003\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\017\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\035\uffe0\001\002\000\004\053\305\001\002\000\004\033" +
    "\306\001\002\000\004\052\307\001\002\000\004\053\310" +
    "\001\002\000\006\033\104\036\105\001\002\000\004\025" +
    "\312\001\002\000\024\003\024\006\026\010\014\012\027" +
    "\022\020\024\016\025\315\026\021\035\017\001\002\000" +
    "\024\003\024\006\026\010\014\012\027\022\020\024\016" +
    "\025\315\026\021\035\017\001\002\000\036\003\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\035\uffe1\001" +
    "\002\000\036\003\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\017\uffdd\021\uffdd\022\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\035\uffdd\001\002\000\024\003\024\006\026" +
    "\010\014\012\027\022\020\024\016\025\315\026\021\035" +
    "\017\001\002\000\036\003\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\017\uffde\021\uffde\022\uffde\024" +
    "\uffde\025\uffde\026\uffde\035\uffde\001\002\000\036\003\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\017" +
    "\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\035\uffdf" +
    "\001\002\000\024\003\024\006\026\010\014\011\322\012" +
    "\027\022\020\024\016\026\021\035\017\001\002\000\052" +
    "\003\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\035" +
    "\uffeb\001\002\000\024\003\024\006\026\010\014\011\322" +
    "\012\027\022\020\024\016\026\021\035\017\001\002\000" +
    "\052\003\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\035\uffee\001\002\000\052\003\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\035\uffec\001\002\000\052\003\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\035\uffed\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\021\004\011\005\014\006\007" +
    "\010\006\012\024\014\012\033\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\320\005\014\006\007\010" +
    "\006\011\323\012\024\014\012\033\322\001\001\000\002" +
    "\001\001\000\004\015\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\217\035\222\036\220\040\216" +
    "\001\001\000\020\004\213\005\014\006\007\010\006\012" +
    "\024\014\012\033\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\205\005\014\006" +
    "\007\007\207\010\006\012\024\014\012\033\206\001\001" +
    "\000\022\005\027\006\007\010\006\012\037\013\033\017" +
    "\040\021\031\033\034\001\001\000\022\005\027\006\007" +
    "\010\006\012\037\013\204\017\040\021\031\033\034\001" +
    "\001\000\004\022\155\001\001\000\022\005\027\006\007" +
    "\010\006\012\037\013\154\017\040\021\031\033\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\027" +
    "\006\007\010\006\012\037\013\153\017\040\021\031\033" +
    "\034\001\001\000\022\005\027\006\007\010\006\012\037" +
    "\013\152\017\040\021\031\033\034\001\001\000\024\005" +
    "\044\006\007\010\006\012\054\023\055\024\056\027\053" +
    "\031\047\033\050\001\001\000\022\005\027\006\007\010" +
    "\006\012\037\013\042\017\040\021\031\033\034\001\001" +
    "\000\022\005\027\006\007\010\006\012\037\013\041\017" +
    "\040\021\031\033\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\144\005\014\006\007\010\006\012" +
    "\024\014\012\032\145\033\146\001\001\000\024\005\044" +
    "\006\007\010\006\012\054\023\143\024\056\027\053\031" +
    "\047\033\050\001\001\000\004\025\073\001\001\000\022" +
    "\004\065\005\014\006\007\010\006\012\024\014\012\030" +
    "\066\033\067\001\001\000\024\005\044\006\007\010\006" +
    "\012\054\023\064\024\056\027\053\031\047\033\050\001" +
    "\001\000\024\005\044\006\007\010\006\012\054\023\063" +
    "\024\056\027\053\031\047\033\050\001\001\000\024\005" +
    "\044\006\007\010\006\012\054\023\062\024\056\027\053" +
    "\031\047\033\050\001\001\000\002\001\001\000\024\005" +
    "\044\006\007\010\006\012\054\023\061\024\056\027\053" +
    "\031\047\033\050\001\001\000\024\005\044\006\007\010" +
    "\006\012\054\023\060\024\056\027\053\031\047\033\050" +
    "\001\001\000\002\001\001\000\024\005\044\006\007\010" +
    "\006\012\054\023\057\024\056\027\053\031\047\033\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\065\005\014\006\007\010\006\012\024\014" +
    "\012\030\072\033\067\001\001\000\002\001\001\000\022" +
    "\004\065\005\014\006\007\010\006\012\024\014\012\030" +
    "\071\033\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\102\053\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\131\001\001\000\002" +
    "\001\001\000\024\005\107\006\007\010\006\012\116\024" +
    "\117\026\114\027\115\031\111\033\112\001\001\000\024" +
    "\005\107\006\007\010\006\012\116\024\117\026\126\027" +
    "\115\031\111\033\112\001\001\000\002\001\001\000\024" +
    "\005\107\006\007\010\006\012\116\024\117\026\125\027" +
    "\115\031\111\033\112\001\001\000\024\005\107\006\007" +
    "\010\006\012\116\024\117\026\124\027\115\031\111\033" +
    "\112\001\001\000\024\005\107\006\007\010\006\012\116" +
    "\024\117\026\123\027\115\031\111\033\112\001\001\000" +
    "\002\001\001\000\024\005\107\006\007\010\006\012\116" +
    "\024\117\026\122\027\115\031\111\033\112\001\001\000" +
    "\024\005\107\006\007\010\006\012\116\024\117\026\121" +
    "\027\115\031\111\033\112\001\001\000\024\005\107\006" +
    "\007\010\006\012\116\024\117\026\120\027\115\031\111" +
    "\033\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\102" +
    "\052\134\053\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\144\005\014\006\007\010\006\012\024\014\012" +
    "\032\151\033\146\001\001\000\002\001\001\000\022\004" +
    "\144\005\014\006\007\010\006\012\024\014\012\032\150" +
    "\033\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\102\053\164\001\001\000\002\001\001\000" +
    "\022\005\166\006\007\010\006\012\174\017\175\020\167" +
    "\021\171\033\172\001\001\000\022\005\166\006\007\010" +
    "\006\012\174\017\175\020\203\021\171\033\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\166\006" +
    "\007\010\006\012\174\017\175\020\202\021\171\033\172" +
    "\001\001\000\022\005\166\006\007\010\006\012\174\017" +
    "\175\020\201\021\171\033\172\001\001\000\022\005\166" +
    "\006\007\010\006\012\174\017\175\020\200\021\171\033" +
    "\172\001\001\000\022\005\166\006\007\010\006\012\174" +
    "\017\175\020\177\021\171\033\172\001\001\000\022\005" +
    "\166\006\007\010\006\012\174\017\175\020\176\021\171" +
    "\033\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\205\005\014\006" +
    "\007\007\212\010\006\012\024\014\012\033\206\001\001" +
    "\000\022\004\205\005\014\006\007\007\211\010\006\012" +
    "\024\014\012\033\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\131\001\001" +
    "\000\014\041\227\042\235\044\236\046\237\050\231\001" +
    "\001\000\004\043\273\001\001\000\002\001\001\000\004" +
    "\047\261\001\001\000\002\001\001\000\004\045\251\001" +
    "\001\000\004\051\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\102" +
    "\052\244\053\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\102\052\253\053\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\102\052\263\053\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\102\052\274\053\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\102\053" +
    "\310\001\001\000\002\001\001\000\022\004\312\005\014" +
    "\006\007\010\006\012\024\014\012\016\313\033\315\001" +
    "\001\000\022\004\312\005\014\006\007\010\006\012\024" +
    "\014\012\016\317\033\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\312\005\014\006\007\010\006" +
    "\012\024\014\012\016\316\033\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\320\005\014\006\007" +
    "\010\006\011\325\012\024\014\012\033\322\001\001\000" +
    "\002\001\001\000\022\004\320\005\014\006\007\010\006" +
    "\011\324\012\024\014\012\033\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HTML_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HTML_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HTML_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/*código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    */
    private ManejadorErrores manejadorErrores;        

    public HTML_Parser(HTML_Lexer lexer, ManejadorErrores manejadorErroresLex){/*nuevo constructor*/
        super(lexer);        

        manejadorErrores = manejadorErroresLex;        
    }    

    public void report_fatal_error(String message, Object info){
        manejadorErrores.setError(new Error(((info != null)?info.toString():""), "", 
        "", SintaxError.FATAL_ERROR));
    }

    protected int error_sync_size(){
        return 1;
    }/*para que establezca que con un token bien leido basta para recuperarse...   */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HTML_Parser$actions {

//Métodos que NO pueden ser accedidos desde el exterior, puesto que forman parte de una clase interna




    private void addError(Token token, int linea, int columna, SintaxError error){//tipoReporte = operacion o error                
        manejadorErrores.setError((new Error(((token != null)?token.getLexema():""), String.valueOf(linea), String.valueOf(columna), error)));
        
    }

  private final HTML_Parser parser;

  /** Constructor */
  CUP$HTML_Parser$actions(HTML_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HTML_Parser$do_action_part00000000(
    int                        CUP$HTML_Parser$act_num,
    java_cup.runtime.lr_parser CUP$HTML_Parser$parser,
    java.util.Stack            CUP$HTML_Parser$stack,
    int                        CUP$HTML_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HTML_Parser$result;

      /* select the action based on the action number */
      switch (CUP$HTML_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)).value;
		RESULT = start_val;
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HTML_Parser$parser.done_parsing();
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= HTML_A body HTML_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= HTML_A HTML_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_GENERAL_HTML_STRUCT");
                                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.HTML_BAD_GENERAL_STRUCT);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= body etiqueta 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= body content 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= etiqueta 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= content 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiqueta ::= headers 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",2, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiqueta ::= table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",2, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiqueta ::= for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",2, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // etiqueta ::= BR 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",2, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // headers ::= header1 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("headers",3, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // headers ::= header2 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("headers",3, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // headers ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_HEADER_LABEL_STRUCT");
                                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.HTML_BAD_HEADER_LABEL_STRUCT);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("headers",3, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // header1 ::= H1_A rest_header1 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("header1",4, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rest_header1 ::= etiqueta rest_header1 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header1",5, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rest_header1 ::= content rest_header1 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header1",5, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rest_header1 ::= H1_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header1",5, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // header2 ::= H2_A rest_header2 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("header2",6, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rest_header2 ::= etiqueta rest_header2 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header2",7, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rest_header2 ::= content rest_header2 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header2",7, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rest_header2 ::= H2_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header2",7, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // table ::= TABLE_A rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("table",8, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rest_table ::= headers rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rest_table ::= table rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rest_table ::= BR rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rest_table ::= content rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rest_table ::= for_row rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rest_table ::= table_row rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rest_table ::= TABLE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // for_loop ::= FOR_A cuerpo_for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("for_loop",10, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cuerpo_for_loop ::= ITERADOR DOS_PUNTOS VARIABLE HASTA DOS_PUNTOS var_tipo_numerica FOR_CA rest_for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_loop",11, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cuerpo_for_loop ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_FOR_LOOP_BODY");
                                                                                                                              addError(Token.parseToken(err), errleft, errright, SintaxError.HTML_BAD_FOR_LOOP_BODY);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_loop",11, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rest_for_loop ::= etiqueta rest_for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_loop",12, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rest_for_loop ::= content rest_for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_loop",12, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rest_for_loop ::= FOR_CA 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_loop",12, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // content ::= VAR_A valor_variable VAR_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("content",25, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // content ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("content",25, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for_row ::= FOR_A cuerpo_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("for_row",13, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo_for_row ::= ITERADOR DOS_PUNTOS VARIABLE HASTA DOS_PUNTOS var_tipo_numerica FOR_CA rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_row",16, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo_for_row ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_FOR_ROW_LOOP_BODY");
                                                                                                                               addError(Token.parseToken(err), errleft, errright, SintaxError.HTML_BAD_FOR_ROW_LOOP_BODY);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_row",16, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rest_for_row ::= headers rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",14, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rest_for_row ::= table rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",14, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rest_for_row ::= BR rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",14, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rest_for_row ::= content rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",14, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rest_for_row ::= for_row rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",14, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rest_for_row ::= table_row rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",14, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rest_for_row ::= FOR_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",14, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // table_row ::= TR_A rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rest_table_row ::= headers rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rest_table_row ::= table rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rest_table_row ::= BR rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rest_table_row ::= content rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rest_table_row ::= for_cell rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rest_table_row ::= table_head rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rest_table_row ::= table_cell rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rest_table_row ::= TR_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_cell ::= FOR_A cuerpo_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("for_cell",18, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpo_for_cell ::= ITERADOR DOS_PUNTOS VARIABLE HASTA DOS_PUNTOS var_tipo_numerica FOR_CA rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_cell",19, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpo_for_cell ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_FOR_CELL_LOOP_STRUCT");
                                                                                                                                  addError(Token.parseToken(err), errleft, errright, SintaxError.HTML_BAD_FOR_CELL_LOOP_STRUCT);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_cell",19, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rest_for_cell ::= headers rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rest_for_cell ::= table rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rest_for_cell ::= BR rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rest_for_cell ::= content rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rest_for_cell ::= table_head rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rest_for_cell ::= table_cell rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rest_for_cell ::= for_cell rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rest_for_cell ::= FOR_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // table_head ::= TH_A rest_table_head 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("table_head",21, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rest_table_head ::= etiqueta rest_table_head 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_head",22, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rest_table_head ::= content rest_table_head 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_head",22, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rest_table_head ::= TH_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_head",22, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // table_cell ::= TD_A rest_table_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("table_cell",23, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rest_table_cell ::= etiqueta rest_table_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_cell",24, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // rest_table_cell ::= content rest_table_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_cell",24, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // rest_table_cell ::= TD_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_cell",24, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_variable ::= tipo_result 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",26, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_variable ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",26, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_variable ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_VARIABLE_VALUE");
                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.HTML_BAD_VARIABLE_VALUE);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",26, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_result ::= result_integer 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("tipo_result",27, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_result ::= result_string 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("tipo_result",27, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // result_string ::= RESULT PUNTO valor_result 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_string",30, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor_result ::= SCORE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_result ::= result_clases 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_result ::= result_metodos 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_result ::= result_variables 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_result ::= result_comentarios 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_result ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_ATTRIBUTE_RESULT_ACCESS");
                                                                                        addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_ATTRIBUTE_RESULT_ACCESS);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // result_clases ::= CLASES 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_clases",32, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // result_clases ::= CLASES cuerpo_clase 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_clases",32, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_clase ::= CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_clase ::= CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_clase ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_ATTRIBUTES_CLASS_INVOCATION");
                                                                                         addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_ATTRIBUTES_CLASS_INVOCATION);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // result_metodos ::= METODOS 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",34, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // result_metodos ::= METODOS cuerpo_metodo 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",34, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_metodo ::= CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",35, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_metodo ::= CORCHETE_A valor_numerico CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",35, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_metodo ::= CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",35, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_metodo ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_ATTRIBUTES_METHOD_INVOCATION");
                                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_ATTRIBUTES_METHOD_INVOCATION);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",35, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // result_variables ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",36, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // result_variables ::= VARIABLES cuerpo_variable 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",36, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_variable ::= CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_variable",37, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo_variable ::= CORCHETE_A valor_numerico CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_variable",37, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpo_variable ::= CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_variable",37, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo_variable ::= CORCHETE_A valor_numerico CORCHETE_C PUNTO FUNCION 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_variable",37, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo_variable ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_ATTRIBUTES_VAR_INVOCATION");
                                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_ATTRIBUTES_VAR_INVOCATION);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_variable",37, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // result_comentarios ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_comentarios",38, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // result_comentarios ::= COMENTARIOS cuerpo_comentario 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_comentarios",38, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpo_comentario ::= CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_comentario",39, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpo_comentario ::= CORCHETE_A valor_numerico CORCHETE_C PUNTO TEXTO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_comentario",39, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpo_comentario ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_ATTRIBUTE_COMMENT_INVOCATION");
                                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_ATTRIBUTE_COMMENT_INVOCATION);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_comentario",39, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // result_integer ::= RESULT cuerpo_result_integer 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_integer",28, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpo_result_integer ::= PUNTO METODOS CORCHETE_A valor_numerico CORCHETE_C PUNTO PARAMETROS 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_result_integer",29, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cuerpo_result_integer ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_INTEGER_RESULT_INVOCATION");
                                                                                                                      addError(Token.parseToken(err), errleft, errright, SintaxError.BAD_INTEGER_RESULT_INVOCATION);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_result_integer",29, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valor_numerico ::= ENTERO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",40, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor_numerico ::= var_tipo_numerica 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",40, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor_numerico ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.peek()).value;
		System.out.println("[S] error: BAD_NUMBER_VALUE_STRUCT");
                                                                          addError(Token.parseToken(err), errleft, errright, SintaxError.HTML_BAD_NUMBER_VALUE_STRUCT);
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",40, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // var_tipo_numerica ::= result_integer 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("var_tipo_numerica",41, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // var_tipo_numerica ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("var_tipo_numerica",41, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HTML_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HTML_Parser$do_action(
    int                        CUP$HTML_Parser$act_num,
    java_cup.runtime.lr_parser CUP$HTML_Parser$parser,
    java.util.Stack            CUP$HTML_Parser$stack,
    int                        CUP$HTML_Parser$top)
    throws java.lang.Exception
    {
              return CUP$HTML_Parser$do_action_part00000000(
                               CUP$HTML_Parser$act_num,
                               CUP$HTML_Parser$parser,
                               CUP$HTML_Parser$stack,
                               CUP$HTML_Parser$top);
    }
}

}
