
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import Backend.Objetos.Token;
import Backend.Manejadores.ManejadorErrores;
import Backend.Objetos.Error;
import Backend.Objetos.Enums.SintaxError;
import Backend.Analizadores.HTML_ParserSym.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HTML_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return HTML_ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public HTML_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HTML_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HTML_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\003\000\002\010\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\012\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\003\000\002\014\013\000\002\015\004\000\002\015\004" +
    "\000\002\015\003\000\002\030\005\000\002\030\003\000" +
    "\002\016\013\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\020\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\003\000\002\022\013\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\003\000" +
    "\002\024\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\003\000\002\026\004\000\002\027\004\000\002\027" +
    "\004\000\002\027\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\034\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\006\000\002\036\010\000\002\037\003\000\002\037\006" +
    "\000\002\037\010\000\002\037\010\000\002\040\003\000" +
    "\002\040\006\000\002\040\010\000\002\040\010\000\002" +
    "\040\010\000\002\041\003\000\002\041\006\000\002\041" +
    "\010\000\002\033\012\000\002\042\003\000\002\042\003" +
    "\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\004\005\001\002\000\004\002\302\001" +
    "\002\000\022\005\007\006\025\010\013\012\024\022\017" +
    "\024\015\026\020\035\016\001\002\000\050\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\035\ufff5\001\002\000\004" +
    "\002\uffff\001\002\000\050\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\035\ufff6\001\002\000\022\005\ufffc\006\ufffc" +
    "\010\ufffc\012\ufffc\022\ufffc\024\ufffc\026\ufffc\035\ufffc\001" +
    "\002\000\034\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\017\ufff8\021\ufff8\022\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\035\ufff8\001\002\000\022\006\025\010\013\011\275" +
    "\012\024\022\017\024\015\026\020\035\016\001\002\000" +
    "\034\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\017\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\035" +
    "\ufffa\001\002\000\004\051\257\001\002\000\050\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\035\uffdf\001\002\000" +
    "\034\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\035" +
    "\ufff7\001\002\000\006\033\212\036\213\001\002\000\022" +
    "\005\204\006\025\010\013\012\024\022\017\024\015\026" +
    "\020\035\016\001\002\000\022\005\ufffb\006\ufffb\010\ufffb" +
    "\012\ufffb\022\ufffb\024\ufffb\026\ufffb\035\ufffb\001\002\000" +
    "\034\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\017\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\035" +
    "\ufff9\001\002\000\024\006\025\010\013\012\024\013\043" +
    "\014\034\022\037\024\036\026\020\035\016\001\002\000" +
    "\022\006\025\007\031\010\013\012\024\022\017\024\015" +
    "\026\020\035\016\001\002\000\022\006\025\007\031\010" +
    "\013\012\024\022\017\024\015\026\020\035\016\001\002" +
    "\000\022\006\025\007\031\010\013\012\024\022\017\024" +
    "\015\026\020\035\016\001\002\000\050\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\035\ufff4\001\002\000\050\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\035\ufff1\001\002" +
    "\000\050\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\035" +
    "\ufff2\001\002\000\050\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\035\ufff3\001\002\000\026\006\025\010\013\012" +
    "\024\015\124\016\120\020\115\022\123\024\117\026\020" +
    "\035\016\001\002\000\024\006\025\010\013\012\024\013" +
    "\043\014\034\022\037\024\036\026\020\035\016\001\002" +
    "\000\004\051\053\001\002\000\024\006\025\010\013\012" +
    "\024\013\043\014\034\022\037\024\036\026\020\035\016" +
    "\001\002\000\024\006\025\010\013\012\024\013\043\014" +
    "\034\022\037\024\036\026\020\035\016\001\002\000\024" +
    "\006\025\010\013\012\024\013\043\014\034\022\037\024" +
    "\036\026\020\035\016\001\002\000\024\006\025\010\013" +
    "\012\024\013\043\014\034\022\037\024\036\026\020\035" +
    "\016\001\002\000\050\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\035\uffe5\001\002\000\024\006\025\010\013\012" +
    "\024\013\043\014\034\022\037\024\036\026\020\035\016" +
    "\001\002\000\050\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\035\uffec\001\002\000\050\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\035\uffea\001\002\000\050\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\035\uffe7\001\002\000\050" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\035\uffe8\001" +
    "\002\000\050\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\035\uffe6\001\002\000\050\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\035\uffe9\001\002\000\004\053\054\001\002" +
    "\000\004\033\055\001\002\000\004\052\056\001\002\000" +
    "\004\053\057\001\002\000\006\033\063\036\061\001\002" +
    "\000\006\025\uffa0\031\uffa0\001\002\000\004\032\103\001" +
    "\002\000\004\025\064\001\002\000\006\025\uff9f\031\uff9f" +
    "\001\002\000\024\006\025\010\013\012\024\014\034\022" +
    "\070\023\065\024\036\026\020\035\016\001\002\000\026" +
    "\006\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\026\uffd7\035\uffd7\001\002\000\024\006\025" +
    "\010\013\012\024\014\034\022\070\023\065\024\036\026" +
    "\020\035\016\001\002\000\026\006\uffde\010\uffde\012\uffde" +
    "\013\uffde\014\uffde\022\uffde\023\uffde\024\uffde\026\uffde\035" +
    "\uffde\001\002\000\024\006\025\010\013\012\024\014\034" +
    "\022\070\023\065\024\036\026\020\035\016\001\002\000" +
    "\024\006\025\010\013\012\024\014\034\022\070\023\065" +
    "\024\036\026\020\035\016\001\002\000\024\006\025\010" +
    "\013\012\024\014\034\022\070\023\065\024\036\026\020" +
    "\035\016\001\002\000\024\006\025\010\013\012\024\014" +
    "\034\022\070\023\065\024\036\026\020\035\016\001\002" +
    "\000\024\006\025\010\013\012\024\014\034\022\070\023" +
    "\065\024\036\026\020\035\016\001\002\000\026\006\uffdc" +
    "\010\uffdc\012\uffdc\013\uffdc\014\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\026\uffdc\035\uffdc\001\002\000\026\006\uffd9\010\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\022\uffd9\023\uffd9\024\uffd9\026" +
    "\uffd9\035\uffd9\001\002\000\026\006\uffda\010\uffda\012\uffda" +
    "\013\uffda\014\uffda\022\uffda\023\uffda\024\uffda\026\uffda\035" +
    "\uffda\001\002\000\026\006\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8\035\uffd8\001" +
    "\002\000\026\006\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\026\uffdb\035\uffdb\001\002\000" +
    "\026\006\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\026\uffdd\035\uffdd\001\002\000\004\045" +
    "\104\001\002\000\004\030\105\001\002\000\010\033\063" +
    "\034\107\036\061\001\002\000\004\031\111\001\002\000" +
    "\004\031\uffa2\001\002\000\004\031\uffa1\001\002\000\004" +
    "\032\112\001\002\000\004\046\113\001\002\000\010\025" +
    "\uffa3\027\uffa3\031\uffa3\001\002\000\050\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\035\uffeb\001\002\000\022\006" +
    "\025\010\013\012\024\021\200\022\017\024\015\026\020" +
    "\035\016\001\002\000\026\006\025\010\013\012\024\015" +
    "\124\016\120\020\115\022\123\024\117\026\020\035\016" +
    "\001\002\000\004\051\145\001\002\000\022\006\025\010" +
    "\013\012\024\017\142\022\017\024\015\026\020\035\016" +
    "\001\002\000\026\006\025\010\013\012\024\015\124\016" +
    "\120\020\115\022\123\024\117\026\020\035\016\001\002" +
    "\000\026\006\025\010\013\012\024\015\124\016\120\020" +
    "\115\022\123\024\117\026\020\035\016\001\002\000\026" +
    "\006\025\010\013\012\024\015\124\016\120\020\115\022" +
    "\123\024\117\026\020\035\016\001\002\000\026\006\uffce" +
    "\010\uffce\012\uffce\013\uffce\014\uffce\022\uffce\023\uffce\024" +
    "\uffce\026\uffce\035\uffce\001\002\000\026\006\025\010\013" +
    "\012\024\015\124\016\120\020\115\022\123\024\117\026" +
    "\020\035\016\001\002\000\026\006\025\010\013\012\024" +
    "\015\124\016\120\020\115\022\123\024\117\026\020\035" +
    "\016\001\002\000\026\006\uffd6\010\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\022\uffd6\023\uffd6\024\uffd6\026\uffd6\035\uffd6\001" +
    "\002\000\026\006\025\010\013\012\024\015\124\016\120" +
    "\020\115\022\123\024\117\026\020\035\016\001\002\000" +
    "\026\006\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\026\uffd1\035\uffd1\001\002\000\026\006" +
    "\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\026\uffd4\035\uffd4\001\002\000\026\006\uffd0\010" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\026\uffd0\035\uffd0\001\002\000\026\006\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\022\uffd3\023\uffd3\024\uffd3\026\uffd3" +
    "\035\uffd3\001\002\000\026\006\uffd2\010\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\035\uffd2" +
    "\001\002\000\026\006\uffcf\010\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\035\uffcf\001\002" +
    "\000\022\006\025\010\013\012\024\017\142\022\017\024" +
    "\015\026\020\035\016\001\002\000\030\006\uffc4\010\uffc4" +
    "\012\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\026\uffc4\035\uffc4\001\002\000\022\006\025\010\013" +
    "\012\024\017\142\022\017\024\015\026\020\035\016\001" +
    "\002\000\030\006\uffc1\010\uffc1\012\uffc1\015\uffc1\016\uffc1" +
    "\020\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1\035\uffc1\001" +
    "\002\000\030\006\uffc2\010\uffc2\012\uffc2\015\uffc2\016\uffc2" +
    "\020\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\035\uffc2\001" +
    "\002\000\030\006\uffc3\010\uffc3\012\uffc3\015\uffc3\016\uffc3" +
    "\020\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\035\uffc3\001" +
    "\002\000\004\053\146\001\002\000\004\033\147\001\002" +
    "\000\004\052\150\001\002\000\004\053\151\001\002\000" +
    "\006\033\063\036\061\001\002\000\004\025\153\001\002" +
    "\000\026\006\025\010\013\012\024\016\120\020\115\022" +
    "\160\023\155\024\117\026\020\035\016\001\002\000\026" +
    "\006\025\010\013\012\024\016\120\020\115\022\160\023" +
    "\155\024\117\026\020\035\016\001\002\000\030\006\uffc5" +
    "\010\uffc5\012\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\026\uffc5\035\uffc5\001\002\000\026\006\025" +
    "\010\013\012\024\016\120\020\115\022\160\023\155\024" +
    "\117\026\020\035\016\001\002\000\026\006\025\010\013" +
    "\012\024\016\120\020\115\022\160\023\155\024\117\026" +
    "\020\035\016\001\002\000\026\006\025\010\013\012\024" +
    "\016\120\020\115\022\160\023\155\024\117\026\020\035" +
    "\016\001\002\000\030\006\uffcd\010\uffcd\012\uffcd\015\uffcd" +
    "\016\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\035" +
    "\uffcd\001\002\000\026\006\025\010\013\012\024\016\120" +
    "\020\115\022\160\023\155\024\117\026\020\035\016\001" +
    "\002\000\026\006\025\010\013\012\024\016\120\020\115" +
    "\022\160\023\155\024\117\026\020\035\016\001\002\000" +
    "\026\006\025\010\013\012\024\016\120\020\115\022\160" +
    "\023\155\024\117\026\020\035\016\001\002\000\030\006" +
    "\uffc6\010\uffc6\012\uffc6\015\uffc6\016\uffc6\020\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\026\uffc6\035\uffc6\001\002\000\030\006" +
    "\uffcb\010\uffcb\012\uffcb\015\uffcb\016\uffcb\020\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\026\uffcb\035\uffcb\001\002\000\030\006" +
    "\uffc8\010\uffc8\012\uffc8\015\uffc8\016\uffc8\020\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\026\uffc8\035\uffc8\001\002\000\030\006" +
    "\uffca\010\uffca\012\uffca\015\uffca\016\uffca\020\uffca\022\uffca" +
    "\023\uffca\024\uffca\026\uffca\035\uffca\001\002\000\030\006" +
    "\uffc9\010\uffc9\012\uffc9\015\uffc9\016\uffc9\020\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\026\uffc9\035\uffc9\001\002\000\030\006" +
    "\uffc7\010\uffc7\012\uffc7\015\uffc7\016\uffc7\020\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\026\uffc7\035\uffc7\001\002\000\030\006" +
    "\uffcc\010\uffcc\012\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\026\uffcc\035\uffcc\001\002\000\026\006" +
    "\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\026\uffd5\035\uffd5\001\002\000\022\006\025\010" +
    "\013\012\024\021\200\022\017\024\015\026\020\035\016" +
    "\001\002\000\030\006\uffc0\010\uffc0\012\uffc0\015\uffc0\016" +
    "\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\035\uffc0" +
    "\001\002\000\022\006\025\010\013\012\024\021\200\022" +
    "\017\024\015\026\020\035\016\001\002\000\030\006\uffbd" +
    "\010\uffbd\012\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\026\uffbd\035\uffbd\001\002\000\030\006\uffbe" +
    "\010\uffbe\012\uffbe\015\uffbe\016\uffbe\020\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\026\uffbe\035\uffbe\001\002\000\030\006\uffbf" +
    "\010\uffbf\012\uffbf\015\uffbf\016\uffbf\020\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\035\uffbf\001\002\000\022\005\ufffe" +
    "\006\ufffe\010\ufffe\012\ufffe\022\ufffe\024\ufffe\026\ufffe\035" +
    "\ufffe\001\002\000\004\002\000\001\002\000\022\005\ufffd" +
    "\006\ufffd\010\ufffd\012\ufffd\022\ufffd\024\ufffd\026\ufffd\035" +
    "\ufffd\001\002\000\004\027\uffb9\001\002\000\004\027\256" +
    "\001\002\000\004\027\uffba\001\002\000\004\027\uffbc\001" +
    "\002\000\004\027\uffbb\001\002\000\004\032\214\001\002" +
    "\000\014\037\226\040\215\042\217\045\220\047\222\001" +
    "\002\000\006\027\uffb2\030\251\001\002\000\004\027\uffb8" +
    "\001\002\000\006\027\uffab\030\242\001\002\000\006\027" +
    "\uffaf\030\234\001\002\000\004\027\uffb3\001\002\000\006" +
    "\027\uffa6\030\227\001\002\000\004\027\uffb5\001\002\000" +
    "\004\027\uffb6\001\002\000\004\027\uffb4\001\002\000\004" +
    "\027\uffb7\001\002\000\010\033\063\034\107\036\061\001" +
    "\002\000\004\031\231\001\002\000\006\027\uffa5\032\232" +
    "\001\002\000\004\050\233\001\002\000\004\027\uffa4\001" +
    "\002\000\010\033\063\034\107\036\061\001\002\000\004" +
    "\031\236\001\002\000\006\027\uffae\032\237\001\002\000" +
    "\010\041\240\043\241\046\113\001\002\000\004\027\uffac" +
    "\001\002\000\004\027\uffad\001\002\000\010\033\063\034" +
    "\107\036\061\001\002\000\004\031\244\001\002\000\006" +
    "\027\uffaa\032\245\001\002\000\010\041\247\043\250\044" +
    "\246\001\002\000\004\027\uffa7\001\002\000\004\027\uffa8" +
    "\001\002\000\004\027\uffa9\001\002\000\010\033\063\034" +
    "\107\036\061\001\002\000\004\031\253\001\002\000\006" +
    "\027\uffb1\032\254\001\002\000\004\041\255\001\002\000" +
    "\004\027\uffb0\001\002\000\050\005\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\035\uffe0\001\002\000\004\053\260\001" +
    "\002\000\004\033\261\001\002\000\004\052\262\001\002" +
    "\000\004\053\263\001\002\000\006\033\063\036\061\001" +
    "\002\000\004\025\265\001\002\000\022\006\025\010\013" +
    "\012\024\022\017\024\015\025\270\026\020\035\016\001" +
    "\002\000\022\006\025\010\013\012\024\022\017\024\015" +
    "\025\270\026\020\035\016\001\002\000\034\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\017\uffe4\021\uffe4" +
    "\022\uffe4\024\uffe4\025\uffe4\026\uffe4\035\uffe4\001\002\000" +
    "\034\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\017\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\035" +
    "\uffe1\001\002\000\022\006\025\010\013\012\024\022\017" +
    "\024\015\025\270\026\020\035\016\001\002\000\034\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\017\uffe2" +
    "\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\035\uffe2\001" +
    "\002\000\034\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\017\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\035\uffe3\001\002\000\022\006\025\010\013\011\275" +
    "\012\024\022\017\024\015\026\020\035\016\001\002\000" +
    "\050\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\035\uffed" +
    "\001\002\000\022\006\025\010\013\011\275\012\024\022" +
    "\017\024\015\026\020\035\016\001\002\000\050\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\035\ufff0\001\002\000" +
    "\050\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\035\uffee" +
    "\001\002\000\050\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\035\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\002\003\001\001\000\002\001\001\000" +
    "\022\003\020\004\010\005\013\006\007\010\005\012\022" +
    "\014\011\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\273\005\013\006\007\010\005\011\276\012" +
    "\022\014\011\030\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\206\032\210\033\207\034\205\001\001\000\020\004\202" +
    "\005\013\006\007\010\005\012\022\014\011\030\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\034" +
    "\006\007\010\005\012\043\013\044\016\041\020\037\030" +
    "\040\001\001\000\022\004\025\005\013\006\007\007\027" +
    "\010\005\012\022\014\011\030\026\001\001\000\022\004" +
    "\025\005\013\006\007\007\032\010\005\012\022\014\011" +
    "\030\026\001\001\000\022\004\025\005\013\006\007\007" +
    "\031\010\005\012\022\014\011\030\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\115\006\007\010\005\012\125\021\126" +
    "\022\127\024\124\026\120\030\121\001\001\000\022\005" +
    "\034\006\007\010\005\012\043\013\113\016\041\020\037" +
    "\030\040\001\001\000\002\001\001\000\022\005\034\006" +
    "\007\010\005\012\043\013\051\016\041\020\037\030\040" +
    "\001\001\000\022\005\034\006\007\010\005\012\043\013" +
    "\050\016\041\020\037\030\040\001\001\000\022\005\034" +
    "\006\007\010\005\012\043\013\047\016\041\020\037\030" +
    "\040\001\001\000\022\005\034\006\007\010\005\012\043" +
    "\013\046\016\041\020\037\030\040\001\001\000\002\001" +
    "\001\000\022\005\034\006\007\010\005\012\043\013\045" +
    "\016\041\020\037\030\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\057" +
    "\043\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\065\006\007" +
    "\010\005\012\073\016\072\017\066\020\070\030\071\001" +
    "\001\000\002\001\001\000\022\005\065\006\007\010\005" +
    "\012\073\016\072\017\101\020\070\030\071\001\001\000" +
    "\002\001\001\000\022\005\065\006\007\010\005\012\073" +
    "\016\072\017\100\020\070\030\071\001\001\000\022\005" +
    "\065\006\007\010\005\012\073\016\072\017\077\020\070" +
    "\030\071\001\001\000\022\005\065\006\007\010\005\012" +
    "\073\016\072\017\076\020\070\030\071\001\001\000\022" +
    "\005\065\006\007\010\005\012\073\016\072\017\075\020" +
    "\070\030\071\001\001\000\022\005\065\006\007\010\005" +
    "\012\073\016\072\017\074\020\070\030\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\057\042\105\043\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\174\005\013\006\007\010" +
    "\005\012\022\014\011\027\175\030\176\001\001\000\024" +
    "\005\115\006\007\010\005\012\125\021\173\022\127\024" +
    "\124\026\120\030\121\001\001\000\002\001\001\000\022" +
    "\004\136\005\013\006\007\010\005\012\022\014\011\025" +
    "\137\030\140\001\001\000\024\005\115\006\007\010\005" +
    "\012\125\021\135\022\127\024\124\026\120\030\121\001" +
    "\001\000\024\005\115\006\007\010\005\012\125\021\134" +
    "\022\127\024\124\026\120\030\121\001\001\000\024\005" +
    "\115\006\007\010\005\012\125\021\133\022\127\024\124" +
    "\026\120\030\121\001\001\000\002\001\001\000\024\005" +
    "\115\006\007\010\005\012\125\021\132\022\127\024\124" +
    "\026\120\030\121\001\001\000\024\005\115\006\007\010" +
    "\005\012\125\021\131\022\127\024\124\026\120\030\121" +
    "\001\001\000\002\001\001\000\024\005\115\006\007\010" +
    "\005\012\125\021\130\022\127\024\124\026\120\030\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\136\005\013\006\007\010\005\012\022\014" +
    "\011\025\143\030\140\001\001\000\002\001\001\000\022" +
    "\004\136\005\013\006\007\010\005\012\022\014\011\025" +
    "\142\030\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\057\043\151" +
    "\001\001\000\002\001\001\000\024\005\153\006\007\010" +
    "\005\012\162\022\163\023\160\024\161\026\155\030\156" +
    "\001\001\000\024\005\153\006\007\010\005\012\162\022" +
    "\163\023\172\024\161\026\155\030\156\001\001\000\002" +
    "\001\001\000\024\005\153\006\007\010\005\012\162\022" +
    "\163\023\171\024\161\026\155\030\156\001\001\000\024" +
    "\005\153\006\007\010\005\012\162\022\163\023\170\024" +
    "\161\026\155\030\156\001\001\000\024\005\153\006\007" +
    "\010\005\012\162\022\163\023\167\024\161\026\155\030" +
    "\156\001\001\000\002\001\001\000\024\005\153\006\007" +
    "\010\005\012\162\022\163\023\166\024\161\026\155\030" +
    "\156\001\001\000\024\005\153\006\007\010\005\012\162" +
    "\022\163\023\165\024\161\026\155\030\156\001\001\000" +
    "\024\005\153\006\007\010\005\012\162\022\163\023\164" +
    "\024\161\026\155\030\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\174\005\013\006\007\010\005\012\022" +
    "\014\011\027\201\030\176\001\001\000\002\001\001\000" +
    "\022\004\174\005\013\006\007\010\005\012\022\014\011" +
    "\027\200\030\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\035\215\036\223\037\222\040\224\041" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\057\042\227\043\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\057\042\234\043\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\057\042" +
    "\242\043\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\057\042\251\043\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\057\043\263\001\001\000\002\001\001\000\022\004\265" +
    "\005\013\006\007\010\005\012\022\014\011\015\266\030" +
    "\270\001\001\000\022\004\265\005\013\006\007\010\005" +
    "\012\022\014\011\015\272\030\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\265\005\013\006\007" +
    "\010\005\012\022\014\011\015\271\030\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\273\005\013" +
    "\006\007\010\005\011\300\012\022\014\011\030\275\001" +
    "\001\000\002\001\001\000\022\004\273\005\013\006\007" +
    "\010\005\011\277\012\022\014\011\030\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HTML_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HTML_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HTML_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/*código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    */
    private ManejadorErrores manejadorErrores;        

    public HTML_Parser(HTML_Lexer lexer, ManejadorErrores manejadorErroresLex){/*nuevo constructor*/
        super(lexer);        

        manejadorErrores = manejadorErroresLex;        
    }    

    public void report_fatal_error(String message, Object info){
        manejadorErrores.setError(new Error(((info != null)?info.toString():""), "", 
        "", SintaxError.FATAL_ERROR));
    }

    protected int error_sync_size(){
        return 1;
    }/*para que establezca que con un token bien leido basta para recuperarse...   */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HTML_Parser$actions {

//Métodos que NO pueden ser accedidos desde el exterior, puesto que forman parte de una clase interna




    private void addError(Token token, int linea, int columna, SintaxError error){//tipoReporte = operacion o error                
        manejadorErrores.setError((new Error(((token != null)?token.getLexema():""), String.valueOf(linea), String.valueOf(columna), error)));
        
    }

  private final HTML_Parser parser;

  /** Constructor */
  CUP$HTML_Parser$actions(HTML_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HTML_Parser$do_action_part00000000(
    int                        CUP$HTML_Parser$act_num,
    java_cup.runtime.lr_parser CUP$HTML_Parser$parser,
    java.util.Stack            CUP$HTML_Parser$stack,
    int                        CUP$HTML_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HTML_Parser$result;

      /* select the action based on the action number */
      switch (CUP$HTML_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)).value;
		RESULT = start_val;
              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HTML_Parser$parser.done_parsing();
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= HTML_A body HTML_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= HTML_A HTML_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= body etiqueta 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= body content 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= etiqueta 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= content 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiqueta ::= headers 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",2, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiqueta ::= table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",2, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiqueta ::= for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",2, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiqueta ::= BR 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",2, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // headers ::= header1 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("headers",3, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // headers ::= header2 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("headers",3, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // header1 ::= H1_A rest_header1 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("header1",4, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rest_header1 ::= etiqueta rest_header1 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header1",5, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rest_header1 ::= content rest_header1 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header1",5, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rest_header1 ::= H1_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header1",5, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // header2 ::= H2_A rest_header2 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("header2",6, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rest_header2 ::= etiqueta rest_header2 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header2",7, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rest_header2 ::= content rest_header2 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header2",7, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rest_header2 ::= H2_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_header2",7, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // table ::= TABLE_A rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("table",8, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rest_table ::= headers rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rest_table ::= table rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rest_table ::= BR rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rest_table ::= content rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rest_table ::= for_row rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rest_table ::= table_row rest_table 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rest_table ::= TABLE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table",9, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for_loop ::= FOR_A ITERATOR DOS_PUNTOS VARIABLE HASTA DOS_PUNTOS var_tipo_numerica FOR_CA rest_for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("for_loop",10, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-8)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rest_for_loop ::= etiqueta rest_for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_loop",11, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rest_for_loop ::= content rest_for_loop 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_loop",11, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rest_for_loop ::= FOR_CA 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_loop",11, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // content ::= VAR_A valor_variable VAR_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("content",22, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // content ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("content",22, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for_row ::= FOR_A ITERATOR DOS_PUNTOS VARIABLE HASTA DOS_PUNTOS var_tipo_numerica FOR_CA rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("for_row",12, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-8)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rest_for_row ::= headers rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",13, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rest_for_row ::= table rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",13, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rest_for_row ::= BR rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",13, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rest_for_row ::= content rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",13, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // rest_for_row ::= for_row rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",13, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rest_for_row ::= table_row rest_for_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",13, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rest_for_row ::= FOR_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_row",13, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // table_row ::= TR_A rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("table_row",14, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rest_table_row ::= headers rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rest_table_row ::= table rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rest_table_row ::= BR rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rest_table_row ::= content rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rest_table_row ::= for_cell rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rest_table_row ::= table_head rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rest_table_row ::= table_cell rest_table_row 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rest_table_row ::= TR_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_row",15, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // for_cell ::= FOR_A ITERATOR DOS_PUNTOS VARIABLE HASTA DOS_PUNTOS var_tipo_numerica FOR_CA rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("for_cell",16, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-8)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rest_for_cell ::= headers rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rest_for_cell ::= table rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rest_for_cell ::= BR rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rest_for_cell ::= content rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rest_for_cell ::= table_head rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rest_for_cell ::= table_cell rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rest_for_cell ::= for_cell rest_for_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rest_for_cell ::= FOR_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_for_cell",17, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // table_head ::= TH_A rest_table_head 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("table_head",18, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rest_table_head ::= etiqueta rest_table_head 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_head",19, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rest_table_head ::= content rest_table_head 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_head",19, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rest_table_head ::= TH_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_head",19, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // table_cell ::= TD_A rest_table_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("table_cell",20, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rest_table_cell ::= etiqueta rest_table_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_cell",21, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rest_table_cell ::= content rest_table_cell 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_cell",21, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rest_table_cell ::= TD_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("rest_table_cell",21, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor_variable ::= tipo_result 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",23, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor_variable ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",23, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_result ::= result_integer 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("tipo_result",24, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_result ::= result_string 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("tipo_result",24, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // result_string ::= RESULT PUNTO valor_result 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_string",26, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor_result ::= SCORE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",27, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor_result ::= result_clases 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",27, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_result ::= result_metodos 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",27, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_result ::= result_variables 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",27, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_result ::= result_comentarios 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_result",27, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // result_clases ::= CLASES 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_clases",28, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // result_clases ::= CLASES CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_clases",28, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // result_clases ::= CLASES CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_clases",28, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // result_metodos ::= METODOS 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",29, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // result_metodos ::= METODOS CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",29, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // result_metodos ::= METODOS CORCHETE_A valor_numerico CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",29, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // result_metodos ::= METODOS CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_metodos",29, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // result_variables ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",30, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // result_variables ::= VARIABLES CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",30, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // result_variables ::= VARIABLES CORCHETE_A valor_numerico CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",30, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // result_variables ::= VARIABLES CORCHETE_A valor_numerico CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",30, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // result_variables ::= VARIABLES CORCHETE_A valor_numerico CORCHETE_C PUNTO FUNCION 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_variables",30, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // result_comentarios ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_comentarios",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // result_comentarios ::= COMENTARIOS CORCHETE_A valor_numerico CORCHETE_C 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_comentarios",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // result_comentarios ::= COMENTARIOS CORCHETE_A valor_numerico CORCHETE_C PUNTO TEXTO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_comentarios",31, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // result_integer ::= RESULT PUNTO METODOS CORCHETE_A valor_numerico CORCHETE_C PUNTO PARAMETROS 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("result_integer",25, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.elementAt(CUP$HTML_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_numerico ::= ENTERO 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",32, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_numerico ::= var_tipo_numerica 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",32, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // var_tipo_numerica ::= result_integer 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("var_tipo_numerica",33, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // var_tipo_numerica ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$HTML_Parser$result = parser.getSymbolFactory().newSymbol("var_tipo_numerica",33, ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HTML_Parser$stack.peek()), RESULT);
            }
          return CUP$HTML_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HTML_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HTML_Parser$do_action(
    int                        CUP$HTML_Parser$act_num,
    java_cup.runtime.lr_parser CUP$HTML_Parser$parser,
    java.util.Stack            CUP$HTML_Parser$stack,
    int                        CUP$HTML_Parser$top)
    throws java.lang.Exception
    {
              return CUP$HTML_Parser$do_action_part00000000(
                               CUP$HTML_Parser$act_num,
                               CUP$HTML_Parser$parser,
                               CUP$HTML_Parser$stack,
                               CUP$HTML_Parser$top);
    }
}

}
