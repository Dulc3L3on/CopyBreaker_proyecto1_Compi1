// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: HTML_Lexer.jflex

//Configuraci√≥n
package Backend.Analizadores;
import java_cup.runtime.*;
import Backend.Objetos.Token;
import static Backend.Analizadores.HTML_ParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class HTML_Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int IDENTIFICADOR = 2;
  public static final int FOR = 4;
  public static final int ERROR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\u10fe\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\3\0\1\4\3\0\1\5\1\6\1\7\3\0\1\10"+
    "\1\11\1\12\2\13\7\12\1\14\1\15\1\16\1\0"+
    "\1\17\2\0\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\26\1\31\1\32\1\33\1\34"+
    "\1\35\1\26\1\36\1\37\1\40\1\41\1\42\1\26"+
    "\1\43\2\26\1\44\1\0\1\45\1\0\1\46\1\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\26\1\31\1\32\1\33\1\34\1\35\1\26"+
    "\1\36\1\37\1\40\1\41\1\42\1\26\1\43\2\26"+
    "\126\0\1\26\37\0\1\26\76\0\2\47\115\0\1\50"+
    "\u0180\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\1\11\3\1\6\1\7\2\1\1\10\1\1\2\3"+
    "\1\1\1\3\13\0\12\3\1\0\1\3\2\0\1\11"+
    "\2\3\1\0\1\3\1\12\12\0\1\13\7\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\1\0\1\3\4\0"+
    "\1\14\4\0\1\15\1\16\2\0\1\3\1\0\6\3"+
    "\1\0\2\3\2\17\1\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\14\1\20\3\0\1\3\1\0\2\3\1\0"+
    "\4\3\1\0\1\21\1\22\1\3\1\0\1\21\2\23"+
    "\1\3\4\0\2\24\2\3\1\0\1\3\1\25\1\3"+
    "\2\26\1\3\1\0\1\3\1\0\1\3\2\27\2\30"+
    "\2\3\1\0\1\3\1\0\3\3\1\0\2\31\1\3"+
    "\1\0\1\3\2\32\1\3\1\0\2\33\2\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\244\0\u019a\0\u01c3\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\244"+
    "\0\244\0\u0148\0\u035d\0\244\0\u0386\0\u03af\0\u03d8\0\u0401"+
    "\0\u042a\0\366\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\u0171\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u0386\0\244\0\u07d9\0\u0802\0\u082b\0\u0854\0\244"+
    "\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c"+
    "\0\u09c5\0\u09ee\0\244\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb"+
    "\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03"+
    "\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b"+
    "\0\u0d22\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\244\0\244\0\u0e18"+
    "\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u0148\0\244\0\u102d\0\u1056"+
    "\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\244\0\u114c\0\u087d"+
    "\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294"+
    "\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361\0\u0148\0\u0148\0\u138a"+
    "\0\u13b3\0\244\0\u0148\0\244\0\u13dc\0\u1405\0\u114c\0\u142e"+
    "\0\u1457\0\u0148\0\244\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u0148"+
    "\0\u1524\0\u0148\0\244\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u0148\0\244\0\u0148\0\244\0\u161a\0\u1643\0\u166c\0\u1695"+
    "\0\u16be\0\u16e7\0\u1710\0\u1739\0\u1762\0\u0148\0\244\0\u178b"+
    "\0\u17b4\0\u17dd\0\u0148\0\244\0\u1806\0\u182f\0\u0148\0\244"+
    "\0\u0148\0\244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\11\5\1\11\33\5\2\6"+
    "\1\7\1\12\1\5\1\13\1\5\1\14\1\5\2\15"+
    "\2\5\1\16\1\5\2\12\1\17\2\12\1\20\4\12"+
    "\1\21\1\22\1\12\1\23\1\24\1\25\1\26\1\12"+
    "\1\27\1\12\1\30\1\31\1\32\1\5\1\33\1\5"+
    "\2\6\1\7\1\12\3\5\1\14\1\5\2\15\1\34"+
    "\1\35\1\16\1\5\2\12\1\17\2\12\1\20\1\12"+
    "\1\36\1\37\1\12\1\21\1\22\1\12\1\23\1\24"+
    "\1\25\1\26\1\12\1\27\1\12\1\30\1\31\1\32"+
    "\1\40\1\33\4\5\1\41\1\5\1\13\5\5\1\34"+
    "\1\35\1\11\1\5\2\12\1\17\2\12\1\20\1\12"+
    "\1\36\1\37\1\12\1\21\1\22\1\12\1\23\1\24"+
    "\1\25\1\26\1\12\1\27\1\12\2\5\1\32\1\40"+
    "\1\33\53\0\1\6\47\0\3\42\1\43\45\0\3\44"+
    "\5\0\1\45\7\0\1\46\3\0\1\47\1\0\1\50"+
    "\10\0\1\51\14\0\1\12\5\0\2\12\4\0\24\12"+
    "\2\0\1\12\3\0\3\52\1\53\56\0\2\15\46\0"+
    "\1\54\43\0\1\12\5\0\2\12\4\0\11\12\1\55"+
    "\2\12\1\56\7\12\2\0\1\12\6\0\1\12\5\0"+
    "\2\12\4\0\21\12\1\57\2\12\2\0\1\12\6\0"+
    "\1\12\5\0\2\12\4\0\4\12\1\60\17\12\2\0"+
    "\1\12\6\0\1\12\5\0\2\12\4\0\14\12\1\61"+
    "\7\12\2\0\1\12\6\0\1\12\5\0\2\12\4\0"+
    "\1\62\23\12\2\0\1\12\6\0\1\12\5\0\2\12"+
    "\4\0\4\12\1\63\17\12\2\0\1\12\6\0\1\12"+
    "\5\0\2\12\4\0\2\12\1\64\21\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\4\12\1\65\3\12"+
    "\1\66\13\12\2\0\1\12\1\67\5\0\1\12\5\0"+
    "\2\12\4\0\1\70\23\12\2\0\1\12\24\0\1\71"+
    "\27\0\3\72\13\0\1\73\35\0\1\12\5\0\2\12"+
    "\4\0\1\74\23\12\2\0\1\12\6\0\1\12\5\0"+
    "\2\12\4\0\20\12\1\75\3\12\2\0\1\12\42\0"+
    "\1\76\11\0\3\42\1\77\5\0\2\12\4\0\24\12"+
    "\2\0\1\12\3\0\3\43\1\0\1\100\44\0\3\44"+
    "\15\0\1\46\3\0\1\47\1\0\1\50\10\0\1\51"+
    "\10\0\1\101\3\102\3\101\1\0\1\101\1\103\13\101"+
    "\1\104\1\101\1\105\10\101\1\106\10\101\36\0\1\107"+
    "\46\0\1\110\27\0\1\107\24\0\1\111\30\0\1\112"+
    "\2\0\1\107\3\0\1\107\6\0\1\107\13\0\3\53"+
    "\1\113\44\0\7\101\1\0\1\101\1\103\37\101\4\0"+
    "\1\12\5\0\2\12\4\0\1\114\23\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\12\12\1\115\11\12"+
    "\2\0\1\12\6\0\1\12\5\0\2\12\4\0\13\12"+
    "\1\116\10\12\2\0\1\12\6\0\1\12\5\0\2\12"+
    "\4\0\20\12\1\117\3\12\2\0\1\12\6\0\1\12"+
    "\5\0\2\12\4\0\12\12\1\120\11\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\16\12\1\121\5\12"+
    "\2\0\1\12\6\0\1\12\5\0\2\12\4\0\17\12"+
    "\1\122\4\12\2\0\1\12\1\0\1\123\4\0\1\12"+
    "\5\0\2\12\4\0\14\12\1\124\7\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\23\12\1\125\2\0"+
    "\1\12\6\0\1\12\5\0\2\12\4\0\15\12\1\126"+
    "\6\12\2\0\1\12\37\0\1\127\17\0\1\12\5\0"+
    "\2\12\4\0\16\12\1\130\5\12\2\0\1\12\36\0"+
    "\1\131\20\0\1\12\5\0\2\12\4\0\17\12\1\132"+
    "\4\12\2\0\1\12\1\0\1\133\4\0\1\12\5\0"+
    "\2\12\4\0\4\12\1\134\17\12\2\0\1\12\26\0"+
    "\1\135\25\0\3\43\1\12\1\100\4\0\2\12\4\0"+
    "\24\12\2\0\1\12\2\0\11\101\1\136\40\101\3\102"+
    "\5\101\1\136\13\101\1\104\1\101\1\105\10\101\1\106"+
    "\10\101\7\137\1\101\1\137\1\140\5\137\1\141\31\137"+
    "\11\101\1\136\22\101\1\142\25\101\1\136\1\101\1\143"+
    "\24\101\1\144\21\101\1\136\6\101\1\145\2\101\1\143"+
    "\3\101\1\143\6\101\1\143\12\101\1\0\3\107\13\0"+
    "\1\146\67\0\1\147\44\0\1\150\37\0\1\151\33\0"+
    "\1\12\5\0\2\12\4\0\17\12\1\152\4\12\2\0"+
    "\1\12\1\0\1\153\4\0\1\12\5\0\2\12\4\0"+
    "\4\12\1\154\17\12\2\0\1\12\6\0\1\12\5\0"+
    "\2\12\4\0\2\12\1\155\21\12\2\0\1\12\6\0"+
    "\1\12\5\0\2\12\4\0\14\12\1\156\7\12\2\0"+
    "\1\12\6\0\1\12\5\0\2\12\4\0\1\12\1\157"+
    "\22\12\2\0\1\12\6\0\1\12\5\0\2\12\4\0"+
    "\1\160\23\12\2\0\1\12\6\0\1\12\5\0\2\12"+
    "\4\0\21\12\1\161\2\12\2\0\1\12\43\0\1\162"+
    "\13\0\1\12\5\0\2\12\4\0\16\12\1\163\5\12"+
    "\2\0\1\12\6\0\1\12\5\0\2\12\4\0\20\12"+
    "\1\164\3\12\2\0\1\12\6\0\1\12\5\0\2\12"+
    "\4\0\14\12\1\165\7\12\2\0\1\12\36\0\1\166"+
    "\20\0\1\12\5\0\2\12\4\0\10\12\1\167\13\12"+
    "\2\0\1\12\1\170\37\0\1\171\16\0\1\12\5\0"+
    "\2\12\4\0\20\12\1\172\3\12\2\0\1\12\42\0"+
    "\1\173\14\0\1\12\5\0\2\12\4\0\16\12\1\174"+
    "\5\12\2\0\1\12\40\0\1\175\12\0\11\101\1\136"+
    "\5\101\1\176\31\101\7\137\1\101\1\137\1\140\50\137"+
    "\1\140\5\137\1\177\31\137\11\101\1\136\24\101\1\143"+
    "\13\101\3\143\5\101\1\136\5\101\1\200\42\101\1\136"+
    "\20\101\1\201\27\101\1\136\7\101\1\202\27\101\31\0"+
    "\1\107\50\0\1\203\23\0\1\12\5\0\2\12\4\0"+
    "\4\12\1\204\17\12\2\0\1\12\26\0\1\205\30\0"+
    "\1\12\5\0\2\12\4\0\13\12\1\206\10\12\2\0"+
    "\1\12\6\0\1\12\5\0\2\12\4\0\10\12\1\207"+
    "\13\12\2\0\1\12\1\210\5\0\1\12\5\0\2\12"+
    "\4\0\3\12\1\211\20\12\2\0\1\12\6\0\1\12"+
    "\5\0\2\12\4\0\16\12\1\212\5\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\12\12\1\213\11\12"+
    "\2\0\1\12\6\0\1\12\5\0\2\12\4\0\11\12"+
    "\1\214\12\12\2\0\1\12\33\0\1\215\23\0\1\12"+
    "\5\0\2\12\4\0\4\12\1\216\17\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\14\12\1\217\7\12"+
    "\2\0\1\12\6\0\1\12\5\0\2\12\4\0\1\220"+
    "\23\12\2\0\1\12\22\0\1\221\54\0\1\222\30\0"+
    "\1\12\5\0\2\12\4\0\1\223\23\12\2\0\1\12"+
    "\22\0\1\224\34\0\1\12\5\0\2\12\4\0\1\225"+
    "\23\12\2\0\1\12\22\0\1\226\30\0\7\227\1\0"+
    "\1\227\1\230\37\227\11\101\1\136\17\101\1\143\30\101"+
    "\1\136\17\101\1\231\17\101\24\0\1\107\30\0\1\12"+
    "\5\0\2\12\4\0\17\12\1\232\4\12\2\0\1\12"+
    "\1\0\1\233\37\0\1\233\10\0\1\233\4\0\1\12"+
    "\5\0\2\12\4\0\20\12\1\234\3\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\14\12\1\235\7\12"+
    "\2\0\1\12\36\0\1\236\20\0\1\12\5\0\2\12"+
    "\4\0\14\12\1\237\7\12\2\0\1\12\6\0\1\12"+
    "\5\0\2\12\4\0\4\12\1\240\17\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\4\12\1\241\17\12"+
    "\2\0\1\12\6\0\1\12\5\0\2\12\4\0\20\12"+
    "\1\242\3\12\2\0\1\12\42\0\1\243\14\0\1\12"+
    "\5\0\2\12\4\0\1\12\1\244\22\12\2\0\1\12"+
    "\23\0\1\245\33\0\1\12\5\0\2\12\4\0\20\12"+
    "\1\246\3\12\2\0\1\12\42\0\1\247\10\0\11\227"+
    "\1\230\5\227\1\177\31\227\11\101\1\136\12\101\1\143"+
    "\24\101\4\0\1\12\5\0\2\12\4\0\1\250\23\12"+
    "\2\0\1\12\6\0\1\12\5\0\2\12\4\0\13\12"+
    "\1\251\10\12\2\0\1\12\35\0\1\252\21\0\1\12"+
    "\5\0\2\12\4\0\17\12\1\253\4\12\2\0\1\12"+
    "\1\0\1\254\4\0\1\12\5\0\2\12\4\0\20\12"+
    "\1\255\3\12\2\0\1\12\6\0\1\12\5\0\2\12"+
    "\4\0\11\12\1\256\12\12\2\0\1\12\33\0\1\257"+
    "\23\0\1\12\5\0\2\12\4\0\14\12\1\260\7\12"+
    "\2\0\1\12\36\0\1\261\20\0\1\12\5\0\2\12"+
    "\4\0\16\12\1\262\5\12\2\0\1\12\6\0\1\12"+
    "\5\0\2\12\4\0\16\12\1\263\5\12\2\0\1\12"+
    "\6\0\1\12\5\0\2\12\4\0\4\12\1\264\17\12"+
    "\2\0\1\12\26\0\1\265\30\0\1\12\5\0\2\12"+
    "\4\0\16\12\1\266\5\12\2\0\1\12\40\0\1\267"+
    "\16\0\1\12\5\0\2\12\4\0\10\12\1\270\13\12"+
    "\2\0\1\12\1\271\5\0\1\12\5\0\2\12\4\0"+
    "\14\12\1\272\7\12\2\0\1\12\6\0\1\12\5\0"+
    "\2\12\4\0\17\12\1\273\4\12\2\0\1\12\1\0"+
    "\1\274\37\0\1\274\10\0\1\274\4\0\1\12\5\0"+
    "\2\12\4\0\14\12\1\275\7\12\2\0\1\12\36\0"+
    "\1\276\20\0\1\12\5\0\2\12\4\0\17\12\1\277"+
    "\4\12\2\0\1\12\1\0\1\300\4\0\1\12\5\0"+
    "\2\12\4\0\17\12\1\301\4\12\2\0\1\12\1\0"+
    "\1\302\37\0\1\302\10\0\1\302";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\5\1\1\11\13\1\2\11\2\1\1\11"+
    "\5\1\13\0\12\1\1\0\1\1\2\0\1\11\2\1"+
    "\1\0\1\1\1\11\12\0\1\11\7\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\4\0\1\1"+
    "\4\0\2\11\2\0\1\1\1\0\6\1\1\0\3\1"+
    "\1\11\1\1\2\0\1\1\1\0\1\1\1\0\1\11"+
    "\2\1\3\0\1\1\1\0\2\1\1\0\4\1\1\0"+
    "\3\1\1\0\1\11\1\1\1\11\1\1\4\0\1\1"+
    "\1\11\2\1\1\0\4\1\1\11\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\11\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    boolean etiquetaAntApetura = false;//Esta solo podr√° ser cambiada por las eti de cierre o apertura, no por $$()$$, en el caso de la etiqueta for, la podr√° modificar hasta que se haya corroborado que todo est√° bien con el for... xD
    int estadoEntrada = -5;//para evitar que haga matchs que no corresponden...
    
    boolean yaSeHaHechoPush = false;//Esto es por el comentario, porque en realidad no deber√≠a poder cb de estado, porque no es un pto de recu, sino solo un comment xD, eso s√≠, si deber√≠a hacer que se env√≠e el contenido dep de la etiqueta xD
    //aqu√≠ no se requiere del manejador de errores, puesto que todo lo que no sea palabras reservadas y est√© dentro de dos tag de ini y fin o est√© fuer [antes de una tag de ini], lo toma como cont int o ext respectivamente xD

    boolean requeriaCompania = false;
    Token tokenAnterior = null;

    StringBuffer contenido = new StringBuffer();
  
    private Symbol symbol(int tipo, String valor, boolean conCompania){//Dej√© el valor como string, como no requiero que alguno de los lexemas sea diferente...
        Token tokenActual = new Token ((yyline+1), (yycolumn+1), valor, (conCompania)?tokenAnterior:null);        

        if(tokenAnterior != null && requeriaCompania){
            tokenAnterior.setSiguiente(tokenActual);
        }

        tokenAnterior = tokenActual;
        requeriaCompania = conCompania;
        return new Symbol(tipo, yyline+1, yycolumn+1, tokenActual);
    }

     private Symbol accionComentario(){        
        String comentarioLleno = yytext().replaceAll("^\\s*","").toLowerCase();
        String cierres[] = new String[]{"</html>", "</h1>", "</h2>", "</table>", "</tr>", "</th>", "</td>", "</for>"};//no add a br, porque con ese o hya conflictos xD

        for(int actual = 0; actual < cierres.length; actual++){
            if(comentarioLleno.startsWith(cierres[actual])){
                System.out.println("[L] close label: "+ cierres[actual]);         
                yypushback((yylength()-(cierres[actual].length())));
                etiquetaAntApetura = false;//Aqu√≠ no importa si es la de HTML o no xD

                return symbol(((actual == 0)?HTML_C:((actual == 1)?H1_C:((actual == 2)?H2_C:
                ((actual == 3)?TABLE_C:((actual == 4)?TR_C:((actual == 5)?TH_C:
                ((actual == 6)?TD_C:FOR_C))))))), cierres[actual], false);
            }            
        }//quiz√° adem√°s de esto requiera hacer una eli en el string duplicado de esta parte, para eliminar los coment, conforme los vaya encontrando...

        System.out.println("[L] comentario: "+ yytext() + "\n");
        return null;
        //return symbol(COMENTARIOS, yytext(), false);//estos no se env√≠an :v dobi
    }

    private Symbol acccionReservada(int tipo){
        System.out.println("[L] reservada: "+ yytext());                

        return symbol(tipo, yytext(), false);    
    }
   
    private Symbol axnEtiquetasAperturaEstandar(){    
        System.out.println("[L] open label: "+ yytext() +" "+ ((yytext().toLowerCase().contains("html"))?"HTML_A":((yytext().toLowerCase().contains("h1"))?
        "H1_A":((yytext().toLowerCase().contains("h2"))?"H2_A":((yytext().toLowerCase().contains("table"))?"TABLE_A":
        ((yytext().toLowerCase().contains("tr"))?"TR_A":((yytext().toLowerCase().contains("th"))?"TH_A":((yytext().toLowerCase().contains("td"))?"TD_A":"BR"))))))));        

        return symbol((((yytext().toLowerCase().contains("html"))?HTML_A:((yytext().toLowerCase().contains("h1"))?H1_A:
                       ((yytext().toLowerCase().contains("h2"))?H2_A:((yytext().toLowerCase().contains("table"))?TABLE_A:
                       ((yytext().toLowerCase().contains("tr"))?TR_A:((yytext().toLowerCase().contains("th"))?TH_A:
                       ((yytext().toLowerCase().contains("td"))?TD_A:BR)))))))), new String(yytext()), false);                
    }//en realidad BR creo que no deber√≠a setear a true la var en la que se almacena si antes hubo una eti de apertura, pero hasta donde s√© y pienso, no provoca da√±os ni perjuicios xD

    private Symbol axnEtiquetasCierreEstandar(){
        System.out.println("[L] close label: "+ yytext() +" "+ ((yytext().toLowerCase().contains("html"))?"HTML_C":((yytext().toLowerCase().contains("h1"))?
        "H1_C":((yytext().toLowerCase().contains("h2"))?"H2_C":((yytext().toLowerCase().contains("table"))?"TABLE_C":
        ((yytext().toLowerCase().contains("tr"))?"TR_C":((yytext().toLowerCase().contains("th"))?"TH_C":((yytext().toLowerCase().contains("td"))?"TD_C":"FOR_C"))))))));   

        return symbol((((yytext().toLowerCase().contains("html"))?HTML_C:((yytext().toLowerCase().contains("h1"))?H1_C:
                       ((yytext().toLowerCase().contains("h2"))?H2_C:((yytext().toLowerCase().contains("table"))?TABLE_C:
                       ((yytext().toLowerCase().contains("tr"))?TR_C:((yytext().toLowerCase().contains("th"))?TH_C:
                       ((yytext().toLowerCase().contains("td"))?TD_C:FOR_C)))))))), new String(yytext()), false);                
    }


    private void accionProcesarError(){
        estadoEntrada = (yystate()!=ERROR)?yystate():estadoEntrada;//puesto que error no es un estado con el que deba trabajar el lenguaje, sino que es un aux, un detector xD, si no hac√≠as esto se creaba un bucle infinito, xd [edscubierto en el alone xD]
        //  System.out.println((estadoEntrada == ERROR)?"ERROR":"ESTADO");
        
        if(yystate() != ERROR){
            contenido.setLength(0);//no provoca problemas el usar la variable string que tb usa SSTRING para concatenar, puesto que al estar en ese estado no se entrar√° aqu√≠ puesto que esta expre reg tiene la menor precedencia y las reglas de all√° impiden que este caso suceda... puesto que se absorben todos los caracteres posibles hasta llegar a la otra "
            yypushback(yylength());//iba a colocar 1, en lugar de yylength pero no se si la unidad de medida var√≠e porque podr√≠a se que cada caracter tenga un tama√±o diferente dependiendo de la cdad de bits que requiera para ser plasmado p.ej
            yybegin(ERROR);
        }else if(yystate() == ERROR){
            contenido.append(yytext());
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTML_Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(HTML_ParserSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { accionProcesarError();
            }
            // fall through
          case 29: break;
          case 2:
            { /*se ignora*/
            }
            // fall through
          case 30: break;
          case 3:
            { if(yystate() == ERROR){
                                                                    //System.out.println("estado actual: "+((yystate() == ERROR)?"ERROR":((yystate()==IDENTIFICADOR)?"IDENTIFICADR":((yystate() == FOR)?"FOR":"YYINI"))));
                                                                    //System.out.println((estadoEntrada == ERROR)?"ERROR":((estadoEntrada==IDENTIFICADOR)?"IDENTIFICADR":((estadoEntrada == FOR)?"FOR":"YYINI")));

                                                                    if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){                                                                        
                                                                        if(etiquetaAntApetura){
                                                                            yypushback(yylength());
                                                                            yybegin(estadoEntrada);//lo dejo as√≠,puesto que solo puede ser cualquiera de los 3 que esperar√≠a que fuera...                                                                                    

                                                                            System.out.println("[L] contenido in [var]: "+ contenido.toString() + "\n");                                                                                                                                                        
                                                                            estadoEntrada = -5 ;                                                                            

                                                                            if(!contenido.toString().isBlank()){
                                                                                return symbol(CONTENIDO, new String(contenido), false);
                                                                            }                                                          
                                                                        }else{
                                                                            contenido.append(yytext());
                                                                            //System.out.println("[L] contenido ext [var]: "+ contenido.toString() + "\n");                                                      
                                                                        }     

                                                                    }else{//Es decir que es YYINITIAL
                                                                        contenido.append(yytext());
                                                                    }//puesto que en el estado YYINI, no existe una ER como identificador
                                                                  }else{//Dejo solo el else, porque aqu√≠ solo se puede entrar por ERROR, FOR o IDENTIFICADOR y esos √∫ltimos 2 deber√≠an exe este bloque
                                                                    System.out.println("[L] variable: "+yytext());                                                                    
                                                                    return symbol(VARIABLE, yytext(), false);}
            }
            // fall through
          case 31: break;
          case 4:
            { System.out.println("[L] invocacion: "+yytext());
                                                                return symbol(PUNTO, yytext(), false);
            }
            // fall through
          case 32: break;
          case 5:
            { System.out.println("[L] entero: "+yytext());
                                                                return symbol(ENTERO, yytext(), false);
            }
            // fall through
          case 33: break;
          case 6:
            { System.out.println("[L] agrup_arr: "+yytext());
                                                                return symbol(CORCHETE_A, yytext(), false);
            }
            // fall through
          case 34: break;
          case 7:
            { System.out.println("[L] agrup_arr: "+yytext());
                                                                return symbol(CORCHETE_C, yytext(), false);
            }
            // fall through
          case 35: break;
          case 8:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(FOR);//antes ten√≠a estadoEntrada, pero ya que s√© cual es mejor lo pongo de una vez xD
                                                            if(etiquetaAntApetura){
                                                                System.out.println("[L] contenido in [:]: "+ contenido.toString() + "\n");    
                                                                if(!contenido.toString().isBlank()){
                                                                    return symbol(CONTENIDO, new String(contenido), false);
                                                                }                                                                                                                          
                                                            }else{
                                                                System.out.println("[L] contenido ext [:]: "+ contenido.toString() + "\n");                                                      
                                                            }     

                                                            estadoEntrada = -5;                                                                                  
                                                        }else{//Es decir que es YYINITIAL|FOR
                                                            contenido.append(yytext());
                                                        }//puesto que en el estado YYINI y en el IDEN, no se tiene nada m√°s que a sus propias etiquetas como palabras a identificar xD
                                                        //el estado se deber√≠a cambiar hasta que haya un yybegin, hacia una parte dirferente, o mejor dicho cuando se detecte otro error/contenido                                                        
                                                    }else{//Dejo solo el else, porque aqu√≠ solo se puede entrar por ERROR, FOR o IDENTIFICADOR y esos √∫ltimos 2 deber√≠an exe este bloque
                                                         System.out.println("[L] for: "+"DOS_PUNTOS");                                                                                                                  
                                                         return symbol(DOS_PUNTOS, yytext(), false);}
            }
            // fall through
          case 36: break;
          case 9:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(FOR);//pongo el YYINI, puesto que al llegar aqu√≠ sin importar que haya sido desde el estado de error, esta ER siempre indicar√° fin de etiqueta de ini del for, por lo tanto, que deber√≠a salirse de este estado...
                                                            if(etiquetaAntApetura){
                                                                System.out.println("[L] contenido in [fin_FOR]: "+ contenido.toString() + "\n");                                                                
                                                                if(!contenido.toString().isBlank()){
                                                                    return symbol(CONTENIDO, new String(contenido), false);
                                                                }                                                          
                                                            }else{
                                                                System.out.println("[L] contenido ext [fin_FOR]: "+ contenido.toString() + "\n");                                                      
                                                            }     

                                                            estadoEntrada = -5 ;                                                                                
                                                        }else{//Es decir que es YYINITIAL|FOR
                                                            contenido.append(yytext());
                                                        }//puesto que en el estado YYINI y en el IDEN, no se tiene nada m√°s que a sus propias etiquetas como palabras a identificar xD
                                                    }else{//Dejo solo el else, porque aqu√≠ solo se puede entrar por ERROR, FOR o IDENTIFICADOR y esos √∫ltimos 2 deber√≠an exe este bloque
                                                        System.out.println("[L] fin FOR [FOR -> YYINI]");
                                                        yybegin(YYINITIAL);
                                                        return symbol(FOR_CA, yytext(), false);}
            }
            // fall through
          case 37: break;
          case 10:
            { if(yystate() == ERROR){//puesto que aqu√≠ no se ha completado la etiqueta, no se puede hacer el env√≠o del contenido, o si? solo lo que no se puede hacer es colocar el valor de la var que se mencion√≥, en false...                                                      
                                                      if(etiquetaAntApetura){//puesto que no importa si la etiqueta est√° bien formada, sino que se hall√≥ con un algo que corresp a una de apertura y eso le basta para hacer el respectivo retorno...
                                                           yypushback(yylength());
                                                           yybegin(YYINITIAL);

                                                           System.out.println("[L] contenido in [ini_ID]: "+ contenido.toString() + "\n");                                                           
                                                           if(!contenido.toString().isBlank()){
                                                                return symbol(CONTENIDO, new String(contenido), false);
                                                            }                                                          
                                                      }else{
                                                            contenido.append(yytext());
                                                           //System.out.println("[L] contenido ext [ini_ID]: "+ contenido.toString() + "\n");                                                      
                                                      }                                                         
                                                    }else{//es decir es = YYINITIAL, puesto que solo con estado error y YYINI, se puede entrar a esta secci√≥n                                                      
                                                      //etiquetaAntApetura = true;//NO debe tener esto, pues podr√≠a estar en el exterior y hacer que todo lo que aparezca desp√©s de esa etiqueta se tome como contini lo cula no es cierto y mejor dicho, en el exterior esta etiqueta no tendr√≠a por qu√© identificarse como un ID... sino como un contenido
                                                        System.out.println("[L] ini ID\n");   
                                                        yybegin(IDENTIFICADOR);
                                                        return symbol(VAR_A, yytext(), false);}
            }
            // fall through
          case 38: break;
          case 11:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);//lo dejo as√≠,puesto que solo puede ser cualquiera de los 3 que esperar√≠a que fuera...                                                                                    
                                                            if(etiquetaAntApetura){
                                                                System.out.println("[L] contenido in [fin_ID]: "+ contenido.toString() + "\n");                                                                
                                                                if(!contenido.toString().isBlank()){
                                                                    return symbol(CONTENIDO, new String(contenido), false);
                                                                }                                                          
                                                            }else{
                                                                System.out.println("[L] contenido ext [fin_ID]: "+ contenido.toString() + "\n");                                                      
                                                            }     

                                                            estadoEntrada = -5 ;//lo pongo aqu√≠ porque despu√©s de esto el estado actual cb, por lo tanto debe dejarle limpio para que se add el estado que corresp xD xD...
                                                        }else{//Es decir que es YYINITIAL|FOR
                                                            contenido.append(yytext());
                                                        }//puesto que en el estado YYINI y en el FOR, no existe una ER como identificador                                                        
                                                      }else{//Dejo solo el else, porque aqu√≠ solo se puede entrar por ERROR, FOR o IDENTIFICADOR y esos √∫ltimos 2 deber√≠an exe este bloque
                                                         System.out.println("[L] fin identificador [IDENT -> YYINI]");
                                                         yybegin(YYINITIAL);
                                                         return symbol(VAR_C, yytext(), false);}
            }
            // fall through
          case 39: break;
          case 12:
            { if(yystate() == ERROR){
                                                        if(!yaSeHaHechoPush){
                                                            yypushback(yylength());
                                                            //yybegin(estadoEntrada);//tendr√≠a que hacer un cb de estado?? no deber√≠a mantenerme en el que estab puesto que esto es un comentario???
                                                            if(etiquetaAntApetura){
                                                                System.out.println("[L] contenido in [Com]: "+ contenido.toString() + "\n");                                                            
                                                                if(!contenido.toString().isBlank()){
                                                                    return symbol(CONTENIDO, new String(contenido), false);
                                                                }                                                          
                                                            }else{                                                                                                                                
                                                                System.out.println("[L] contenido ext [Com]: "+ contenido.toString() + "\n");                                                      
                                                            }    
                                                            yaSeHaHechoPush = true;
                                                            contenido.setLength(0);//para limpiar el buffer, puesto que no se saldr√° del estado de error, hasta que alguna otra etiqueta lo haga.. xD
                                                        }else{
                                                            yaSeHaHechoPush = false;//este solo es de utilidad para el comentario y siempre se vendr√° a esta parte, cuando se entre estando en un estado de error, por lo tanto no habr√°n incongruencias...
                                                            Symbol simbolo = accionComentario();    
                                                            if(simbolo != null){
                                                                return simbolo;
                                                            }
                                                        }//para este punto ya se habr√° enviado el contenido como corresponde y se habr√° puesto el puntero al inicio del comentario, por lo tanto solo queda reiniciar la var y mostrar que lo que sigue es un comentario... xD     //estadoEntrada = -5 ;                                                            
                                                    }else{
                                                        Symbol simbolo = accionComentario();    
                                                            if(simbolo != null){
                                                                return simbolo;
                                                            }
                                                    }//sino no hay nada que hacer xD
            }
            // fall through
          case 40: break;
          case 13:
            { if(yystate() == ERROR){
                                                        yypushback(yylength());
                                                        yybegin(YYINITIAL);
                                                        if(etiquetaAntApetura){
                                                            System.out.println("[L] contenido in [aper]: "+ contenido.toString() + "\n");                                                        
                                                            if(!contenido.toString().isBlank()){
                                                                return symbol(CONTENIDO, new String(contenido), false);
                                                            }                                                          
                                                        }else{
                                                            System.out.println("[L] contenido ext [aper]: "+ contenido.toString() + "\n");                                                      
                                                        }                                                                                                                                                                       
                                                    }else{//es decir es = YYINITIAL, puesto que solo con estado error y YYINI, se puede entrar a esta secci√≥n
                                                      etiquetaAntApetura = ((yytext().toLowerCase().contains("html"))?false:true);//Siemore y cuando NO SEA LA DE HML
                                                      return axnEtiquetasAperturaEstandar();}
            }
            // fall through
          case 41: break;
          case 14:
            { if(yystate() == ERROR){//puesto que aqu√≠ no se ha completado la etiqueta, no se puede hacer el env√≠o del contenido, o si? solo lo que no se puede hacer es colocar el valor de la var que se mencion√≥, en false...
                                                      yypushback(yylength());
                                                      yybegin(YYINITIAL);
                                                      if(etiquetaAntApetura){//puesto que no importa si la etiqueta est√° bien formada, sino que se hall√≥ con un algo que corresp a una de apertura y eso le basta para hacer el respectivo retorno...
                                                           System.out.println("[L] contenido in [ini_for]: "+ contenido.toString() + "\n");                                                           
                                                           if(!contenido.toString().isBlank()){
                                                                return symbol(CONTENIDO, new String(contenido), false);
                                                            }                                                          
                                                      }else{
                                                           System.out.println("[L] contenido ext [ini_for: "+ contenido.toString() + "\n");                                                      
                                                      }                                                         
                                                    }else{//es decir es = YYINITIAL, puesto que solo con estado error y YYINI, se puede entrar a esta secci√≥n
                                                        System.out.println("[L] inicio_FOR\n");                                                    
                                                        etiquetaAntApetura = true;//puesto que de no colocarlo, suponeindo que antes de la etiqueta de def de las var del for hubiera una etiqueta de cierre o nada, al leer el contenido, lo tomar√≠a como contenido externo y eso no lo enviar√≠a al parser y por lo tanto no se reportar√≠a el error por la desinformaci√≥n que √©ste √∫ltimo tendr√≠a...
                                                        yybegin(FOR);
                                                        return symbol(FOR_A, yytext(), false);}
            }
            // fall through
          case 42: break;
          case 15:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(TIPO);
                                                    }
            }
            // fall through
          case 43: break;
          case 16:
            { if(yystate() == ERROR){
                                                        yypushback(yylength());
                                                        yybegin(YYINITIAL);
                                                        if(etiquetaAntApetura){
                                                            System.out.println("[L] contenido in [cierr]: "+ contenido.toString() + "\n");                                                            
                                                            if(!contenido.toString().isBlank()){
                                                                return symbol(CONTENIDO, new String(contenido), false);
                                                            }                                                          
                                                        }else{
                                                            System.out.println("[L] contenido ext [cierr]: "+ contenido.toString() + "\n");                                                      
                                                        }                                 
                                                    }else{//es decir es = YYINITIAL, puesto que solo con estado error y YYINI, se puede entrar a esta secci√≥n
                                                        etiquetaAntApetura = false;//Aqu√≠ no importa si es la de HTML o no xD
                                                        return axnEtiquetasCierreEstandar();}
            }
            // fall through
          case 44: break;
          case 17:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(SCORE);
                                                    }
            }
            // fall through
          case 45: break;
          case 18:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(TEXTO);
                                                    }
            }
            // fall through
          case 46: break;
          case 19:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == FOR){//estadoEntrada == IDENTIFICADOR, puesto que en realidad palabra reservada como tal solo dentro del estado l√©xico del for...
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(HASTA);
                                                    }
            }
            // fall through
          case 47: break;
          case 20:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(CLASES);
                                                    }
            }
            // fall through
          case 48: break;
          case 21:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(NOMBRE);
                                                    }
            }
            // fall through
          case 49: break;
          case 22:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(RESULT);
                                                    }
            }
            // fall through
          case 50: break;
          case 23:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(FUNCION);
                                                    }
            }
            // fall through
          case 51: break;
          case 24:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(METODOS);
                                                    }
            }
            // fall through
          case 52: break;
          case 25:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(ITERATOR);
                                                    }
            }
            // fall through
          case 53: break;
          case 26:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(VARIABLES);
                                                    }
            }
            // fall through
          case 54: break;
          case 27:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(PARAMETROS);
                                                    }
            }
            // fall through
          case 55: break;
          case 28:
            { if(yystate() == ERROR){
                                                        if(estadoEntrada == IDENTIFICADOR || estadoEntrada == FOR){
                                                            yypushback(yylength());
                                                            yybegin(estadoEntrada);
                                                        }else{
                                                            contenido.append(yytext());
                                                        }
                                                    }else{
                                                        return acccionReservada(COMENTARIOS);
                                                    }
            }
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
